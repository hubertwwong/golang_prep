
> findAllConcatenatedWordInADict >>> rfkqyuqfjkx <<<<

> icw > start > [ rfkqyuqfjkx ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ fkqyuqfjkx ]

> icw > start > [ fkqyuqfjkx ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ kqyuqfjkx ]

> icw > start > [ kqyuqfjkx ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ qyuqfjkx ]

> icw > start > [ qyuqfjkx ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ yuqfjkx ]

> icw > start > [ yuqfjkx ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ uqfjkx ]

> icw > start > [ uqfjkx ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ qfjkx ]

> icw > start > [ qfjkx ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ fjkx ]

> icw > start > [ fjkx ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ jkx ]

> icw > start > [ jkx ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > split [ yu ][ qfjkx ]

> icw > start > [ qfjkx ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ fjkx ]

> icw > start > [ fjkx ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ jkx ]

> icw > start > [ jkx ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>>  <<<<

> icw > start > [  ] 0 <nil>
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vnrtysfrzrmzl <<<<

> icw > start > [ vnrtysfrzrmzl ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ nrtysfrzrmzl ]

> icw > start > [ nrtysfrzrmzl ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ rtysfrzrmzl ]

> icw > start > [ rtysfrzrmzl ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ tysfrzrmzl ]

> icw > start > [ tysfrzrmzl ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ ysfrzrmzl ]

> icw > start > [ ysfrzrmzl ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ sfrzrmzl ]

> icw > start > [ sfrzrmzl ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ frzrmzl ]

> icw > start > [ frzrmzl ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ rzrmzl ]

> icw > start > [ rzrmzl ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ zrmzl ]

> icw > start > [ zrmzl ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gfve <<<<

> icw > start > [ gfve ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ fve ]

> icw > start > [ fve ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ ve ]

> icw > start > [ ve ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ e ]

> icw > start > [ e ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> qfpd <<<<

> icw > start > [ qfpd ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ fpd ]

> icw > start > [ fpd ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ pd ]

> icw > start > [ pd ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ d ]

> icw > start > [ d ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lqdqrrcrwdnxeuo <<<<

> icw > start > [ lqdqrrcrwdnxeuo ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > split [ lq ][ dqrrcrwdnxeuo ]

> icw > start > [ dqrrcrwdnxeuo ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ qrrcrwdnxeuo ]

> icw > start > [ qrrcrwdnxeuo ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ rrcrwdnxeuo ]

> icw > start > [ rrcrwdnxeuo ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ rcrwdnxeuo ]

> icw > start > [ rcrwdnxeuo ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ crwdnxeuo ]

> icw > start > [ crwdnxeuo ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ rwdnxeuo ]

> icw > start > [ rwdnxeuo ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ wdnxeuo ]

> icw > start > [ wdnxeuo ] 7 <nil>
> icw > 0 > w > [wc] 7 > [i] 0
> icw > split [ w ][ dnxeuo ]

> icw > start > [ dnxeuo ] 8 <nil>
> icw > 0 > d > [wc] 8 > [i] 0
> icw > split [ d ][ nxeuo ]

> icw > start > [ nxeuo ] 9 <nil>
> icw > 0 > n > [wc] 9 > [i] 0
> icw > split [ n ][ xeuo ]

> icw > start > [ xeuo ] 10 <nil>
> icw > 0 > x > [wc] 10 > [i] 0
> icw > split [ x ][ euo ]

> icw > start > [ euo ] 11 <nil>
> icw > 0 > e > [wc] 11 > [i] 0
> icw > split [ e ][ uo ]

> icw > start > [ uo ] 12 <nil>
> icw > 0 > u > [wc] 12 > [i] 0
> icw > split [ u ][ o ]

> icw > start > [ o ] 13 <nil>
> icw > 0 > o > [wc] 13 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 12 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 9 > [i] 1
> icw > split [ nx ][ euo ]

> icw > start > [ euo ] 10 <nil>
> icw > 0 > e > [wc] 10 > [i] 0
> icw > split [ e ][ uo ]

> icw > start > [ uo ] 11 <nil>
> icw > 0 > u > [wc] 11 > [i] 0
> icw > split [ u ][ o ]

> icw > start > [ o ] 12 <nil>
> icw > 0 > o > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 7 > [i] 1
> icw > split [ wd ][ nxeuo ]

> icw > start > [ nxeuo ] 8 <nil>
> icw > 0 > n > [wc] 8 > [i] 0
> icw > split [ n ][ xeuo ]

> icw > start > [ xeuo ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ euo ]

> icw > start > [ euo ] 10 <nil>
> icw > 0 > e > [wc] 10 > [i] 0
> icw > split [ e ][ uo ]

> icw > start > [ uo ] 11 <nil>
> icw > 0 > u > [wc] 11 > [i] 0
> icw > split [ u ][ o ]

> icw > start > [ o ] 12 <nil>
> icw > 0 > o > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > split [ nx ][ euo ]

> icw > start > [ euo ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > split [ e ][ uo ]

> icw > start > [ uo ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ o ]

> icw > start > [ o ] 11 <nil>
> icw > 0 > o > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > n > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > split [ cr ][ wdnxeuo ]

> icw > start > [ wdnxeuo ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > split [ w ][ dnxeuo ]

> icw > start > [ dnxeuo ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ nxeuo ]

> icw > start > [ nxeuo ] 8 <nil>
> icw > 0 > n > [wc] 8 > [i] 0
> icw > split [ n ][ xeuo ]

> icw > start > [ xeuo ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ euo ]

> icw > start > [ euo ] 10 <nil>
> icw > 0 > e > [wc] 10 > [i] 0
> icw > split [ e ][ uo ]

> icw > start > [ uo ] 11 <nil>
> icw > 0 > u > [wc] 11 > [i] 0
> icw > split [ u ][ o ]

> icw > start > [ o ] 12 <nil>
> icw > 0 > o > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > split [ nx ][ euo ]

> icw > start > [ euo ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > split [ e ][ uo ]

> icw > start > [ uo ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ o ]

> icw > start > [ o ] 11 <nil>
> icw > 0 > o > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > split [ wd ][ nxeuo ]

> icw > start > [ nxeuo ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > split [ n ][ xeuo ]

> icw > start > [ xeuo ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ euo ]

> icw > start > [ euo ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > split [ e ][ uo ]

> icw > start > [ uo ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ o ]

> icw > start > [ o ] 11 <nil>
> icw > 0 > o > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > split [ nx ][ euo ]

> icw > start > [ euo ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ uo ]

> icw > start > [ uo ] 9 <nil>
> icw > 0 > u > [wc] 9 > [i] 0
> icw > split [ u ][ o ]

> icw > start > [ o ] 10 <nil>
> icw > 0 > o > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > n > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > u > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > o > [wc] 0 > [i] 14
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> q <<<<

> icw > start > [ q ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> klaitgdphcspij <<<<

> icw > start > [ klaitgdphcspij ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ laitgdphcspij ]

> icw > start > [ laitgdphcspij ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > j > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hbsfyfv <<<<

> icw > start > [ hbsfyfv ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ bsfyfv ]

> icw > start > [ bsfyfv ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ sfyfv ]

> icw > start > [ sfyfv ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ fyfv ]

> icw > start > [ fyfv ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ yfv ]

> icw > start > [ yfv ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ fv ]

> icw > start > [ fv ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ v ]

> icw > start > [ v ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> adzpbfudkklrw <<<<

> icw > start > [ adzpbfudkklrw ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ dzpbfudkklrw ]

> icw > start > [ dzpbfudkklrw ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ zpbfudkklrw ]

> icw > start > [ zpbfudkklrw ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> aozmixr <<<<

> icw > start > [ aozmixr ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ ozmixr ]

> icw > start > [ ozmixr ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ zmixr ]

> icw > start > [ zmixr ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ife <<<<

> icw > start > [ ife ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > split [ if ][ e ]

> icw > start > [ e ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> feclhbvfuk <<<<

> icw > start > [ feclhbvfuk ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ eclhbvfuk ]

> icw > start > [ eclhbvfuk ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ clhbvfuk ]

> icw > start > [ clhbvfuk ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ lhbvfuk ]

> icw > start > [ lhbvfuk ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yeqfqojwtw <<<<

> icw > start > [ yeqfqojwtw ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ eqfqojwtw ]

> icw > start > [ eqfqojwtw ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ qfqojwtw ]

> icw > start > [ qfqojwtw ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ fqojwtw ]

> icw > start > [ fqojwtw ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ qojwtw ]

> icw > start > [ qojwtw ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ ojwtw ]

> icw > start > [ ojwtw ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ jwtw ]

> icw > start > [ jwtw ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > split [ fq ][ ojwtw ]

> icw > start > [ ojwtw ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ jwtw ]

> icw > start > [ jwtw ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > split [ ye ][ qfqojwtw ]

> icw > start > [ qfqojwtw ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ fqojwtw ]

> icw > start > [ fqojwtw ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ qojwtw ]

> icw > start > [ qojwtw ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ ojwtw ]

> icw > start > [ ojwtw ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ jwtw ]

> icw > start > [ jwtw ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > split [ fq ][ ojwtw ]

> icw > start > [ ojwtw ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ jwtw ]

> icw > start > [ jwtw ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> sileeztxwjl <<<<

> icw > start > [ sileeztxwjl ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ ileeztxwjl ]

> icw > start > [ ileeztxwjl ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > split [ il ][ eeztxwjl ]

> icw > start > [ eeztxwjl ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ eztxwjl ]

> icw > start > [ eztxwjl ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ ztxwjl ]

> icw > start > [ ztxwjl ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ngbqqmbxqcqp <<<<

> icw > start > [ ngbqqmbxqcqp ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ gbqqmbxqcqp ]

> icw > start > [ gbqqmbxqcqp ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ bqqmbxqcqp ]

> icw > start > [ bqqmbxqcqp ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ qqmbxqcqp ]

> icw > start > [ qqmbxqcqp ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ qmbxqcqp ]

> icw > start > [ qmbxqcqp ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ mbxqcqp ]

> icw > start > [ mbxqcqp ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ bxqcqp ]

> icw > start > [ bxqcqp ] 6 <nil>
> icw > 0 > b > [wc] 6 > [i] 0
> icw > split [ b ][ xqcqp ]

> icw > start > [ xqcqp ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ qcqp ]

> icw > start > [ qcqp ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > split [ q ][ cqp ]

> icw > start > [ cqp ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > split [ c ][ qp ]

> icw > start > [ qp ] 10 <nil>
> icw > 0 > q > [wc] 10 > [i] 0
> icw > split [ q ][ p ]

> icw > start > [ p ] 11 <nil>
> icw > 0 > p > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > split [ qm ][ bxqcqp ]

> icw > start > [ bxqcqp ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ xqcqp ]

> icw > start > [ xqcqp ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ qcqp ]

> icw > start > [ qcqp ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > split [ q ][ cqp ]

> icw > start > [ cqp ] 8 <nil>
> icw > 0 > c > [wc] 8 > [i] 0
> icw > split [ c ][ qp ]

> icw > start > [ qp ] 9 <nil>
> icw > 0 > q > [wc] 9 > [i] 0
> icw > split [ q ][ p ]

> icw > start > [ p ] 10 <nil>
> icw > 0 > p > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ ng ][ bqqmbxqcqp ]

> icw > start > [ bqqmbxqcqp ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ qqmbxqcqp ]

> icw > start > [ qqmbxqcqp ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ qmbxqcqp ]

> icw > start > [ qmbxqcqp ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ mbxqcqp ]

> icw > start > [ mbxqcqp ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ bxqcqp ]

> icw > start > [ bxqcqp ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ xqcqp ]

> icw > start > [ xqcqp ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ qcqp ]

> icw > start > [ qcqp ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > split [ q ][ cqp ]

> icw > start > [ cqp ] 8 <nil>
> icw > 0 > c > [wc] 8 > [i] 0
> icw > split [ c ][ qp ]

> icw > start > [ qp ] 9 <nil>
> icw > 0 > q > [wc] 9 > [i] 0
> icw > split [ q ][ p ]

> icw > start > [ p ] 10 <nil>
> icw > 0 > p > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > split [ qm ][ bxqcqp ]

> icw > start > [ bxqcqp ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ xqcqp ]

> icw > start > [ xqcqp ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ qcqp ]

> icw > start > [ qcqp ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ cqp ]

> icw > start > [ cqp ] 7 <nil>
> icw > 0 > c > [wc] 7 > [i] 0
> icw > split [ c ][ qp ]

> icw > start > [ qp ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > split [ q ][ p ]

> icw > start > [ p ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> khhqr <<<<

> icw > start > [ khhqr ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ hhqr ]

> icw > start > [ hhqr ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ hqr ]

> icw > start > [ hqr ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ qr ]

> icw > start > [ qr ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ r ]

> icw > start > [ r ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> dwfcayssyoqc <<<<

> icw > start > [ dwfcayssyoqc ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ wfcayssyoqc ]

> icw > start > [ wfcayssyoqc ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ fcayssyoqc ]

> icw > start > [ fcayssyoqc ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ cayssyoqc ]

> icw > start > [ cayssyoqc ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ ayssyoqc ]

> icw > start > [ ayssyoqc ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ yssyoqc ]

> icw > start > [ yssyoqc ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ ssyoqc ]

> icw > start > [ ssyoqc ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > split [ s ][ syoqc ]

> icw > start > [ syoqc ] 7 <nil>
> icw > 0 > s > [wc] 7 > [i] 0
> icw > split [ s ][ yoqc ]

> icw > start > [ yoqc ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ oqc ]

> icw > start > [ oqc ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > split [ o ][ qc ]

> icw > start > [ qc ] 10 <nil>
> icw > 0 > q > [wc] 10 > [i] 0
> icw > split [ q ][ c ]

> icw > start > [ c ] 11 <nil>
> icw > 0 > c > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 6 > [i] 1
> icw > split [ ss ][ yoqc ]

> icw > start > [ yoqc ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ oqc ]

> icw > start > [ oqc ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > split [ o ][ qc ]

> icw > start > [ qc ] 9 <nil>
> icw > 0 > q > [wc] 9 > [i] 0
> icw > split [ q ][ c ]

> icw > start > [ c ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> omwufbdfxu <<<<

> icw > start > [ omwufbdfxu ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ mwufbdfxu ]

> icw > start > [ mwufbdfxu ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ wufbdfxu ]

> icw > start > [ wufbdfxu ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ ufbdfxu ]

> icw > start > [ ufbdfxu ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ fbdfxu ]

> icw > start > [ fbdfxu ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ bdfxu ]

> icw > start > [ bdfxu ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ dfxu ]

> icw > start > [ dfxu ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ fxu ]

> icw > start > [ fxu ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ xu ]

> icw > start > [ xu ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ u ]

> icw > start > [ u ] 9 <nil>
> icw > 0 > u > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zhift <<<<

> icw > start > [ zhift ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kczvhsybloet <<<<

> icw > start > [ kczvhsybloet ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ czvhsybloet ]

> icw > start > [ czvhsybloet ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ zvhsybloet ]

> icw > start > [ zvhsybloet ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> crfhpxprbsshsjxd <<<<

> icw > start > [ crfhpxprbsshsjxd ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ rfhpxprbsshsjxd ]

> icw > start > [ rfhpxprbsshsjxd ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ fhpxprbsshsjxd ]

> icw > start > [ fhpxprbsshsjxd ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ hpxprbsshsjxd ]

> icw > start > [ hpxprbsshsjxd ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ pxprbsshsjxd ]

> icw > start > [ pxprbsshsjxd ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ xprbsshsjxd ]

> icw > start > [ xprbsshsjxd ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ prbsshsjxd ]

> icw > start > [ prbsshsjxd ] 6 <nil>
> icw > 0 > p > [wc] 6 > [i] 0
> icw > split [ p ][ rbsshsjxd ]

> icw > start > [ rbsshsjxd ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ bsshsjxd ]

> icw > start > [ bsshsjxd ] 8 <nil>
> icw > 0 > b > [wc] 8 > [i] 0
> icw > split [ b ][ sshsjxd ]

> icw > start > [ sshsjxd ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ shsjxd ]

> icw > start > [ shsjxd ] 10 <nil>
> icw > 0 > s > [wc] 10 > [i] 0
> icw > split [ s ][ hsjxd ]

> icw > start > [ hsjxd ] 11 <nil>
> icw > 0 > h > [wc] 11 > [i] 0
> icw > split [ h ][ sjxd ]

> icw > start > [ sjxd ] 12 <nil>
> icw > 0 > s > [wc] 12 > [i] 0
> icw > split [ s ][ jxd ]

> icw > start > [ jxd ] 13 <nil>
> icw > 0 > j > [wc] 13 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 13 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 13 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 12 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > split [ ss ][ hsjxd ]

> icw > start > [ hsjxd ] 10 <nil>
> icw > 0 > h > [wc] 10 > [i] 0
> icw > split [ h ][ sjxd ]

> icw > start > [ sjxd ] 11 <nil>
> icw > 0 > s > [wc] 11 > [i] 0
> icw > split [ s ][ jxd ]

> icw > start > [ jxd ] 12 <nil>
> icw > 0 > j > [wc] 12 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 12 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > h > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > split [ cr ][ fhpxprbsshsjxd ]

> icw > start > [ fhpxprbsshsjxd ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ hpxprbsshsjxd ]

> icw > start > [ hpxprbsshsjxd ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ pxprbsshsjxd ]

> icw > start > [ pxprbsshsjxd ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ xprbsshsjxd ]

> icw > start > [ xprbsshsjxd ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ prbsshsjxd ]

> icw > start > [ prbsshsjxd ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ rbsshsjxd ]

> icw > start > [ rbsshsjxd ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ bsshsjxd ]

> icw > start > [ bsshsjxd ] 7 <nil>
> icw > 0 > b > [wc] 7 > [i] 0
> icw > split [ b ][ sshsjxd ]

> icw > start > [ sshsjxd ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > split [ s ][ shsjxd ]

> icw > start > [ shsjxd ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ hsjxd ]

> icw > start > [ hsjxd ] 10 <nil>
> icw > 0 > h > [wc] 10 > [i] 0
> icw > split [ h ][ sjxd ]

> icw > start > [ sjxd ] 11 <nil>
> icw > 0 > s > [wc] 11 > [i] 0
> icw > split [ s ][ jxd ]

> icw > start > [ jxd ] 12 <nil>
> icw > 0 > j > [wc] 12 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 12 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > split [ ss ][ hsjxd ]

> icw > start > [ hsjxd ] 9 <nil>
> icw > 0 > h > [wc] 9 > [i] 0
> icw > split [ h ][ sjxd ]

> icw > start > [ sjxd ] 10 <nil>
> icw > 0 > s > [wc] 10 > [i] 0
> icw > split [ s ][ jxd ]

> icw > start > [ jxd ] 11 <nil>
> icw > 0 > j > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > h > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > s > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > j > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > x > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > d > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ilebxwbcto <<<<

> icw > start > [ ilebxwbcto ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > split [ il ][ ebxwbcto ]

> icw > start > [ ebxwbcto ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ bxwbcto ]

> icw > start > [ bxwbcto ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ xwbcto ]

> icw > start > [ xwbcto ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ wbcto ]

> icw > start > [ wbcto ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ bcto ]

> icw > start > [ bcto ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ cto ]

> icw > start > [ cto ] 6 <nil>
> icw > 0 > c > [wc] 6 > [i] 0
> icw > split [ c ][ to ]

> icw > start > [ to ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ o ]

> icw > start > [ o ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 7 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> yaxzfbjbkrxi <<<<

> icw > start > [ yaxzfbjbkrxi ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ axzfbjbkrxi ]

> icw > start > [ axzfbjbkrxi ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ xzfbjbkrxi ]

> icw > start > [ xzfbjbkrxi ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ zfbjbkrxi ]

> icw > start > [ zfbjbkrxi ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > split [ xz ][ fbjbkrxi ]

> icw > start > [ fbjbkrxi ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ bjbkrxi ]

> icw > start > [ bjbkrxi ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ jbkrxi ]

> icw > start > [ jbkrxi ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > split [ ax ][ zfbjbkrxi ]

> icw > start > [ zfbjbkrxi ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> imqpzwmshlpj <<<<

> icw > start > [ imqpzwmshlpj ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ta <<<<

> icw > start > [ ta ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ a ]

> icw > start > [ a ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hbuxhwadlpto <<<<

> icw > start > [ hbuxhwadlpto ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ buxhwadlpto ]

> icw > start > [ buxhwadlpto ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ uxhwadlpto ]

> icw > start > [ uxhwadlpto ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ xhwadlpto ]

> icw > start > [ xhwadlpto ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ hwadlpto ]

> icw > start > [ hwadlpto ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ wadlpto ]

> icw > start > [ wadlpto ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ adlpto ]

> icw > start > [ adlpto ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ dlpto ]

> icw > start > [ dlpto ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ lpto ]

> icw > start > [ lpto ] 8 <nil>
> icw > 0 > l > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> eziwkmg <<<<

> icw > start > [ eziwkmg ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ ziwkmg ]

> icw > start > [ ziwkmg ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ovqzgdixrpddzp <<<<

> icw > start > [ ovqzgdixrpddzp ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ vqzgdixrpddzp ]

> icw > start > [ vqzgdixrpddzp ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ qzgdixrpddzp ]

> icw > start > [ qzgdixrpddzp ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ zgdixrpddzp ]

> icw > start > [ zgdixrpddzp ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > d > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > z > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > p > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> c <<<<

> icw > start > [ c ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wnqwqecyjyib <<<<

> icw > start > [ wnqwqecyjyib ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ nqwqecyjyib ]

> icw > start > [ nqwqecyjyib ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ qwqecyjyib ]

> icw > start > [ qwqecyjyib ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ wqecyjyib ]

> icw > start > [ wqecyjyib ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ qecyjyib ]

> icw > start > [ qecyjyib ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ ecyjyib ]

> icw > start > [ ecyjyib ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ cyjyib ]

> icw > start > [ cyjyib ] 6 <nil>
> icw > 0 > c > [wc] 6 > [i] 0
> icw > split [ c ][ yjyib ]

> icw > start > [ yjyib ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ jyib ]

> icw > start > [ jyib ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > split [ jy ][ ib ]

> icw > start > [ ib ] 9 <nil>
> icw > 0 > i > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > split [ qe ][ cyjyib ]

> icw > start > [ cyjyib ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ yjyib ]

> icw > start > [ yjyib ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ jyib ]

> icw > start > [ jyib ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > split [ jy ][ ib ]

> icw > start > [ ib ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 6 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > c > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jy <<<<

> icw > start > [ jy ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mjfqwltvzk <<<<

> icw > start > [ mjfqwltvzk ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ jfqwltvzk ]

> icw > start > [ jfqwltvzk ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > split [ jf ][ qwltvzk ]

> icw > start > [ qwltvzk ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ wltvzk ]

> icw > start > [ wltvzk ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ ltvzk ]

> icw > start > [ ltvzk ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > split [ lt ][ vzk ]

> icw > start > [ vzk ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ zk ]

> icw > start > [ zk ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 6 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tpvo <<<<

> icw > start > [ tpvo ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ pvo ]

> icw > start > [ pvo ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ vo ]

> icw > start > [ vo ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ o ]

> icw > start > [ o ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > split [ tp ][ vo ]

> icw > start > [ vo ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ o ]

> icw > start > [ o ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> phckcyufdqml <<<<

> icw > start > [ phckcyufdqml ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ hckcyufdqml ]

> icw > start > [ hckcyufdqml ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ ckcyufdqml ]

> icw > start > [ ckcyufdqml ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ kcyufdqml ]

> icw > start > [ kcyufdqml ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ cyufdqml ]

> icw > start > [ cyufdqml ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ yufdqml ]

> icw > start > [ yufdqml ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ ufdqml ]

> icw > start > [ ufdqml ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ fdqml ]

> icw > start > [ fdqml ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ dqml ]

> icw > start > [ dqml ] 8 <nil>
> icw > 0 > d > [wc] 8 > [i] 0
> icw > split [ d ][ qml ]

> icw > start > [ qml ] 9 <nil>
> icw > 0 > q > [wc] 9 > [i] 0
> icw > split [ q ][ ml ]

> icw > start > [ ml ] 10 <nil>
> icw > 0 > m > [wc] 10 > [i] 0
> icw > split [ m ][ l ]

> icw > start > [ l ] 11 <nil>
> icw > 0 > l > [wc] 11 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 10 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 9 > [i] 1
> icw > split [ qm ][ l ]

> icw > start > [ l ] 10 <nil>
> icw > 0 > l > [wc] 10 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 7 > [i] 1
> icw > split [ fd ][ qml ]

> icw > start > [ qml ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > split [ q ][ ml ]

> icw > start > [ ml ] 9 <nil>
> icw > 0 > m > [wc] 9 > [i] 0
> icw > split [ m ][ l ]

> icw > start > [ l ] 10 <nil>
> icw > 0 > l > [wc] 10 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 8 > [i] 1
> icw > split [ qm ][ l ]

> icw > start > [ l ] 9 <nil>
> icw > 0 > l > [wc] 9 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > split [ yu ][ fdqml ]

> icw > start > [ fdqml ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ dqml ]

> icw > start > [ dqml ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ qml ]

> icw > start > [ qml ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > split [ q ][ ml ]

> icw > start > [ ml ] 9 <nil>
> icw > 0 > m > [wc] 9 > [i] 0
> icw > split [ m ][ l ]

> icw > start > [ l ] 10 <nil>
> icw > 0 > l > [wc] 10 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 8 > [i] 1
> icw > split [ qm ][ l ]

> icw > start > [ l ] 9 <nil>
> icw > 0 > l > [wc] 9 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > split [ fd ][ qml ]

> icw > start > [ qml ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > split [ q ][ ml ]

> icw > start > [ ml ] 8 <nil>
> icw > 0 > m > [wc] 8 > [i] 0
> icw > split [ m ][ l ]

> icw > start > [ l ] 9 <nil>
> icw > 0 > l > [wc] 9 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 8 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 7 > [i] 1
> icw > split [ qm ][ l ]

> icw > start > [ l ] 8 <nil>
> icw > 0 > l > [wc] 8 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lim <<<<

> icw > start > [ lim ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lfz <<<<

> icw > start > [ lfz ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tgygdt <<<<

> icw > start > [ tgygdt ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ gygdt ]

> icw > start > [ gygdt ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ ygdt ]

> icw > start > [ ygdt ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ gdt ]

> icw > start > [ gdt ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ dt ]

> icw > start > [ dt ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ t ]

> icw > start > [ t ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ tg ][ ygdt ]

> icw > start > [ ygdt ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ gdt ]

> icw > start > [ gdt ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ dt ]

> icw > start > [ dt ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ t ]

> icw > start > [ t ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> nhcvpf <<<<

> icw > start > [ nhcvpf ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ hcvpf ]

> icw > start > [ hcvpf ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ cvpf ]

> icw > start > [ cvpf ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ vpf ]

> icw > start > [ vpf ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ pf ]

> icw > start > [ pf ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ f ]

> icw > start > [ f ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fbrpzlk <<<<

> icw > start > [ fbrpzlk ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ brpzlk ]

> icw > start > [ brpzlk ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ rpzlk ]

> icw > start > [ rpzlk ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ pzlk ]

> icw > start > [ pzlk ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ zlk ]

> icw > start > [ zlk ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > split [ br ][ pzlk ]

> icw > start > [ pzlk ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ zlk ]

> icw > start > [ zlk ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> shwywshtdgmb <<<<

> icw > start > [ shwywshtdgmb ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ hwywshtdgmb ]

> icw > start > [ hwywshtdgmb ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ wywshtdgmb ]

> icw > start > [ wywshtdgmb ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ ywshtdgmb ]

> icw > start > [ ywshtdgmb ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ wshtdgmb ]

> icw > start > [ wshtdgmb ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ shtdgmb ]

> icw > start > [ shtdgmb ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ htdgmb ]

> icw > start > [ htdgmb ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ tdgmb ]

> icw > start > [ tdgmb ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ dgmb ]

> icw > start > [ dgmb ] 8 <nil>
> icw > 0 > d > [wc] 8 > [i] 0
> icw > split [ d ][ gmb ]

> icw > start > [ gmb ] 9 <nil>
> icw > 0 > g > [wc] 9 > [i] 0
> icw > split [ g ][ mb ]

> icw > start > [ mb ] 10 <nil>
> icw > 0 > m > [wc] 10 > [i] 0
> icw > split [ m ][ b ]

> icw > start > [ b ] 11 <nil>
> icw > 0 > b > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > split [ yw ][ shtdgmb ]

> icw > start > [ shtdgmb ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ htdgmb ]

> icw > start > [ htdgmb ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ tdgmb ]

> icw > start > [ tdgmb ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ dgmb ]

> icw > start > [ dgmb ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ gmb ]

> icw > start > [ gmb ] 8 <nil>
> icw > 0 > g > [wc] 8 > [i] 0
> icw > split [ g ][ mb ]

> icw > start > [ mb ] 9 <nil>
> icw > 0 > m > [wc] 9 > [i] 0
> icw > split [ m ][ b ]

> icw > start > [ b ] 10 <nil>
> icw > 0 > b > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> bkkxcvg <<<<

> icw > start > [ bkkxcvg ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ kkxcvg ]

> icw > start > [ kkxcvg ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ kxcvg ]

> icw > start > [ kxcvg ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ xcvg ]

> icw > start > [ xcvg ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ cvg ]

> icw > start > [ cvg ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ vg ]

> icw > start > [ vg ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ g ]

> icw > start > [ g ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > split [ kk ][ xcvg ]

> icw > start > [ xcvg ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ cvg ]

> icw > start > [ cvg ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ vg ]

> icw > start > [ vg ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ g ]

> icw > start > [ g ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> monmwvytby <<<<

> icw > start > [ monmwvytby ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ onmwvytby ]

> icw > start > [ onmwvytby ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ nmwvytby ]

> icw > start > [ nmwvytby ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ mwvytby ]

> icw > start > [ mwvytby ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ wvytby ]

> icw > start > [ wvytby ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ vytby ]

> icw > start > [ vytby ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ ytby ]

> icw > start > [ ytby ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ tby ]

> icw > start > [ tby ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ by ]

> icw > start > [ by ] 8 <nil>
> icw > 0 > b > [wc] 8 > [i] 0
> icw > split [ b ][ y ]

> icw > start > [ y ] 9 <nil>
> icw > 0 > y > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> nuqhmfj <<<<

> icw > start > [ nuqhmfj ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ uqhmfj ]

> icw > start > [ uqhmfj ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ qhmfj ]

> icw > start > [ qhmfj ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ hmfj ]

> icw > start > [ hmfj ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ mfj ]

> icw > start > [ mfj ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ fj ]

> icw > start > [ fj ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ j ]

> icw > start > [ j ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > split [ mf ][ j ]

> icw > start > [ j ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qtg <<<<

> icw > start > [ qtg ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ tg ]

> icw > start > [ tg ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ g ]

> icw > start > [ g ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> cwkuzyamnerp <<<<

> icw > start > [ cwkuzyamnerp ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ wkuzyamnerp ]

> icw > start > [ wkuzyamnerp ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ kuzyamnerp ]

> icw > start > [ kuzyamnerp ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ uzyamnerp ]

> icw > start > [ uzyamnerp ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ zyamnerp ]

> icw > start > [ zyamnerp ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > split [ uz ][ yamnerp ]

> icw > start > [ yamnerp ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ amnerp ]

> icw > start > [ amnerp ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ mnerp ]

> icw > start > [ mnerp ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ nerp ]

> icw > start > [ nerp ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > split [ n ][ erp ]

> icw > start > [ erp ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ rp ]

> icw > start > [ rp ] 9 <nil>
> icw > 0 > r > [wc] 9 > [i] 0
> icw > split [ r ][ p ]

> icw > start > [ p ] 10 <nil>
> icw > 0 > p > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 8 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > split [ ku ][ zyamnerp ]

> icw > start > [ zyamnerp ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > split [ cw ][ kuzyamnerp ]

> icw > start > [ kuzyamnerp ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ uzyamnerp ]

> icw > start > [ uzyamnerp ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ zyamnerp ]

> icw > start > [ zyamnerp ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > split [ uz ][ yamnerp ]

> icw > start > [ yamnerp ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ amnerp ]

> icw > start > [ amnerp ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ mnerp ]

> icw > start > [ mnerp ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ nerp ]

> icw > start > [ nerp ] 6 <nil>
> icw > 0 > n > [wc] 6 > [i] 0
> icw > split [ n ][ erp ]

> icw > start > [ erp ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ rp ]

> icw > start > [ rp ] 8 <nil>
> icw > 0 > r > [wc] 8 > [i] 0
> icw > split [ r ][ p ]

> icw > start > [ p ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 7 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > split [ ku ][ zyamnerp ]

> icw > start > [ zyamnerp ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fmwevhwlezo <<<<

> icw > start > [ fmwevhwlezo ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ mwevhwlezo ]

> icw > start > [ mwevhwlezo ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ wevhwlezo ]

> icw > start > [ wevhwlezo ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ evhwlezo ]

> icw > start > [ evhwlezo ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ vhwlezo ]

> icw > start > [ vhwlezo ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ hwlezo ]

> icw > start > [ hwlezo ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ wlezo ]

> icw > start > [ wlezo ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > split [ w ][ lezo ]

> icw > start > [ lezo ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ye <<<<

> icw > start > [ ye ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ e ]

> icw > start > [ e ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hbrcewjxvcezi <<<<

> icw > start > [ hbrcewjxvcezi ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ brcewjxvcezi ]

> icw > start > [ brcewjxvcezi ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ rcewjxvcezi ]

> icw > start > [ rcewjxvcezi ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ cewjxvcezi ]

> icw > start > [ cewjxvcezi ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ ewjxvcezi ]

> icw > start > [ ewjxvcezi ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ wjxvcezi ]

> icw > start > [ wjxvcezi ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ jxvcezi ]

> icw > start > [ jxvcezi ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > split [ br ][ cewjxvcezi ]

> icw > start > [ cewjxvcezi ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ ewjxvcezi ]

> icw > start > [ ewjxvcezi ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ wjxvcezi ]

> icw > start > [ wjxvcezi ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ jxvcezi ]

> icw > start > [ jxvcezi ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tiq <<<<

> icw > start > [ tiq ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ iq ]

> icw > start > [ iq ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tfsrptug <<<<

> icw > start > [ tfsrptug ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ fsrptug ]

> icw > start > [ fsrptug ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ srptug ]

> icw > start > [ srptug ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ rptug ]

> icw > start > [ rptug ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ ptug ]

> icw > start > [ ptug ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ tug ]

> icw > start > [ tug ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ ug ]

> icw > start > [ ug ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ g ]

> icw > start > [ g ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> iznorvonzjfea <<<<

> icw > start > [ iznorvonzjfea ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > a > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gama <<<<

> icw > start > [ gama ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ ama ]

> icw > start > [ ama ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ ma ]

> icw > start > [ ma ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ a ]

> icw > start > [ a ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> apwlmbzit <<<<

> icw > start > [ apwlmbzit ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ pwlmbzit ]

> icw > start > [ pwlmbzit ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ wlmbzit ]

> icw > start > [ wlmbzit ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ lmbzit ]

> icw > start > [ lmbzit ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> s <<<<

> icw > start > [ s ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hzkosvn <<<<

> icw > start > [ hzkosvn ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ zkosvn ]

> icw > start > [ zkosvn ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nberblt <<<<

> icw > start > [ nberblt ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ berblt ]

> icw > start > [ berblt ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ erblt ]

> icw > start > [ erblt ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ rblt ]

> icw > start > [ rblt ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ blt ]

> icw > start > [ blt ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ lt ]

> icw > start > [ lt ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 1 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 1 > [i] 4
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> kggdgpljfisylt <<<<

> icw > start > [ kggdgpljfisylt ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ ggdgpljfisylt ]

> icw > start > [ ggdgpljfisylt ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ gdgpljfisylt ]

> icw > start > [ gdgpljfisylt ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ dgpljfisylt ]

> icw > start > [ dgpljfisylt ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ gpljfisylt ]

> icw > start > [ gpljfisylt ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ pljfisylt ]

> icw > start > [ pljfisylt ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ ljfisylt ]

> icw > start > [ ljfisylt ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > t > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mf <<<<

> icw > start > [ mf ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ f ]

> icw > start > [ f ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> h <<<<

> icw > start > [ h ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bljvkypcflsaqe <<<<

> icw > start > [ bljvkypcflsaqe ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ ljvkypcflsaqe ]

> icw > start > [ ljvkypcflsaqe ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > a > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cijcyrgmqirz <<<<

> icw > start > [ cijcyrgmqirz ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ ijcyrgmqirz ]

> icw > start > [ ijcyrgmqirz ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iaxakholawoydvch <<<<

> icw > start > [ iaxakholawoydvch ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > d > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > v > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > c > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > h > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> e <<<<

> icw > start > [ e ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gttxwpuk <<<<

> icw > start > [ gttxwpuk ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ ttxwpuk ]

> icw > start > [ ttxwpuk ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ txwpuk ]

> icw > start > [ txwpuk ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ xwpuk ]

> icw > start > [ xwpuk ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ wpuk ]

> icw > start > [ wpuk ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ puk ]

> icw > start > [ puk ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ uk ]

> icw > start > [ uk ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ k ]

> icw > start > [ k ] 7 <nil>
> icw > 0 > k > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> jf <<<<

> icw > start > [ jf ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xbrtspfttota <<<<

> icw > start > [ xbrtspfttota ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ brtspfttota ]

> icw > start > [ brtspfttota ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ rtspfttota ]

> icw > start > [ rtspfttota ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ tspfttota ]

> icw > start > [ tspfttota ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ spfttota ]

> icw > start > [ spfttota ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ pfttota ]

> icw > start > [ pfttota ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ fttota ]

> icw > start > [ fttota ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ ttota ]

> icw > start > [ ttota ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ tota ]

> icw > start > [ tota ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ ota ]

> icw > start > [ ota ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > split [ o ][ ta ]

> icw > start > [ ta ] 10 <nil>
> icw > 0 > t > [wc] 10 > [i] 0
> icw > split [ t ][ a ]

> icw > start > [ a ] 11 <nil>
> icw > 0 > a > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > split [ br ][ tspfttota ]

> icw > start > [ tspfttota ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ spfttota ]

> icw > start > [ spfttota ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ pfttota ]

> icw > start > [ pfttota ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ fttota ]

> icw > start > [ fttota ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ ttota ]

> icw > start > [ ttota ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ tota ]

> icw > start > [ tota ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ ota ]

> icw > start > [ ota ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > split [ o ][ ta ]

> icw > start > [ ta ] 9 <nil>
> icw > 0 > t > [wc] 9 > [i] 0
> icw > split [ t ][ a ]

> icw > start > [ a ] 10 <nil>
> icw > 0 > a > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > a > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> sngqvoijxuv <<<<

> icw > start > [ sngqvoijxuv ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ ngqvoijxuv ]

> icw > start > [ ngqvoijxuv ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ gqvoijxuv ]

> icw > start > [ gqvoijxuv ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ qvoijxuv ]

> icw > start > [ qvoijxuv ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ voijxuv ]

> icw > start > [ voijxuv ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ oijxuv ]

> icw > start > [ oijxuv ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ ijxuv ]

> icw > start > [ ijxuv ] 6 <nil>
> icw > 0 > i > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > split [ ng ][ qvoijxuv ]

> icw > start > [ qvoijxuv ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ voijxuv ]

> icw > start > [ voijxuv ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ oijxuv ]

> icw > start > [ oijxuv ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ ijxuv ]

> icw > start > [ ijxuv ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bztvaal <<<<

> icw > start > [ bztvaal ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ ztvaal ]

> icw > start > [ ztvaal ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zxbshnrvbykjql <<<<

> icw > start > [ zxbshnrvbykjql ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > k > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zz <<<<

> icw > start > [ zz ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mlvyoshiktodnsjj <<<<

> icw > start > [ mlvyoshiktodnsjj ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ lvyoshiktodnsjj ]

> icw > start > [ lvyoshiktodnsjj ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > d > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > j > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qplci <<<<

> icw > start > [ qplci ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ plci ]

> icw > start > [ plci ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ lci ]

> icw > start > [ lci ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lzqrxl <<<<

> icw > start > [ lzqrxl ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qxru <<<<

> icw > start > [ qxru ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ xru ]

> icw > start > [ xru ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ ru ]

> icw > start > [ ru ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ u ]

> icw > start > [ u ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ygjtyzleizme <<<<

> icw > start > [ ygjtyzleizme ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ gjtyzleizme ]

> icw > start > [ gjtyzleizme ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ jtyzleizme ]

> icw > start > [ jtyzleizme ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> inx <<<<

> icw > start > [ inx ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lwhhjwsl <<<<

> icw > start > [ lwhhjwsl ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> endjvxjyghrveu <<<<

> icw > start > [ endjvxjyghrveu ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ ndjvxjyghrveu ]

> icw > start > [ ndjvxjyghrveu ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ djvxjyghrveu ]

> icw > start > [ djvxjyghrveu ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ jvxjyghrveu ]

> icw > start > [ jvxjyghrveu ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > v > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > u > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> phknqtsdtwxcktmw <<<<

> icw > start > [ phknqtsdtwxcktmw ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ hknqtsdtwxcktmw ]

> icw > start > [ hknqtsdtwxcktmw ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ knqtsdtwxcktmw ]

> icw > start > [ knqtsdtwxcktmw ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ nqtsdtwxcktmw ]

> icw > start > [ nqtsdtwxcktmw ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ qtsdtwxcktmw ]

> icw > start > [ qtsdtwxcktmw ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ tsdtwxcktmw ]

> icw > start > [ tsdtwxcktmw ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ sdtwxcktmw ]

> icw > start > [ sdtwxcktmw ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > split [ s ][ dtwxcktmw ]

> icw > start > [ dtwxcktmw ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ twxcktmw ]

> icw > start > [ twxcktmw ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ wxcktmw ]

> icw > start > [ wxcktmw ] 9 <nil>
> icw > 0 > w > [wc] 9 > [i] 0
> icw > split [ w ][ xcktmw ]

> icw > start > [ xcktmw ] 10 <nil>
> icw > 0 > x > [wc] 10 > [i] 0
> icw > split [ x ][ cktmw ]

> icw > start > [ cktmw ] 11 <nil>
> icw > 0 > c > [wc] 11 > [i] 0
> icw > split [ c ][ ktmw ]

> icw > start > [ ktmw ] 12 <nil>
> icw > 0 > k > [wc] 12 > [i] 0
> icw > split [ k ][ tmw ]

> icw > start > [ tmw ] 13 <nil>
> icw > 0 > t > [wc] 13 > [i] 0
> icw > split [ t ][ mw ]

> icw > start > [ mw ] 14 <nil>
> icw > 0 > m > [wc] 14 > [i] 0
> icw > split [ m ][ w ]

> icw > start > [ w ] 15 <nil>
> icw > 0 > w > [wc] 15 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 14 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 13 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 13 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 12 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > k > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > t > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > m > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > w > [wc] 0 > [i] 15
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wsdthzmlmbhjkm <<<<

> icw > start > [ wsdthzmlmbhjkm ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ sdthzmlmbhjkm ]

> icw > start > [ sdthzmlmbhjkm ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ dthzmlmbhjkm ]

> icw > start > [ dthzmlmbhjkm ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ thzmlmbhjkm ]

> icw > start > [ thzmlmbhjkm ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ hzmlmbhjkm ]

> icw > start > [ hzmlmbhjkm ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ zmlmbhjkm ]

> icw > start > [ zmlmbhjkm ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > k > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> u <<<<

> icw > start > [ u ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pbqurqfxgqlojmws <<<<

> icw > start > [ pbqurqfxgqlojmws ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ bqurqfxgqlojmws ]

> icw > start > [ bqurqfxgqlojmws ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ qurqfxgqlojmws ]

> icw > start > [ qurqfxgqlojmws ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ urqfxgqlojmws ]

> icw > start > [ urqfxgqlojmws ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ rqfxgqlojmws ]

> icw > start > [ rqfxgqlojmws ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ qfxgqlojmws ]

> icw > start > [ qfxgqlojmws ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ fxgqlojmws ]

> icw > start > [ fxgqlojmws ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ xgqlojmws ]

> icw > start > [ xgqlojmws ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ gqlojmws ]

> icw > start > [ gqlojmws ] 8 <nil>
> icw > 0 > g > [wc] 8 > [i] 0
> icw > split [ g ][ qlojmws ]

> icw > start > [ qlojmws ] 9 <nil>
> icw > 0 > q > [wc] 9 > [i] 0
> icw > split [ q ][ lojmws ]

> icw > start > [ lojmws ] 10 <nil>
> icw > 0 > l > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > w > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > s > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mowsjvpvhznbsi <<<<

> icw > start > [ mowsjvpvhznbsi ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ owsjvpvhznbsi ]

> icw > start > [ owsjvpvhznbsi ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ wsjvpvhznbsi ]

> icw > start > [ wsjvpvhznbsi ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ sjvpvhznbsi ]

> icw > start > [ sjvpvhznbsi ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ jvpvhznbsi ]

> icw > start > [ jvpvhznbsi ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > s > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > i > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hdkbdxqg <<<<

> icw > start > [ hdkbdxqg ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ dkbdxqg ]

> icw > start > [ dkbdxqg ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ kbdxqg ]

> icw > start > [ kbdxqg ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ bdxqg ]

> icw > start > [ bdxqg ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ dxqg ]

> icw > start > [ dxqg ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ xqg ]

> icw > start > [ xqg ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ qg ]

> icw > start > [ qg ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ g ]

> icw > start > [ g ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ge <<<<

> icw > start > [ ge ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ e ]

> icw > start > [ e ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> pzchrgef <<<<

> icw > start > [ pzchrgef ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ zchrgef ]

> icw > start > [ zchrgef ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ukmcowoe <<<<

> icw > start > [ ukmcowoe ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ kmcowoe ]

> icw > start > [ kmcowoe ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ mcowoe ]

> icw > start > [ mcowoe ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ cowoe ]

> icw > start > [ cowoe ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ owoe ]

> icw > start > [ owoe ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ woe ]

> icw > start > [ woe ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ oe ]

> icw > start > [ oe ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ e ]

> icw > start > [ e ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> nwhpiid <<<<

> icw > start > [ nwhpiid ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ whpiid ]

> icw > start > [ whpiid ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ hpiid ]

> icw > start > [ hpiid ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ piid ]

> icw > start > [ piid ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ iid ]

> icw > start > [ iid ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xdnnl <<<<

> icw > start > [ xdnnl ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ dnnl ]

> icw > start > [ dnnl ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ nnl ]

> icw > start > [ nnl ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ nl ]

> icw > start > [ nl ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ l ]

> icw > start > [ l ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> n <<<<

> icw > start > [ n ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yjyssbsoc <<<<

> icw > start > [ yjyssbsoc ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ jyssbsoc ]

> icw > start > [ jyssbsoc ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > split [ jy ][ ssbsoc ]

> icw > start > [ ssbsoc ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ sbsoc ]

> icw > start > [ sbsoc ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ bsoc ]

> icw > start > [ bsoc ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ soc ]

> icw > start > [ soc ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ oc ]

> icw > start > [ oc ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ c ]

> icw > start > [ c ] 7 <nil>
> icw > 0 > c > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > split [ ss ][ bsoc ]

> icw > start > [ bsoc ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ soc ]

> icw > start > [ soc ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ oc ]

> icw > start > [ oc ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ c ]

> icw > start > [ c ] 6 <nil>
> icw > 0 > c > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> cdzcuunkrf <<<<

> icw > start > [ cdzcuunkrf ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ dzcuunkrf ]

> icw > start > [ dzcuunkrf ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ zcuunkrf ]

> icw > start > [ zcuunkrf ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> uvouaghhcyvmlk <<<<

> icw > start > [ uvouaghhcyvmlk ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ vouaghhcyvmlk ]

> icw > start > [ vouaghhcyvmlk ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ ouaghhcyvmlk ]

> icw > start > [ ouaghhcyvmlk ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ uaghhcyvmlk ]

> icw > start > [ uaghhcyvmlk ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ aghhcyvmlk ]

> icw > start > [ aghhcyvmlk ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ ghhcyvmlk ]

> icw > start > [ ghhcyvmlk ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ hhcyvmlk ]

> icw > start > [ hhcyvmlk ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ hcyvmlk ]

> icw > start > [ hcyvmlk ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ cyvmlk ]

> icw > start > [ cyvmlk ] 8 <nil>
> icw > 0 > c > [wc] 8 > [i] 0
> icw > split [ c ][ yvmlk ]

> icw > start > [ yvmlk ] 9 <nil>
> icw > 0 > y > [wc] 9 > [i] 0
> icw > split [ y ][ vmlk ]

> icw > start > [ vmlk ] 10 <nil>
> icw > 0 > v > [wc] 10 > [i] 0
> icw > split [ v ][ mlk ]

> icw > start > [ mlk ] 11 <nil>
> icw > 0 > m > [wc] 11 > [i] 0
> icw > split [ m ][ lk ]

> icw > start > [ lk ] 12 <nil>
> icw > 0 > l > [wc] 12 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 12 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 8 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 8 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > split [ ua ][ ghhcyvmlk ]

> icw > start > [ ghhcyvmlk ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ hhcyvmlk ]

> icw > start > [ hhcyvmlk ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ hcyvmlk ]

> icw > start > [ hcyvmlk ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ cyvmlk ]

> icw > start > [ cyvmlk ] 7 <nil>
> icw > 0 > c > [wc] 7 > [i] 0
> icw > split [ c ][ yvmlk ]

> icw > start > [ yvmlk ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ vmlk ]

> icw > start > [ vmlk ] 9 <nil>
> icw > 0 > v > [wc] 9 > [i] 0
> icw > split [ v ][ mlk ]

> icw > start > [ mlk ] 10 <nil>
> icw > 0 > m > [wc] 10 > [i] 0
> icw > split [ m ][ lk ]

> icw > start > [ lk ] 11 <nil>
> icw > 0 > l > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 11 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > k > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> aajpfpyljt <<<<

> icw > start > [ aajpfpyljt ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ ajpfpyljt ]

> icw > start > [ ajpfpyljt ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ jpfpyljt ]

> icw > start > [ jpfpyljt ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > split [ jp ][ fpyljt ]

> icw > start > [ fpyljt ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ pyljt ]

> icw > start > [ pyljt ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ yljt ]

> icw > start > [ yljt ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ ljt ]

> icw > start > [ ljt ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > split [ aa ][ jpfpyljt ]

> icw > start > [ jpfpyljt ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > split [ jp ][ fpyljt ]

> icw > start > [ fpyljt ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ pyljt ]

> icw > start > [ pyljt ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ yljt ]

> icw > start > [ yljt ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ ljt ]

> icw > start > [ ljt ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jpyntsefxi <<<<

> icw > start > [ jpyntsefxi ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > split [ jp ][ yntsefxi ]

> icw > start > [ yntsefxi ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ ntsefxi ]

> icw > start > [ ntsefxi ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ tsefxi ]

> icw > start > [ tsefxi ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ sefxi ]

> icw > start > [ sefxi ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ efxi ]

> icw > start > [ efxi ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ fxi ]

> icw > start > [ fxi ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ xi ]

> icw > start > [ xi ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ i ]

> icw > start > [ i ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wjute <<<<

> icw > start > [ wjute ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ jute ]

> icw > start > [ jute ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> y <<<<

> icw > start > [ y ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pbcnmhf <<<<

> icw > start > [ pbcnmhf ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ bcnmhf ]

> icw > start > [ bcnmhf ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ cnmhf ]

> icw > start > [ cnmhf ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ nmhf ]

> icw > start > [ nmhf ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ mhf ]

> icw > start > [ mhf ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ hf ]

> icw > start > [ hf ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ f ]

> icw > start > [ f ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> qmmidmvkn <<<<

> icw > start > [ qmmidmvkn ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ mmidmvkn ]

> icw > start > [ mmidmvkn ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ midmvkn ]

> icw > start > [ midmvkn ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ idmvkn ]

> icw > start > [ idmvkn ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > split [ id ][ mvkn ]

> icw > start > [ mvkn ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ vkn ]

> icw > start > [ vkn ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ kn ]

> icw > start > [ kn ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ n ]

> icw > start > [ n ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > split [ qm ][ midmvkn ]

> icw > start > [ midmvkn ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ idmvkn ]

> icw > start > [ idmvkn ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > split [ id ][ mvkn ]

> icw > start > [ mvkn ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ vkn ]

> icw > start > [ vkn ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ kn ]

> icw > start > [ kn ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ n ]

> icw > start > [ n ] 6 <nil>
> icw > 0 > n > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> xmywegmtuno <<<<

> icw > start > [ xmywegmtuno ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ mywegmtuno ]

> icw > start > [ mywegmtuno ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ ywegmtuno ]

> icw > start > [ ywegmtuno ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ wegmtuno ]

> icw > start > [ wegmtuno ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ egmtuno ]

> icw > start > [ egmtuno ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ gmtuno ]

> icw > start > [ gmtuno ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ mtuno ]

> icw > start > [ mtuno ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ tuno ]

> icw > start > [ tuno ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ uno ]

> icw > start > [ uno ] 8 <nil>
> icw > 0 > u > [wc] 8 > [i] 0
> icw > split [ u ][ no ]

> icw > start > [ no ] 9 <nil>
> icw > 0 > n > [wc] 9 > [i] 0
> icw > split [ n ][ o ]

> icw > start > [ o ] 10 <nil>
> icw > 0 > o > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > split [ yw ][ egmtuno ]

> icw > start > [ egmtuno ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ gmtuno ]

> icw > start > [ gmtuno ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ mtuno ]

> icw > start > [ mtuno ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ tuno ]

> icw > start > [ tuno ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ uno ]

> icw > start > [ uno ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ no ]

> icw > start > [ no ] 8 <nil>
> icw > 0 > n > [wc] 8 > [i] 0
> icw > split [ n ][ o ]

> icw > start > [ o ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vuzygv <<<<

> icw > start > [ vuzygv ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ uzygv ]

> icw > start > [ uzygv ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ zygv ]

> icw > start > [ zygv ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > split [ uz ][ ygv ]

> icw > start > [ ygv ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ gv ]

> icw > start > [ gv ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ v ]

> icw > start > [ v ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> uxtrdsdfzfssmel <<<<

> icw > start > [ uxtrdsdfzfssmel ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ xtrdsdfzfssmel ]

> icw > start > [ xtrdsdfzfssmel ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ trdsdfzfssmel ]

> icw > start > [ trdsdfzfssmel ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ rdsdfzfssmel ]

> icw > start > [ rdsdfzfssmel ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ dsdfzfssmel ]

> icw > start > [ dsdfzfssmel ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ sdfzfssmel ]

> icw > start > [ sdfzfssmel ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ dfzfssmel ]

> icw > start > [ dfzfssmel ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ fzfssmel ]

> icw > start > [ fzfssmel ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ zfssmel ]

> icw > start > [ zfssmel ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > split [ fz ][ fssmel ]

> icw > start > [ fssmel ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ ssmel ]

> icw > start > [ ssmel ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ smel ]

> icw > start > [ smel ] 10 <nil>
> icw > 0 > s > [wc] 10 > [i] 0
> icw > split [ s ][ mel ]

> icw > start > [ mel ] 11 <nil>
> icw > 0 > m > [wc] 11 > [i] 0
> icw > split [ m ][ el ]

> icw > start > [ el ] 12 <nil>
> icw > 0 > e > [wc] 12 > [i] 0
> icw > split [ e ][ l ]

> icw > start > [ l ] 13 <nil>
> icw > 0 > l > [wc] 13 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > split [ ss ][ mel ]

> icw > start > [ mel ] 10 <nil>
> icw > 0 > m > [wc] 10 > [i] 0
> icw > split [ m ][ el ]

> icw > start > [ el ] 11 <nil>
> icw > 0 > e > [wc] 11 > [i] 0
> icw > split [ e ][ l ]

> icw > start > [ l ] 12 <nil>
> icw > 0 > l > [wc] 12 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > m > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > m > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > l > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> odjgdgzfmrazvnd <<<<

> icw > start > [ odjgdgzfmrazvnd ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ djgdgzfmrazvnd ]

> icw > start > [ djgdgzfmrazvnd ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ jgdgzfmrazvnd ]

> icw > start > [ jgdgzfmrazvnd ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > v > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > n > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > d > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> a <<<<

> icw > start > [ a ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rdkugsbdpawxi <<<<

> icw > start > [ rdkugsbdpawxi ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ dkugsbdpawxi ]

> icw > start > [ dkugsbdpawxi ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ kugsbdpawxi ]

> icw > start > [ kugsbdpawxi ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ ugsbdpawxi ]

> icw > start > [ ugsbdpawxi ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ gsbdpawxi ]

> icw > start > [ gsbdpawxi ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ sbdpawxi ]

> icw > start > [ sbdpawxi ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ bdpawxi ]

> icw > start > [ bdpawxi ] 6 <nil>
> icw > 0 > b > [wc] 6 > [i] 0
> icw > split [ b ][ dpawxi ]

> icw > start > [ dpawxi ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ pawxi ]

> icw > start > [ pawxi ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ awxi ]

> icw > start > [ awxi ] 9 <nil>
> icw > 0 > a > [wc] 9 > [i] 0
> icw > split [ a ][ wxi ]

> icw > start > [ wxi ] 10 <nil>
> icw > 0 > w > [wc] 10 > [i] 0
> icw > split [ w ][ xi ]

> icw > start > [ xi ] 11 <nil>
> icw > 0 > x > [wc] 11 > [i] 0
> icw > split [ x ][ i ]

> icw > start > [ i ] 12 <nil>
> icw > 0 > i > [wc] 12 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > split [ ku ][ gsbdpawxi ]

> icw > start > [ gsbdpawxi ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ sbdpawxi ]

> icw > start > [ sbdpawxi ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ bdpawxi ]

> icw > start > [ bdpawxi ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ dpawxi ]

> icw > start > [ dpawxi ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ pawxi ]

> icw > start > [ pawxi ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ awxi ]

> icw > start > [ awxi ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > split [ a ][ wxi ]

> icw > start > [ wxi ] 9 <nil>
> icw > 0 > w > [wc] 9 > [i] 0
> icw > split [ w ][ xi ]

> icw > start > [ xi ] 10 <nil>
> icw > 0 > x > [wc] 10 > [i] 0
> icw > split [ x ][ i ]

> icw > start > [ i ] 11 <nil>
> icw > 0 > i > [wc] 11 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ivd <<<<

> icw > start > [ ivd ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bbqeonycaegxfj <<<<

> icw > start > [ bbqeonycaegxfj ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ bqeonycaegxfj ]

> icw > start > [ bqeonycaegxfj ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ qeonycaegxfj ]

> icw > start > [ qeonycaegxfj ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ eonycaegxfj ]

> icw > start > [ eonycaegxfj ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ onycaegxfj ]

> icw > start > [ onycaegxfj ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ nycaegxfj ]

> icw > start > [ nycaegxfj ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ ycaegxfj ]

> icw > start > [ ycaegxfj ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ caegxfj ]

> icw > start > [ caegxfj ] 7 <nil>
> icw > 0 > c > [wc] 7 > [i] 0
> icw > split [ c ][ aegxfj ]

> icw > start > [ aegxfj ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > split [ a ][ egxfj ]

> icw > start > [ egxfj ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > split [ e ][ gxfj ]

> icw > start > [ gxfj ] 10 <nil>
> icw > 0 > g > [wc] 10 > [i] 0
> icw > split [ g ][ xfj ]

> icw > start > [ xfj ] 11 <nil>
> icw > 0 > x > [wc] 11 > [i] 0
> icw > split [ x ][ fj ]

> icw > start > [ fj ] 12 <nil>
> icw > 0 > f > [wc] 12 > [i] 0
> icw > split [ f ][ j ]

> icw > start > [ j ] 13 <nil>
> icw > 0 > j > [wc] 13 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 12 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > split [ eo ][ nycaegxfj ]

> icw > start > [ nycaegxfj ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ ycaegxfj ]

> icw > start > [ ycaegxfj ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ caegxfj ]

> icw > start > [ caegxfj ] 6 <nil>
> icw > 0 > c > [wc] 6 > [i] 0
> icw > split [ c ][ aegxfj ]

> icw > start > [ aegxfj ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ egxfj ]

> icw > start > [ egxfj ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ gxfj ]

> icw > start > [ gxfj ] 9 <nil>
> icw > 0 > g > [wc] 9 > [i] 0
> icw > split [ g ][ xfj ]

> icw > start > [ xfj ] 10 <nil>
> icw > 0 > x > [wc] 10 > [i] 0
> icw > split [ x ][ fj ]

> icw > start > [ fj ] 11 <nil>
> icw > 0 > f > [wc] 11 > [i] 0
> icw > split [ f ][ j ]

> icw > start > [ j ] 12 <nil>
> icw > 0 > j > [wc] 12 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 11 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > split [ qe ][ onycaegxfj ]

> icw > start > [ onycaegxfj ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ nycaegxfj ]

> icw > start > [ nycaegxfj ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ ycaegxfj ]

> icw > start > [ ycaegxfj ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ caegxfj ]

> icw > start > [ caegxfj ] 6 <nil>
> icw > 0 > c > [wc] 6 > [i] 0
> icw > split [ c ][ aegxfj ]

> icw > start > [ aegxfj ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ egxfj ]

> icw > start > [ egxfj ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ gxfj ]

> icw > start > [ gxfj ] 9 <nil>
> icw > 0 > g > [wc] 9 > [i] 0
> icw > split [ g ][ xfj ]

> icw > start > [ xfj ] 10 <nil>
> icw > 0 > x > [wc] 10 > [i] 0
> icw > split [ x ][ fj ]

> icw > start > [ fj ] 11 <nil>
> icw > 0 > f > [wc] 11 > [i] 0
> icw > split [ f ][ j ]

> icw > start > [ j ] 12 <nil>
> icw > 0 > j > [wc] 12 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 11 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > j > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lrfkraoheucsvpi <<<<

> icw > start > [ lrfkraoheucsvpi ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > v > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > p > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > i > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> eqrswgkaaaohxx <<<<

> icw > start > [ eqrswgkaaaohxx ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ qrswgkaaaohxx ]

> icw > start > [ qrswgkaaaohxx ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ rswgkaaaohxx ]

> icw > start > [ rswgkaaaohxx ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ swgkaaaohxx ]

> icw > start > [ swgkaaaohxx ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ wgkaaaohxx ]

> icw > start > [ wgkaaaohxx ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ gkaaaohxx ]

> icw > start > [ gkaaaohxx ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ kaaaohxx ]

> icw > start > [ kaaaohxx ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ aaaohxx ]

> icw > start > [ aaaohxx ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ aaohxx ]

> icw > start > [ aaohxx ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > split [ a ][ aohxx ]

> icw > start > [ aohxx ] 9 <nil>
> icw > 0 > a > [wc] 9 > [i] 0
> icw > split [ a ][ ohxx ]

> icw > start > [ ohxx ] 10 <nil>
> icw > 0 > o > [wc] 10 > [i] 0
> icw > split [ o ][ hxx ]

> icw > start > [ hxx ] 11 <nil>
> icw > 0 > h > [wc] 11 > [i] 0
> icw > split [ h ][ xx ]

> icw > start > [ xx ] 12 <nil>
> icw > 0 > x > [wc] 12 > [i] 0
> icw > split [ x ][ x ]

> icw > start > [ x ] 13 <nil>
> icw > 0 > x > [wc] 13 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 8 > [i] 1
> icw > split [ aa ][ ohxx ]

> icw > start > [ ohxx ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > split [ o ][ hxx ]

> icw > start > [ hxx ] 10 <nil>
> icw > 0 > h > [wc] 10 > [i] 0
> icw > split [ h ][ xx ]

> icw > start > [ xx ] 11 <nil>
> icw > 0 > x > [wc] 11 > [i] 0
> icw > split [ x ][ x ]

> icw > start > [ x ] 12 <nil>
> icw > 0 > x > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > o > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > split [ aa ][ aohxx ]

> icw > start > [ aohxx ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > split [ a ][ ohxx ]

> icw > start > [ ohxx ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > split [ o ][ hxx ]

> icw > start > [ hxx ] 10 <nil>
> icw > 0 > h > [wc] 10 > [i] 0
> icw > split [ h ][ xx ]

> icw > start > [ xx ] 11 <nil>
> icw > 0 > x > [wc] 11 > [i] 0
> icw > split [ x ][ x ]

> icw > start > [ x ] 12 <nil>
> icw > 0 > x > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > a > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > x > [wc] 0 > [i] 13
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hqjtkqaqh <<<<

> icw > start > [ hqjtkqaqh ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ qjtkqaqh ]

> icw > start > [ qjtkqaqh ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ jtkqaqh ]

> icw > start > [ jtkqaqh ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> berbpmglbjipnuj <<<<

> icw > start > [ berbpmglbjipnuj ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ erbpmglbjipnuj ]

> icw > start > [ erbpmglbjipnuj ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ rbpmglbjipnuj ]

> icw > start > [ rbpmglbjipnuj ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ bpmglbjipnuj ]

> icw > start > [ bpmglbjipnuj ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ pmglbjipnuj ]

> icw > start > [ pmglbjipnuj ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ mglbjipnuj ]

> icw > start > [ mglbjipnuj ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ glbjipnuj ]

> icw > start > [ glbjipnuj ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > split [ g ][ lbjipnuj ]

> icw > start > [ lbjipnuj ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > u > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wogwczlkyrde <<<<

> icw > start > [ wogwczlkyrde ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ ogwczlkyrde ]

> icw > start > [ ogwczlkyrde ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ gwczlkyrde ]

> icw > start > [ gwczlkyrde ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ wczlkyrde ]

> icw > start > [ wczlkyrde ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ czlkyrde ]

> icw > start > [ czlkyrde ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ zlkyrde ]

> icw > start > [ zlkyrde ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> aqufowbig <<<<

> icw > start > [ aqufowbig ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ qufowbig ]

> icw > start > [ qufowbig ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ ufowbig ]

> icw > start > [ ufowbig ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ fowbig ]

> icw > start > [ fowbig ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ owbig ]

> icw > start > [ owbig ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ wbig ]

> icw > start > [ wbig ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ big ]

> icw > start > [ big ] 6 <nil>
> icw > 0 > b > [wc] 6 > [i] 0
> icw > split [ b ][ ig ]

> icw > start > [ ig ] 7 <nil>
> icw > 0 > i > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> snjniegvdvotu <<<<

> icw > start > [ snjniegvdvotu ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ njniegvdvotu ]

> icw > start > [ njniegvdvotu ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ jniegvdvotu ]

> icw > start > [ jniegvdvotu ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > u > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ocedkt <<<<

> icw > start > [ ocedkt ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ cedkt ]

> icw > start > [ cedkt ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ edkt ]

> icw > start > [ edkt ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ dkt ]

> icw > start > [ dkt ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ kt ]

> icw > start > [ kt ] 4 <nil>
> icw > 0 > k > [wc] 4 > [i] 0
> icw > split [ k ][ t ]

> icw > start > [ t ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> bbufnxorixibbd <<<<

> icw > start > [ bbufnxorixibbd ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ bufnxorixibbd ]

> icw > start > [ bufnxorixibbd ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ ufnxorixibbd ]

> icw > start > [ ufnxorixibbd ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ fnxorixibbd ]

> icw > start > [ fnxorixibbd ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ nxorixibbd ]

> icw > start > [ nxorixibbd ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ xorixibbd ]

> icw > start > [ xorixibbd ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ orixibbd ]

> icw > start > [ orixibbd ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ rixibbd ]

> icw > start > [ rixibbd ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ ixibbd ]

> icw > start > [ ixibbd ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > split [ nx ][ orixibbd ]

> icw > start > [ orixibbd ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ rixibbd ]

> icw > start > [ rixibbd ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ ixibbd ]

> icw > start > [ ixibbd ] 7 <nil>
> icw > 0 > i > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > b > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rzuqsyr <<<<

> icw > start > [ rzuqsyr ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ zuqsyr ]

> icw > start > [ zuqsyr ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qghoy <<<<

> icw > start > [ qghoy ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ ghoy ]

> icw > start > [ ghoy ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ hoy ]

> icw > start > [ hoy ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ oy ]

> icw > start > [ oy ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ y ]

> icw > start > [ y ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> evcuanuujszitaoa <<<<

> icw > start > [ evcuanuujszitaoa ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ vcuanuujszitaoa ]

> icw > start > [ vcuanuujszitaoa ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ cuanuujszitaoa ]

> icw > start > [ cuanuujszitaoa ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ uanuujszitaoa ]

> icw > start > [ uanuujszitaoa ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ anuujszitaoa ]

> icw > start > [ anuujszitaoa ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ nuujszitaoa ]

> icw > start > [ nuujszitaoa ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ uujszitaoa ]

> icw > start > [ uujszitaoa ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ ujszitaoa ]

> icw > start > [ ujszitaoa ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ jszitaoa ]

> icw > start > [ jszitaoa ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 8 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 8 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > split [ ua ][ nuujszitaoa ]

> icw > start > [ nuujszitaoa ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ uujszitaoa ]

> icw > start > [ uujszitaoa ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ ujszitaoa ]

> icw > start > [ ujszitaoa ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ jszitaoa ]

> icw > start > [ jszitaoa ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > z > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > t > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > a > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > o > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > a > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wsx <<<<

> icw > start > [ wsx ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ sx ]

> icw > start > [ sx ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ x ]

> icw > start > [ x ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> glafbwzdd <<<<

> icw > start > [ glafbwzdd ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ lafbwzdd ]

> icw > start > [ lafbwzdd ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> znrvjqeyqi <<<<

> icw > start > [ znrvjqeyqi ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> npitruijvyllsi <<<<

> icw > start > [ npitruijvyllsi ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ pitruijvyllsi ]

> icw > start > [ pitruijvyllsi ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ itruijvyllsi ]

> icw > start > [ itruijvyllsi ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > split [ np ][ itruijvyllsi ]

> icw > start > [ itruijvyllsi ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > s > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > i > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> objltu <<<<

> icw > start > [ objltu ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ bjltu ]

> icw > start > [ bjltu ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ jltu ]

> icw > start > [ jltu ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ryp <<<<

> icw > start > [ ryp ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ yp ]

> icw > start > [ yp ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ p ]

> icw > start > [ p ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> nvybsfrxtlfmp <<<<

> icw > start > [ nvybsfrxtlfmp ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ vybsfrxtlfmp ]

> icw > start > [ vybsfrxtlfmp ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ ybsfrxtlfmp ]

> icw > start > [ ybsfrxtlfmp ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ bsfrxtlfmp ]

> icw > start > [ bsfrxtlfmp ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ sfrxtlfmp ]

> icw > start > [ sfrxtlfmp ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ frxtlfmp ]

> icw > start > [ frxtlfmp ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ rxtlfmp ]

> icw > start > [ rxtlfmp ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ xtlfmp ]

> icw > start > [ xtlfmp ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ tlfmp ]

> icw > start > [ tlfmp ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ lfmp ]

> icw > start > [ lfmp ] 9 <nil>
> icw > 0 > l > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > p > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> id <<<<

> icw > start > [ id ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zoolzslgd <<<<

> icw > start > [ zoolzslgd ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> owijatklvjzscizr <<<<

> icw > start > [ owijatklvjzscizr ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ wijatklvjzscizr ]

> icw > start > [ wijatklvjzscizr ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ ijatklvjzscizr ]

> icw > start > [ ijatklvjzscizr ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > z > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > i > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > z > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > r > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> upmsoxftumyxifyu <<<<

> icw > start > [ upmsoxftumyxifyu ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ pmsoxftumyxifyu ]

> icw > start > [ pmsoxftumyxifyu ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ msoxftumyxifyu ]

> icw > start > [ msoxftumyxifyu ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ soxftumyxifyu ]

> icw > start > [ soxftumyxifyu ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ oxftumyxifyu ]

> icw > start > [ oxftumyxifyu ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ xftumyxifyu ]

> icw > start > [ xftumyxifyu ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ ftumyxifyu ]

> icw > start > [ ftumyxifyu ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ tumyxifyu ]

> icw > start > [ tumyxifyu ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ umyxifyu ]

> icw > start > [ umyxifyu ] 8 <nil>
> icw > 0 > u > [wc] 8 > [i] 0
> icw > split [ u ][ myxifyu ]

> icw > start > [ myxifyu ] 9 <nil>
> icw > 0 > m > [wc] 9 > [i] 0
> icw > split [ m ][ yxifyu ]

> icw > start > [ yxifyu ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ xifyu ]

> icw > start > [ xifyu ] 11 <nil>
> icw > 0 > x > [wc] 11 > [i] 0
> icw > split [ x ][ ifyu ]

> icw > start > [ ifyu ] 12 <nil>
> icw > 0 > i > [wc] 12 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 12 > [i] 1
> icw > split [ if ][ yu ]

> icw > start > [ yu ] 13 <nil>
> icw > 0 > y > [wc] 13 > [i] 0
> icw > split [ y ][ u ]

> icw > start > [ u ] 14 <nil>
> icw > 0 > u > [wc] 14 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 13 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > split [ sox ][ ftumyxifyu ]

> icw > start > [ ftumyxifyu ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ tumyxifyu ]

> icw > start > [ tumyxifyu ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ umyxifyu ]

> icw > start > [ umyxifyu ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ myxifyu ]

> icw > start > [ myxifyu ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > split [ m ][ yxifyu ]

> icw > start > [ yxifyu ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ xifyu ]

> icw > start > [ xifyu ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ ifyu ]

> icw > start > [ ifyu ] 10 <nil>
> icw > 0 > i > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > split [ if ][ yu ]

> icw > start > [ yu ] 11 <nil>
> icw > 0 > y > [wc] 11 > [i] 0
> icw > split [ y ][ u ]

> icw > start > [ u ] 12 <nil>
> icw > 0 > u > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 3 > f > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > f > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > y > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > u > [wc] 0 > [i] 15
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> xucubv <<<<

> icw > start > [ xucubv ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ ucubv ]

> icw > start > [ ucubv ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ cubv ]

> icw > start > [ cubv ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ ubv ]

> icw > start > [ ubv ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ bv ]

> icw > start > [ bv ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ v ]

> icw > start > [ v ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fctkqlroq <<<<

> icw > start > [ fctkqlroq ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ ctkqlroq ]

> icw > start > [ ctkqlroq ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ tkqlroq ]

> icw > start > [ tkqlroq ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ kqlroq ]

> icw > start > [ kqlroq ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ qlroq ]

> icw > start > [ qlroq ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ lroq ]

> icw > start > [ lroq ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zjv <<<<

> icw > start > [ zjv ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wzi <<<<

> icw > start > [ wzi ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ zi ]

> icw > start > [ zi ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ppvs <<<<

> icw > start > [ ppvs ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ pvs ]

> icw > start > [ pvs ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ vs ]

> icw > start > [ vs ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ s ]

> icw > start > [ s ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> mflvioemycnphfjt <<<<

> icw > start > [ mflvioemycnphfjt ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ flvioemycnphfjt ]

> icw > start > [ flvioemycnphfjt ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ lvioemycnphfjt ]

> icw > start > [ lvioemycnphfjt ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > split [ mf ][ lvioemycnphfjt ]

> icw > start > [ lvioemycnphfjt ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > h > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > f > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > t > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nwedtubynsb <<<<

> icw > start > [ nwedtubynsb ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ wedtubynsb ]

> icw > start > [ wedtubynsb ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ edtubynsb ]

> icw > start > [ edtubynsb ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ dtubynsb ]

> icw > start > [ dtubynsb ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ tubynsb ]

> icw > start > [ tubynsb ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ ubynsb ]

> icw > start > [ ubynsb ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ bynsb ]

> icw > start > [ bynsb ] 6 <nil>
> icw > 0 > b > [wc] 6 > [i] 0
> icw > split [ b ][ ynsb ]

> icw > start > [ ynsb ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ nsb ]

> icw > start > [ nsb ] 8 <nil>
> icw > 0 > n > [wc] 8 > [i] 0
> icw > split [ n ][ sb ]

> icw > start > [ sb ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ b ]

> icw > start > [ b ] 10 <nil>
> icw > 0 > b > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > b > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> repgcx <<<<

> icw > start > [ repgcx ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ epgcx ]

> icw > start > [ epgcx ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ pgcx ]

> icw > start > [ pgcx ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ gcx ]

> icw > start > [ gcx ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ cx ]

> icw > start > [ cx ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ x ]

> icw > start > [ x ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > split [ re ][ pgcx ]

> icw > start > [ pgcx ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ gcx ]

> icw > start > [ gcx ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ cx ]

> icw > start > [ cx ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ x ]

> icw > start > [ x ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> gsfomhvpmy <<<<

> icw > start > [ gsfomhvpmy ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ sfomhvpmy ]

> icw > start > [ sfomhvpmy ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ fomhvpmy ]

> icw > start > [ fomhvpmy ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ omhvpmy ]

> icw > start > [ omhvpmy ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ mhvpmy ]

> icw > start > [ mhvpmy ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ hvpmy ]

> icw > start > [ hvpmy ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ vpmy ]

> icw > start > [ vpmy ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ pmy ]

> icw > start > [ pmy ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ my ]

> icw > start > [ my ] 8 <nil>
> icw > 0 > m > [wc] 8 > [i] 0
> icw > split [ m ][ y ]

> icw > start > [ y ] 9 <nil>
> icw > 0 > y > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> kdohe <<<<

> icw > start > [ kdohe ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ dohe ]

> icw > start > [ dohe ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ ohe ]

> icw > start > [ ohe ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ he ]

> icw > start > [ he ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ e ]

> icw > start > [ e ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> tyycsibbeaxn <<<<

> icw > start > [ tyycsibbeaxn ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ yycsibbeaxn ]

> icw > start > [ yycsibbeaxn ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ ycsibbeaxn ]

> icw > start > [ ycsibbeaxn ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ csibbeaxn ]

> icw > start > [ csibbeaxn ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ sibbeaxn ]

> icw > start > [ sibbeaxn ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ ibbeaxn ]

> icw > start > [ ibbeaxn ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > n > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wjkfvabn <<<<

> icw > start > [ wjkfvabn ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ jkfvabn ]

> icw > start > [ jkfvabn ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> llkmagl <<<<

> icw > start > [ llkmagl ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> thkglauzgkeuly <<<<

> icw > start > [ thkglauzgkeuly ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ hkglauzgkeuly ]

> icw > start > [ hkglauzgkeuly ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ kglauzgkeuly ]

> icw > start > [ kglauzgkeuly ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ glauzgkeuly ]

> icw > start > [ glauzgkeuly ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ lauzgkeuly ]

> icw > start > [ lauzgkeuly ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> paeurdvexqlw <<<<

> icw > start > [ paeurdvexqlw ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ aeurdvexqlw ]

> icw > start > [ aeurdvexqlw ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ eurdvexqlw ]

> icw > start > [ eurdvexqlw ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ urdvexqlw ]

> icw > start > [ urdvexqlw ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ rdvexqlw ]

> icw > start > [ rdvexqlw ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ dvexqlw ]

> icw > start > [ dvexqlw ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ vexqlw ]

> icw > start > [ vexqlw ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ exqlw ]

> icw > start > [ exqlw ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ xqlw ]

> icw > start > [ xqlw ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ qlw ]

> icw > start > [ qlw ] 9 <nil>
> icw > 0 > q > [wc] 9 > [i] 0
> icw > split [ q ][ lw ]

> icw > start > [ lw ] 10 <nil>
> icw > 0 > l > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 10 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > w > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> akdt <<<<

> icw > start > [ akdt ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ kdt ]

> icw > start > [ kdt ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ dt ]

> icw > start > [ dt ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ t ]

> icw > start > [ t ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ihmfrj <<<<

> icw > start > [ ihmfrj ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> janxk <<<<

> icw > start > [ janxk ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rqdll <<<<

> icw > start > [ rqdll ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ qdll ]

> icw > start > [ qdll ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ dll ]

> icw > start > [ dll ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ ll ]

> icw > start > [ ll ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cyhbsuxnlftmjc <<<<

> icw > start > [ cyhbsuxnlftmjc ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ yhbsuxnlftmjc ]

> icw > start > [ yhbsuxnlftmjc ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ hbsuxnlftmjc ]

> icw > start > [ hbsuxnlftmjc ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ bsuxnlftmjc ]

> icw > start > [ bsuxnlftmjc ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ suxnlftmjc ]

> icw > start > [ suxnlftmjc ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ uxnlftmjc ]

> icw > start > [ uxnlftmjc ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ xnlftmjc ]

> icw > start > [ xnlftmjc ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ nlftmjc ]

> icw > start > [ nlftmjc ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > split [ n ][ lftmjc ]

> icw > start > [ lftmjc ] 8 <nil>
> icw > 0 > l > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > split [ su ][ xnlftmjc ]

> icw > start > [ xnlftmjc ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ nlftmjc ]

> icw > start > [ nlftmjc ] 6 <nil>
> icw > 0 > n > [wc] 6 > [i] 0
> icw > split [ n ][ lftmjc ]

> icw > start > [ lftmjc ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > c > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yybwsjmajbwtuhkk <<<<

> icw > start > [ yybwsjmajbwtuhkk ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ ybwsjmajbwtuhkk ]

> icw > start > [ ybwsjmajbwtuhkk ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ bwsjmajbwtuhkk ]

> icw > start > [ bwsjmajbwtuhkk ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ wsjmajbwtuhkk ]

> icw > start > [ wsjmajbwtuhkk ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ sjmajbwtuhkk ]

> icw > start > [ sjmajbwtuhkk ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ jmajbwtuhkk ]

> icw > start > [ jmajbwtuhkk ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > u > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > h > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > k > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > k > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ovytgaufpjl <<<<

> icw > start > [ ovytgaufpjl ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ vytgaufpjl ]

> icw > start > [ vytgaufpjl ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ ytgaufpjl ]

> icw > start > [ ytgaufpjl ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ tgaufpjl ]

> icw > start > [ tgaufpjl ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ gaufpjl ]

> icw > start > [ gaufpjl ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ aufpjl ]

> icw > start > [ aufpjl ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ ufpjl ]

> icw > start > [ ufpjl ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ fpjl ]

> icw > start > [ fpjl ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ pjl ]

> icw > start > [ pjl ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ jl ]

> icw > start > [ jl ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > split [ tg ][ aufpjl ]

> icw > start > [ aufpjl ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ ufpjl ]

> icw > start > [ ufpjl ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ fpjl ]

> icw > start > [ fpjl ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ pjl ]

> icw > start > [ pjl ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ jl ]

> icw > start > [ jl ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 8 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iwbnzhybsx <<<<

> icw > start > [ iwbnzhybsx ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mumbh <<<<

> icw > start > [ mumbh ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ umbh ]

> icw > start > [ umbh ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ mbh ]

> icw > start > [ mbh ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ bh ]

> icw > start > [ bh ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ h ]

> icw > start > [ h ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> jqmdabmyu <<<<

> icw > start > [ jqmdabmyu ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> br <<<<

> icw > start > [ br ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ r ]

> icw > start > [ r ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lwstjkoxbczkj <<<<

> icw > start > [ lwstjkoxbczkj ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > z > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vhsgzvwiixxaob <<<<

> icw > start > [ vhsgzvwiixxaob ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ hsgzvwiixxaob ]

> icw > start > [ hsgzvwiixxaob ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ sgzvwiixxaob ]

> icw > start > [ sgzvwiixxaob ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ gzvwiixxaob ]

> icw > start > [ gzvwiixxaob ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ zvwiixxaob ]

> icw > start > [ zvwiixxaob ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > a > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > o > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > b > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fso <<<<

> icw > start > [ fso ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ so ]

> icw > start > [ so ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ o ]

> icw > start > [ o ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> qnebmfl <<<<

> icw > start > [ qnebmfl ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ nebmfl ]

> icw > start > [ nebmfl ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ ebmfl ]

> icw > start > [ ebmfl ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ bmfl ]

> icw > start > [ bmfl ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ mfl ]

> icw > start > [ mfl ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ fl ]

> icw > start > [ fl ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ l ]

> icw > start > [ l ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > split [ mf ][ l ]

> icw > start > [ l ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ooetjiz <<<<

> icw > start > [ ooetjiz ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ oetjiz ]

> icw > start > [ oetjiz ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ etjiz ]

> icw > start > [ etjiz ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ tjiz ]

> icw > start > [ tjiz ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ jiz ]

> icw > start > [ jiz ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lq <<<<

> icw > start > [ lq ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> msxphqdgz <<<<

> icw > start > [ msxphqdgz ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ sxphqdgz ]

> icw > start > [ sxphqdgz ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ xphqdgz ]

> icw > start > [ xphqdgz ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ phqdgz ]

> icw > start > [ phqdgz ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ hqdgz ]

> icw > start > [ hqdgz ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ qdgz ]

> icw > start > [ qdgz ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ dgz ]

> icw > start > [ dgz ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ gz ]

> icw > start > [ gz ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ z ]

> icw > start > [ z ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mqhoggvrvjqrp <<<<

> icw > start > [ mqhoggvrvjqrp ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ qhoggvrvjqrp ]

> icw > start > [ qhoggvrvjqrp ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ hoggvrvjqrp ]

> icw > start > [ hoggvrvjqrp ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ oggvrvjqrp ]

> icw > start > [ oggvrvjqrp ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ ggvrvjqrp ]

> icw > start > [ ggvrvjqrp ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ gvrvjqrp ]

> icw > start > [ gvrvjqrp ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ vrvjqrp ]

> icw > start > [ vrvjqrp ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ rvjqrp ]

> icw > start > [ rvjqrp ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ vjqrp ]

> icw > start > [ vjqrp ] 8 <nil>
> icw > 0 > v > [wc] 8 > [i] 0
> icw > split [ v ][ jqrp ]

> icw > start > [ jqrp ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 7 > [i] 1
> icw > split [ rv ][ jqrp ]

> icw > start > [ jqrp ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > p > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xbhkkfg <<<<

> icw > start > [ xbhkkfg ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ bhkkfg ]

> icw > start > [ bhkkfg ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ hkkfg ]

> icw > start > [ hkkfg ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ kkfg ]

> icw > start > [ kkfg ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ kfg ]

> icw > start > [ kfg ] 4 <nil>
> icw > 0 > k > [wc] 4 > [i] 0
> icw > split [ k ][ fg ]

> icw > start > [ fg ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ g ]

> icw > start > [ g ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 3 > [i] 1
> icw > split [ kk ][ fg ]

> icw > start > [ fg ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ g ]

> icw > start > [ g ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zxjegsyovdrmw <<<<

> icw > start > [ zxjegsyovdrmw ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jav <<<<

> icw > start > [ jav ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mshoj <<<<

> icw > start > [ mshoj ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ shoj ]

> icw > start > [ shoj ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ hoj ]

> icw > start > [ hoj ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ oj ]

> icw > start > [ oj ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ j ]

> icw > start > [ j ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ax <<<<

> icw > start > [ ax ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ x ]

> icw > start > [ x ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> biztkfomz <<<<

> icw > start > [ biztkfomz ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ iztkfomz ]

> icw > start > [ iztkfomz ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hujdmcyxdqteqja <<<<

> icw > start > [ hujdmcyxdqteqja ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ ujdmcyxdqteqja ]

> icw > start > [ ujdmcyxdqteqja ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ jdmcyxdqteqja ]

> icw > start > [ jdmcyxdqteqja ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > j > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > a > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gqgsomonv <<<<

> icw > start > [ gqgsomonv ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ qgsomonv ]

> icw > start > [ qgsomonv ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ gsomonv ]

> icw > start > [ gsomonv ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ somonv ]

> icw > start > [ somonv ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ omonv ]

> icw > start > [ omonv ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ monv ]

> icw > start > [ monv ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ onv ]

> icw > start > [ onv ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ nv ]

> icw > start > [ nv ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > split [ n ][ v ]

> icw > start > [ v ] 8 <nil>
> icw > 0 > v > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 7 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 5 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> reqqzzpw <<<<

> icw > start > [ reqqzzpw ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ eqqzzpw ]

> icw > start > [ eqqzzpw ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ qqzzpw ]

> icw > start > [ qqzzpw ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ qzzpw ]

> icw > start > [ qzzpw ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ zzpw ]

> icw > start > [ zzpw ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > split [ zz ][ pw ]

> icw > start > [ pw ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ w ]

> icw > start > [ w ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > split [ re ][ qqzzpw ]

> icw > start > [ qqzzpw ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ qzzpw ]

> icw > start > [ qzzpw ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ zzpw ]

> icw > start > [ zzpw ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > split [ zz ][ pw ]

> icw > start > [ pw ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ w ]

> icw > start > [ w ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lihdnvud <<<<

> icw > start > [ lihdnvud ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lznfhbaokxvce <<<<

> icw > start > [ lznfhbaokxvce ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fhxbldylqqewdnj <<<<

> icw > start > [ fhxbldylqqewdnj ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ hxbldylqqewdnj ]

> icw > start > [ hxbldylqqewdnj ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ xbldylqqewdnj ]

> icw > start > [ xbldylqqewdnj ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ bldylqqewdnj ]

> icw > start > [ bldylqqewdnj ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ ldylqqewdnj ]

> icw > start > [ ldylqqewdnj ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > w > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > d > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > n > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rlbskqgfvn <<<<

> icw > start > [ rlbskqgfvn ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ lbskqgfvn ]

> icw > start > [ lbskqgfvn ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lfvobeyolyy <<<<

> icw > start > [ lfvobeyolyy ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> v <<<<

> icw > start > [ v ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iwh <<<<

> icw > start > [ iwh ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fpbuiujlolnjl <<<<

> icw > start > [ fpbuiujlolnjl ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ pbuiujlolnjl ]

> icw > start > [ pbuiujlolnjl ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ buiujlolnjl ]

> icw > start > [ buiujlolnjl ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ uiujlolnjl ]

> icw > start > [ uiujlolnjl ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ iujlolnjl ]

> icw > start > [ iujlolnjl ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gvwxljbo <<<<

> icw > start > [ gvwxljbo ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ vwxljbo ]

> icw > start > [ vwxljbo ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ wxljbo ]

> icw > start > [ wxljbo ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ xljbo ]

> icw > start > [ xljbo ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ ljbo ]

> icw > start > [ ljbo ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ypaotdzjxxrsc <<<<

> icw > start > [ ypaotdzjxxrsc ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ paotdzjxxrsc ]

> icw > start > [ paotdzjxxrsc ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ aotdzjxxrsc ]

> icw > start > [ aotdzjxxrsc ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ otdzjxxrsc ]

> icw > start > [ otdzjxxrsc ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ tdzjxxrsc ]

> icw > start > [ tdzjxxrsc ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ dzjxxrsc ]

> icw > start > [ dzjxxrsc ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ zjxxrsc ]

> icw > start > [ zjxxrsc ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mwrvel <<<<

> icw > start > [ mwrvel ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ wrvel ]

> icw > start > [ wrvel ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ rvel ]

> icw > start > [ rvel ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ vel ]

> icw > start > [ vel ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ el ]

> icw > start > [ el ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ l ]

> icw > start > [ l ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > split [ rv ][ el ]

> icw > start > [ el ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ l ]

> icw > start > [ l ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > split [ wr ][ vel ]

> icw > start > [ vel ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ el ]

> icw > start > [ el ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ l ]

> icw > start > [ l ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> umzpnoiei <<<<

> icw > start > [ umzpnoiei ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ mzpnoiei ]

> icw > start > [ mzpnoiei ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ zpnoiei ]

> icw > start > [ zpnoiei ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ogwilaswn <<<<

> icw > start > [ ogwilaswn ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ gwilaswn ]

> icw > start > [ gwilaswn ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ wilaswn ]

> icw > start > [ wilaswn ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ ilaswn ]

> icw > start > [ ilaswn ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > split [ il ][ aswn ]

> icw > start > [ aswn ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ swn ]

> icw > start > [ swn ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ wn ]

> icw > start > [ wn ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > split [ w ][ n ]

> icw > start > [ n ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> yw <<<<

> icw > start > [ yw ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ w ]

> icw > start > [ w ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> egdgye <<<<

> icw > start > [ egdgye ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ gdgye ]

> icw > start > [ gdgye ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ dgye ]

> icw > start > [ dgye ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ gye ]

> icw > start > [ gye ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ ye ]

> icw > start > [ ye ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ e ]

> icw > start > [ e ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hsrznlzrf <<<<

> icw > start > [ hsrznlzrf ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ srznlzrf ]

> icw > start > [ srznlzrf ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ rznlzrf ]

> icw > start > [ rznlzrf ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ znlzrf ]

> icw > start > [ znlzrf ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mwdgxaigmxpy <<<<

> icw > start > [ mwdgxaigmxpy ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ wdgxaigmxpy ]

> icw > start > [ wdgxaigmxpy ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ dgxaigmxpy ]

> icw > start > [ dgxaigmxpy ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ gxaigmxpy ]

> icw > start > [ gxaigmxpy ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ xaigmxpy ]

> icw > start > [ xaigmxpy ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ aigmxpy ]

> icw > start > [ aigmxpy ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ igmxpy ]

> icw > start > [ igmxpy ] 6 <nil>
> icw > 0 > i > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > split [ wd ][ gxaigmxpy ]

> icw > start > [ gxaigmxpy ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ xaigmxpy ]

> icw > start > [ xaigmxpy ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ aigmxpy ]

> icw > start > [ aigmxpy ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ igmxpy ]

> icw > start > [ igmxpy ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yaqgault <<<<

> icw > start > [ yaqgault ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ aqgault ]

> icw > start > [ aqgault ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ qgault ]

> icw > start > [ qgault ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ gault ]

> icw > start > [ gault ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ ault ]

> icw > start > [ ault ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ ult ]

> icw > start > [ ult ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ lt ]

> icw > start > [ lt ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> dtlg <<<<

> icw > start > [ dtlg ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ tlg ]

> icw > start > [ tlg ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ lg ]

> icw > start > [ lg ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cyvfiykmkllf <<<<

> icw > start > [ cyvfiykmkllf ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ yvfiykmkllf ]

> icw > start > [ yvfiykmkllf ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ vfiykmkllf ]

> icw > start > [ vfiykmkllf ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ fiykmkllf ]

> icw > start > [ fiykmkllf ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ iykmkllf ]

> icw > start > [ iykmkllf ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zxqyhvizqmamj <<<<

> icw > start > [ zxqyhvizqmamj ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lvvgoifltzywueyp <<<<

> icw > start > [ lvvgoifltzywueyp ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > w > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > u > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > y > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > p > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> abinmy <<<<

> icw > start > [ abinmy ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ binmy ]

> icw > start > [ binmy ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ inmy ]

> icw > start > [ inmy ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ppzaecvmx <<<<

> icw > start > [ ppzaecvmx ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ pzaecvmx ]

> icw > start > [ pzaecvmx ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ zaecvmx ]

> icw > start > [ zaecvmx ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qsmzc <<<<

> icw > start > [ qsmzc ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ smzc ]

> icw > start > [ smzc ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ mzc ]

> icw > start > [ mzc ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ zc ]

> icw > start > [ zc ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iddymnl <<<<

> icw > start > [ iddymnl ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > split [ id ][ dymnl ]

> icw > start > [ dymnl ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ ymnl ]

> icw > start > [ ymnl ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ mnl ]

> icw > start > [ mnl ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ nl ]

> icw > start > [ nl ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ l ]

> icw > start > [ l ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> uskihek <<<<

> icw > start > [ uskihek ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ skihek ]

> icw > start > [ skihek ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ kihek ]

> icw > start > [ kihek ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ ihek ]

> icw > start > [ ihek ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> evxtehxtbthq <<<<

> icw > start > [ evxtehxtbthq ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ vxtehxtbthq ]

> icw > start > [ vxtehxtbthq ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ xtehxtbthq ]

> icw > start > [ xtehxtbthq ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ tehxtbthq ]

> icw > start > [ tehxtbthq ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ ehxtbthq ]

> icw > start > [ ehxtbthq ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ hxtbthq ]

> icw > start > [ hxtbthq ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ xtbthq ]

> icw > start > [ xtbthq ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ tbthq ]

> icw > start > [ tbthq ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ bthq ]

> icw > start > [ bthq ] 8 <nil>
> icw > 0 > b > [wc] 8 > [i] 0
> icw > split [ b ][ thq ]

> icw > start > [ thq ] 9 <nil>
> icw > 0 > t > [wc] 9 > [i] 0
> icw > split [ t ][ hq ]

> icw > start > [ hq ] 10 <nil>
> icw > 0 > h > [wc] 10 > [i] 0
> icw > split [ h ][ q ]

> icw > start > [ q ] 11 <nil>
> icw > 0 > q > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > q > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> jvtfzddlgch <<<<

> icw > start > [ jvtfzddlgch ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> czohpyewf <<<<

> icw > start > [ czohpyewf ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ zohpyewf ]

> icw > start > [ zohpyewf ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ufzazyxtqxcu <<<<

> icw > start > [ ufzazyxtqxcu ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ fzazyxtqxcu ]

> icw > start > [ fzazyxtqxcu ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ zazyxtqxcu ]

> icw > start > [ zazyxtqxcu ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > split [ fz ][ azyxtqxcu ]

> icw > start > [ azyxtqxcu ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ zyxtqxcu ]

> icw > start > [ zyxtqxcu ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> brxpfymuvfvs <<<<

> icw > start > [ brxpfymuvfvs ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ rxpfymuvfvs ]

> icw > start > [ rxpfymuvfvs ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ xpfymuvfvs ]

> icw > start > [ xpfymuvfvs ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ pfymuvfvs ]

> icw > start > [ pfymuvfvs ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ fymuvfvs ]

> icw > start > [ fymuvfvs ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ ymuvfvs ]

> icw > start > [ ymuvfvs ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ muvfvs ]

> icw > start > [ muvfvs ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ uvfvs ]

> icw > start > [ uvfvs ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ vfvs ]

> icw > start > [ vfvs ] 8 <nil>
> icw > 0 > v > [wc] 8 > [i] 0
> icw > split [ v ][ fvs ]

> icw > start > [ fvs ] 9 <nil>
> icw > 0 > f > [wc] 9 > [i] 0
> icw > split [ f ][ vs ]

> icw > start > [ vs ] 10 <nil>
> icw > 0 > v > [wc] 10 > [i] 0
> icw > split [ v ][ s ]

> icw > start > [ s ] 11 <nil>
> icw > 0 > s > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > split [ br ][ xpfymuvfvs ]

> icw > start > [ xpfymuvfvs ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ pfymuvfvs ]

> icw > start > [ pfymuvfvs ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ fymuvfvs ]

> icw > start > [ fymuvfvs ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ ymuvfvs ]

> icw > start > [ ymuvfvs ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ muvfvs ]

> icw > start > [ muvfvs ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ uvfvs ]

> icw > start > [ uvfvs ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ vfvs ]

> icw > start > [ vfvs ] 7 <nil>
> icw > 0 > v > [wc] 7 > [i] 0
> icw > split [ v ][ fvs ]

> icw > start > [ fvs ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ vs ]

> icw > start > [ vs ] 9 <nil>
> icw > 0 > v > [wc] 9 > [i] 0
> icw > split [ v ][ s ]

> icw > start > [ s ] 10 <nil>
> icw > 0 > s > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 6 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> xrrcfuusicc <<<<

> icw > start > [ xrrcfuusicc ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ rrcfuusicc ]

> icw > start > [ rrcfuusicc ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ rcfuusicc ]

> icw > start > [ rcfuusicc ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ cfuusicc ]

> icw > start > [ cfuusicc ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ fuusicc ]

> icw > start > [ fuusicc ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ uusicc ]

> icw > start > [ uusicc ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ usicc ]

> icw > start > [ usicc ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ sicc ]

> icw > start > [ sicc ] 7 <nil>
> icw > 0 > s > [wc] 7 > [i] 0
> icw > split [ s ][ icc ]

> icw > start > [ icc ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> aqhlswbzievij <<<<

> icw > start > [ aqhlswbzievij ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ qhlswbzievij ]

> icw > start > [ qhlswbzievij ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ hlswbzievij ]

> icw > start > [ hlswbzievij ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ lswbzievij ]

> icw > start > [ lswbzievij ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rv <<<<

> icw > start > [ rv ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ v ]

> icw > start > [ v ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> udvmara <<<<

> icw > start > [ udvmara ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ dvmara ]

> icw > start > [ dvmara ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ vmara ]

> icw > start > [ vmara ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ mara ]

> icw > start > [ mara ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ ara ]

> icw > start > [ ara ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ ra ]

> icw > start > [ ra ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ a ]

> icw > start > [ a ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> upityz <<<<

> icw > start > [ upityz ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ pityz ]

> icw > start > [ pityz ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ ityz ]

> icw > start > [ ityz ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fecd <<<<

> icw > start > [ fecd ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ ecd ]

> icw > start > [ ecd ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ cd ]

> icw > start > [ cd ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ d ]

> icw > start > [ d ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> suxteeitxtg <<<<

> icw > start > [ suxteeitxtg ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ uxteeitxtg ]

> icw > start > [ uxteeitxtg ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ xteeitxtg ]

> icw > start > [ xteeitxtg ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ teeitxtg ]

> icw > start > [ teeitxtg ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ eeitxtg ]

> icw > start > [ eeitxtg ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ eitxtg ]

> icw > start > [ eitxtg ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ itxtg ]

> icw > start > [ itxtg ] 6 <nil>
> icw > 0 > i > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > split [ su ][ xteeitxtg ]

> icw > start > [ xteeitxtg ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ teeitxtg ]

> icw > start > [ teeitxtg ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ eeitxtg ]

> icw > start > [ eeitxtg ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ eitxtg ]

> icw > start > [ eitxtg ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ itxtg ]

> icw > start > [ itxtg ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dfuydrtbfypbn <<<<

> icw > start > [ dfuydrtbfypbn ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ fuydrtbfypbn ]

> icw > start > [ fuydrtbfypbn ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ uydrtbfypbn ]

> icw > start > [ uydrtbfypbn ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ ydrtbfypbn ]

> icw > start > [ ydrtbfypbn ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ drtbfypbn ]

> icw > start > [ drtbfypbn ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ rtbfypbn ]

> icw > start > [ rtbfypbn ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ tbfypbn ]

> icw > start > [ tbfypbn ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ bfypbn ]

> icw > start > [ bfypbn ] 7 <nil>
> icw > 0 > b > [wc] 7 > [i] 0
> icw > split [ b ][ fypbn ]

> icw > start > [ fypbn ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ ypbn ]

> icw > start > [ ypbn ] 9 <nil>
> icw > 0 > y > [wc] 9 > [i] 0
> icw > split [ y ][ pbn ]

> icw > start > [ pbn ] 10 <nil>
> icw > 0 > p > [wc] 10 > [i] 0
> icw > split [ p ][ bn ]

> icw > start > [ bn ] 11 <nil>
> icw > 0 > b > [wc] 11 > [i] 0
> icw > split [ b ][ n ]

> icw > start > [ n ] 12 <nil>
> icw > 0 > n > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> cypqodxr <<<<

> icw > start > [ cypqodxr ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ ypqodxr ]

> icw > start > [ ypqodxr ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ pqodxr ]

> icw > start > [ pqodxr ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ qodxr ]

> icw > start > [ qodxr ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ odxr ]

> icw > start > [ odxr ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ dxr ]

> icw > start > [ dxr ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ xr ]

> icw > start > [ xr ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ r ]

> icw > start > [ r ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wikfuxwjht <<<<

> icw > start > [ wikfuxwjht ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ ikfuxwjht ]

> icw > start > [ ikfuxwjht ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jrliuaifpp <<<<

> icw > start > [ jrliuaifpp ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vkmxys <<<<

> icw > start > [ vkmxys ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ kmxys ]

> icw > start > [ kmxys ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ mxys ]

> icw > start > [ mxys ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ xys ]

> icw > start > [ xys ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ ys ]

> icw > start > [ ys ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ s ]

> icw > start > [ s ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wvpfyfpkvgthq <<<<

> icw > start > [ wvpfyfpkvgthq ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ vpfyfpkvgthq ]

> icw > start > [ vpfyfpkvgthq ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ pfyfpkvgthq ]

> icw > start > [ pfyfpkvgthq ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ fyfpkvgthq ]

> icw > start > [ fyfpkvgthq ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ yfpkvgthq ]

> icw > start > [ yfpkvgthq ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ fpkvgthq ]

> icw > start > [ fpkvgthq ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ pkvgthq ]

> icw > start > [ pkvgthq ] 6 <nil>
> icw > 0 > p > [wc] 6 > [i] 0
> icw > split [ p ][ kvgthq ]

> icw > start > [ kvgthq ] 7 <nil>
> icw > 0 > k > [wc] 7 > [i] 0
> icw > split [ k ][ vgthq ]

> icw > start > [ vgthq ] 8 <nil>
> icw > 0 > v > [wc] 8 > [i] 0
> icw > split [ v ][ gthq ]

> icw > start > [ gthq ] 9 <nil>
> icw > 0 > g > [wc] 9 > [i] 0
> icw > split [ g ][ thq ]

> icw > start > [ thq ] 10 <nil>
> icw > 0 > t > [wc] 10 > [i] 0
> icw > split [ t ][ hq ]

> icw > start > [ hq ] 11 <nil>
> icw > 0 > h > [wc] 11 > [i] 0
> icw > split [ h ][ q ]

> icw > start > [ q ] 12 <nil>
> icw > 0 > q > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 8 > [i] 1
> icw > split [ vg ][ thq ]

> icw > start > [ thq ] 9 <nil>
> icw > 0 > t > [wc] 9 > [i] 0
> icw > split [ t ][ hq ]

> icw > start > [ hq ] 10 <nil>
> icw > 0 > h > [wc] 10 > [i] 0
> icw > split [ h ][ q ]

> icw > start > [ q ] 11 <nil>
> icw > 0 > q > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> rmajxis <<<<

> icw > start > [ rmajxis ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ majxis ]

> icw > start > [ majxis ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ ajxis ]

> icw > start > [ ajxis ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ jxis ]

> icw > start > [ jxis ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jncxgviyu <<<<

> icw > start > [ jncxgviyu ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> av <<<<

> icw > start > [ av ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ v ]

> icw > start > [ v ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> nmhskodmidaj <<<<

> icw > start > [ nmhskodmidaj ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ mhskodmidaj ]

> icw > start > [ mhskodmidaj ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ hskodmidaj ]

> icw > start > [ hskodmidaj ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ skodmidaj ]

> icw > start > [ skodmidaj ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ kodmidaj ]

> icw > start > [ kodmidaj ] 4 <nil>
> icw > 0 > k > [wc] 4 > [i] 0
> icw > split [ k ][ odmidaj ]

> icw > start > [ odmidaj ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ dmidaj ]

> icw > start > [ dmidaj ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ midaj ]

> icw > start > [ midaj ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > split [ m ][ idaj ]

> icw > start > [ idaj ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > split [ id ][ aj ]

> icw > start > [ aj ] 9 <nil>
> icw > 0 > a > [wc] 9 > [i] 0
> icw > split [ a ][ j ]

> icw > start > [ j ] 10 <nil>
> icw > 0 > j > [wc] 10 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 9 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > a > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lkfrimprrhen <<<<

> icw > start > [ lkfrimprrhen ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > n > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> uip <<<<

> icw > start > [ uip ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ ip ]

> icw > start > [ ip ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hstyopbvuiqc <<<<

> icw > start > [ hstyopbvuiqc ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ styopbvuiqc ]

> icw > start > [ styopbvuiqc ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ tyopbvuiqc ]

> icw > start > [ tyopbvuiqc ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ yopbvuiqc ]

> icw > start > [ yopbvuiqc ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ opbvuiqc ]

> icw > start > [ opbvuiqc ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ pbvuiqc ]

> icw > start > [ pbvuiqc ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ bvuiqc ]

> icw > start > [ bvuiqc ] 6 <nil>
> icw > 0 > b > [wc] 6 > [i] 0
> icw > split [ b ][ vuiqc ]

> icw > start > [ vuiqc ] 7 <nil>
> icw > 0 > v > [wc] 7 > [i] 0
> icw > split [ v ][ uiqc ]

> icw > start > [ uiqc ] 8 <nil>
> icw > 0 > u > [wc] 8 > [i] 0
> icw > split [ u ][ iqc ]

> icw > start > [ iqc ] 9 <nil>
> icw > 0 > i > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> p <<<<

> icw > start > [ p ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vwduwmjpblqo <<<<

> icw > start > [ vwduwmjpblqo ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ wduwmjpblqo ]

> icw > start > [ wduwmjpblqo ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ duwmjpblqo ]

> icw > start > [ duwmjpblqo ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ uwmjpblqo ]

> icw > start > [ uwmjpblqo ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ wmjpblqo ]

> icw > start > [ wmjpblqo ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ mjpblqo ]

> icw > start > [ mjpblqo ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ jpblqo ]

> icw > start > [ jpblqo ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > split [ jp ][ blqo ]

> icw > start > [ blqo ] 7 <nil>
> icw > 0 > b > [wc] 7 > [i] 0
> icw > split [ b ][ lqo ]

> icw > start > [ lqo ] 8 <nil>
> icw > 0 > l > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > split [ lq ][ o ]

> icw > start > [ o ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > o > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > split [ wd ][ uwmjpblqo ]

> icw > start > [ uwmjpblqo ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ wmjpblqo ]

> icw > start > [ wmjpblqo ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ mjpblqo ]

> icw > start > [ mjpblqo ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ jpblqo ]

> icw > start > [ jpblqo ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > split [ jp ][ blqo ]

> icw > start > [ blqo ] 6 <nil>
> icw > 0 > b > [wc] 6 > [i] 0
> icw > split [ b ][ lqo ]

> icw > start > [ lqo ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > split [ lq ][ o ]

> icw > start > [ o ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > o > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fnxwgqtvwztje <<<<

> icw > start > [ fnxwgqtvwztje ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ nxwgqtvwztje ]

> icw > start > [ nxwgqtvwztje ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ xwgqtvwztje ]

> icw > start > [ xwgqtvwztje ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ wgqtvwztje ]

> icw > start > [ wgqtvwztje ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ gqtvwztje ]

> icw > start > [ gqtvwztje ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ qtvwztje ]

> icw > start > [ qtvwztje ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ tvwztje ]

> icw > start > [ tvwztje ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ vwztje ]

> icw > start > [ vwztje ] 7 <nil>
> icw > 0 > v > [wc] 7 > [i] 0
> icw > split [ v ][ wztje ]

> icw > start > [ wztje ] 8 <nil>
> icw > 0 > w > [wc] 8 > [i] 0
> icw > split [ w ][ ztje ]

> icw > start > [ ztje ] 9 <nil>
> icw > 0 > z > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > split [ nx ][ wgqtvwztje ]

> icw > start > [ wgqtvwztje ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ gqtvwztje ]

> icw > start > [ gqtvwztje ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ qtvwztje ]

> icw > start > [ qtvwztje ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ tvwztje ]

> icw > start > [ tvwztje ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ vwztje ]

> icw > start > [ vwztje ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ wztje ]

> icw > start > [ wztje ] 7 <nil>
> icw > 0 > w > [wc] 7 > [i] 0
> icw > split [ w ][ ztje ]

> icw > start > [ ztje ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xwnbcuggl <<<<

> icw > start > [ xwnbcuggl ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ wnbcuggl ]

> icw > start > [ wnbcuggl ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ nbcuggl ]

> icw > start > [ nbcuggl ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ bcuggl ]

> icw > start > [ bcuggl ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ cuggl ]

> icw > start > [ cuggl ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ uggl ]

> icw > start > [ uggl ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ ggl ]

> icw > start > [ ggl ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > split [ g ][ gl ]

> icw > start > [ gl ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ l ]

> icw > start > [ l ] 8 <nil>
> icw > 0 > l > [wc] 8 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 7 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iehimvoymyjasin <<<<

> icw > start > [ iehimvoymyjasin ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > a > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > s > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > i > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > n > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> spsqiu <<<<

> icw > start > [ spsqiu ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ psqiu ]

> icw > start > [ psqiu ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ sqiu ]

> icw > start > [ sqiu ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ qiu ]

> icw > start > [ qiu ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ iu ]

> icw > start > [ iu ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> flhyfac <<<<

> icw > start > [ flhyfac ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ lhyfac ]

> icw > start > [ lhyfac ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mqrbq <<<<

> icw > start > [ mqrbq ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ qrbq ]

> icw > start > [ qrbq ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ rbq ]

> icw > start > [ rbq ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ bq ]

> icw > start > [ bq ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ q ]

> icw > start > [ q ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> pstsxhplrrmbeddv <<<<

> icw > start > [ pstsxhplrrmbeddv ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ stsxhplrrmbeddv ]

> icw > start > [ stsxhplrrmbeddv ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ tsxhplrrmbeddv ]

> icw > start > [ tsxhplrrmbeddv ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ sxhplrrmbeddv ]

> icw > start > [ sxhplrrmbeddv ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ xhplrrmbeddv ]

> icw > start > [ xhplrrmbeddv ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ hplrrmbeddv ]

> icw > start > [ hplrrmbeddv ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ plrrmbeddv ]

> icw > start > [ plrrmbeddv ] 6 <nil>
> icw > 0 > p > [wc] 6 > [i] 0
> icw > split [ p ][ lrrmbeddv ]

> icw > start > [ lrrmbeddv ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > d > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > v > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hnegtuxx <<<<

> icw > start > [ hnegtuxx ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ negtuxx ]

> icw > start > [ negtuxx ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ egtuxx ]

> icw > start > [ egtuxx ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ gtuxx ]

> icw > start > [ gtuxx ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ tuxx ]

> icw > start > [ tuxx ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ uxx ]

> icw > start > [ uxx ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ xx ]

> icw > start > [ xx ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ x ]

> icw > start > [ x ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> alsyxezjwtlwmxv <<<<

> icw > start > [ alsyxezjwtlwmxv ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ lsyxezjwtlwmxv ]

> icw > start > [ lsyxezjwtlwmxv ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > w > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > m > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > x > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > v > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jtxytykkcku <<<<

> icw > start > [ jtxytykkcku ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > u > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bhhlovgcx <<<<

> icw > start > [ bhhlovgcx ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ hhlovgcx ]

> icw > start > [ hhlovgcx ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ hlovgcx ]

> icw > start > [ hlovgcx ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ lovgcx ]

> icw > start > [ lovgcx ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xhhivxnutkx <<<<

> icw > start > [ xhhivxnutkx ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ hhivxnutkx ]

> icw > start > [ hhivxnutkx ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ hivxnutkx ]

> icw > start > [ hivxnutkx ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ ivxnutkx ]

> icw > start > [ ivxnutkx ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> had <<<<

> icw > start > [ had ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ ad ]

> icw > start > [ ad ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ d ]

> icw > start > [ d ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> aysulvk <<<<

> icw > start > [ aysulvk ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ ysulvk ]

> icw > start > [ ysulvk ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ sulvk ]

> icw > start > [ sulvk ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ ulvk ]

> icw > start > [ ulvk ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ lvk ]

> icw > start > [ lvk ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > split [ su ][ lvk ]

> icw > start > [ lvk ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> m <<<<

> icw > start > [ m ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> anhsyxli <<<<

> icw > start > [ anhsyxli ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ nhsyxli ]

> icw > start > [ nhsyxli ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ hsyxli ]

> icw > start > [ hsyxli ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ syxli ]

> icw > start > [ syxli ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ yxli ]

> icw > start > [ yxli ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ xli ]

> icw > start > [ xli ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ li ]

> icw > start > [ li ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 6 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jdkgfc <<<<

> icw > start > [ jdkgfc ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> potn <<<<

> icw > start > [ potn ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ otn ]

> icw > start > [ otn ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ tn ]

> icw > start > [ tn ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ n ]

> icw > start > [ n ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > split [ po ][ tn ]

> icw > start > [ tn ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ n ]

> icw > start > [ n ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lcibpxkidmwexp <<<<

> icw > start > [ lcibpxkidmwexp ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > p > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gwoxjicdkv <<<<

> icw > start > [ gwoxjicdkv ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ woxjicdkv ]

> icw > start > [ woxjicdkv ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ oxjicdkv ]

> icw > start > [ oxjicdkv ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ xjicdkv ]

> icw > start > [ xjicdkv ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ jicdkv ]

> icw > start > [ jicdkv ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tltienw <<<<

> icw > start > [ tltienw ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ ltienw ]

> icw > start > [ ltienw ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > split [ lt ][ ienw ]

> icw > start > [ ienw ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ngiutnuqbzi <<<<

> icw > start > [ ngiutnuqbzi ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ giutnuqbzi ]

> icw > start > [ giutnuqbzi ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ iutnuqbzi ]

> icw > start > [ iutnuqbzi ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ ng ][ iutnuqbzi ]

> icw > start > [ iutnuqbzi ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> o <<<<

> icw > start > [ o ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tzlyb <<<<

> icw > start > [ tzlyb ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ zlyb ]

> icw > start > [ zlyb ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vumnwehj <<<<

> icw > start > [ vumnwehj ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ umnwehj ]

> icw > start > [ umnwehj ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ mnwehj ]

> icw > start > [ mnwehj ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ nwehj ]

> icw > start > [ nwehj ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ wehj ]

> icw > start > [ wehj ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ ehj ]

> icw > start > [ ehj ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ hj ]

> icw > start > [ hj ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ j ]

> icw > start > [ j ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> os <<<<

> icw > start > [ os ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ s ]

> icw > start > [ s ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> np <<<<

> icw > start > [ np ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ p ]

> icw > start > [ p ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lhv <<<<

> icw > start > [ lhv ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> uzvgyeette <<<<

> icw > start > [ uzvgyeette ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ zvgyeette ]

> icw > start > [ zvgyeette ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > split [ uz ][ vgyeette ]

> icw > start > [ vgyeette ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ gyeette ]

> icw > start > [ gyeette ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ yeette ]

> icw > start > [ yeette ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ eette ]

> icw > start > [ eette ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ ette ]

> icw > start > [ ette ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ tte ]

> icw > start > [ tte ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ te ]

> icw > start > [ te ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ e ]

> icw > start > [ e ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > split [ ye ][ ette ]

> icw > start > [ ette ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ tte ]

> icw > start > [ tte ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ te ]

> icw > start > [ te ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ e ]

> icw > start > [ e ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > split [ vg ][ yeette ]

> icw > start > [ yeette ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ eette ]

> icw > start > [ eette ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ ette ]

> icw > start > [ ette ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ tte ]

> icw > start > [ tte ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ te ]

> icw > start > [ te ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ e ]

> icw > start > [ e ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > split [ ye ][ ette ]

> icw > start > [ ette ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ tte ]

> icw > start > [ tte ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ te ]

> icw > start > [ te ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ e ]

> icw > start > [ e ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ipfvr <<<<

> icw > start > [ ipfvr ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lpprjjalchhhcmh <<<<

> icw > start > [ lpprjjalchhhcmh ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > h > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> k <<<<

> icw > start > [ k ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pciulccqssaqgd <<<<

> icw > start > [ pciulccqssaqgd ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ ciulccqssaqgd ]

> icw > start > [ ciulccqssaqgd ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ iulccqssaqgd ]

> icw > start > [ iulccqssaqgd ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > q > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > g > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tp <<<<

> icw > start > [ tp ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ p ]

> icw > start > [ p ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> dmzdzveslyjad <<<<

> icw > start > [ dmzdzveslyjad ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ mzdzveslyjad ]

> icw > start > [ mzdzveslyjad ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ zdzveslyjad ]

> icw > start > [ zdzveslyjad ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > split [ zd ][ zveslyjad ]

> icw > start > [ zveslyjad ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 3 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 3 > [i] 4
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > a > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > d > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wtsbhgkd <<<<

> icw > start > [ wtsbhgkd ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ tsbhgkd ]

> icw > start > [ tsbhgkd ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ sbhgkd ]

> icw > start > [ sbhgkd ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ bhgkd ]

> icw > start > [ bhgkd ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ hgkd ]

> icw > start > [ hgkd ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ gkd ]

> icw > start > [ gkd ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ kd ]

> icw > start > [ kd ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ d ]

> icw > start > [ d ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> eouxbldsxzm <<<<

> icw > start > [ eouxbldsxzm ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ ouxbldsxzm ]

> icw > start > [ ouxbldsxzm ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ uxbldsxzm ]

> icw > start > [ uxbldsxzm ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ xbldsxzm ]

> icw > start > [ xbldsxzm ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ bldsxzm ]

> icw > start > [ bldsxzm ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ ldsxzm ]

> icw > start > [ ldsxzm ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > split [ eo ][ uxbldsxzm ]

> icw > start > [ uxbldsxzm ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ xbldsxzm ]

> icw > start > [ xbldsxzm ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ bldsxzm ]

> icw > start > [ bldsxzm ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ ldsxzm ]

> icw > start > [ ldsxzm ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vhtonlampljgzyve <<<<

> icw > start > [ vhtonlampljgzyve ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ htonlampljgzyve ]

> icw > start > [ htonlampljgzyve ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ tonlampljgzyve ]

> icw > start > [ tonlampljgzyve ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ onlampljgzyve ]

> icw > start > [ onlampljgzyve ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ nlampljgzyve ]

> icw > start > [ nlampljgzyve ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ lampljgzyve ]

> icw > start > [ lampljgzyve ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > g > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > z > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > v > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > e > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xhnlcrldtfthul <<<<

> icw > start > [ xhnlcrldtfthul ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ hnlcrldtfthul ]

> icw > start > [ hnlcrldtfthul ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ nlcrldtfthul ]

> icw > start > [ nlcrldtfthul ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ lcrldtfthul ]

> icw > start > [ lcrldtfthul ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > u > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xhflc <<<<

> icw > start > [ xhflc ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ hflc ]

> icw > start > [ hflc ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ flc ]

> icw > start > [ flc ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ lc ]

> icw > start > [ lc ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > split [ hfl ][ c ]

> icw > start > [ c ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 3 > c > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> upgei <<<<

> icw > start > [ upgei ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ pgei ]

> icw > start > [ pgei ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ gei ]

> icw > start > [ gei ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ ei ]

> icw > start > [ ei ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ i ]

> icw > start > [ i ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > split [ ge ][ i ]

> icw > start > [ i ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rlaks <<<<

> icw > start > [ rlaks ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ laks ]

> icw > start > [ laks ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yfqvnvtnqspyjbxr <<<<

> icw > start > [ yfqvnvtnqspyjbxr ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ fqvnvtnqspyjbxr ]

> icw > start > [ fqvnvtnqspyjbxr ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ qvnvtnqspyjbxr ]

> icw > start > [ qvnvtnqspyjbxr ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ vnvtnqspyjbxr ]

> icw > start > [ vnvtnqspyjbxr ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ nvtnqspyjbxr ]

> icw > start > [ nvtnqspyjbxr ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ vtnqspyjbxr ]

> icw > start > [ vtnqspyjbxr ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ tnqspyjbxr ]

> icw > start > [ tnqspyjbxr ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ nqspyjbxr ]

> icw > start > [ nqspyjbxr ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > split [ n ][ qspyjbxr ]

> icw > start > [ qspyjbxr ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > split [ q ][ spyjbxr ]

> icw > start > [ spyjbxr ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ pyjbxr ]

> icw > start > [ pyjbxr ] 10 <nil>
> icw > 0 > p > [wc] 10 > [i] 0
> icw > split [ p ][ yjbxr ]

> icw > start > [ yjbxr ] 11 <nil>
> icw > 0 > y > [wc] 11 > [i] 0
> icw > split [ y ][ jbxr ]

> icw > start > [ jbxr ] 12 <nil>
> icw > 0 > j > [wc] 12 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 12 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > split [ fq ][ vnvtnqspyjbxr ]

> icw > start > [ vnvtnqspyjbxr ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ nvtnqspyjbxr ]

> icw > start > [ nvtnqspyjbxr ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ vtnqspyjbxr ]

> icw > start > [ vtnqspyjbxr ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ tnqspyjbxr ]

> icw > start > [ tnqspyjbxr ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ nqspyjbxr ]

> icw > start > [ nqspyjbxr ] 6 <nil>
> icw > 0 > n > [wc] 6 > [i] 0
> icw > split [ n ][ qspyjbxr ]

> icw > start > [ qspyjbxr ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > split [ q ][ spyjbxr ]

> icw > start > [ spyjbxr ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > split [ s ][ pyjbxr ]

> icw > start > [ pyjbxr ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > split [ p ][ yjbxr ]

> icw > start > [ yjbxr ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ jbxr ]

> icw > start > [ jbxr ] 11 <nil>
> icw > 0 > j > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > b > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > x > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > r > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> phouoyhvls <<<<

> icw > start > [ phouoyhvls ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ houoyhvls ]

> icw > start > [ houoyhvls ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ ouoyhvls ]

> icw > start > [ ouoyhvls ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ uoyhvls ]

> icw > start > [ uoyhvls ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ oyhvls ]

> icw > start > [ oyhvls ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ yhvls ]

> icw > start > [ yhvls ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ hvls ]

> icw > start > [ hvls ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ vls ]

> icw > start > [ vls ] 7 <nil>
> icw > 0 > v > [wc] 7 > [i] 0
> icw > split [ v ][ ls ]

> icw > start > [ ls ] 8 <nil>
> icw > 0 > l > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 7 > [i] 1
> icw > split [ vl ][ s ]

> icw > start > [ s ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> voibuvbhhjcdflvl <<<<

> icw > start > [ voibuvbhhjcdflvl ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ oibuvbhhjcdflvl ]

> icw > start > [ oibuvbhhjcdflvl ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ ibuvbhhjcdflvl ]

> icw > start > [ ibuvbhhjcdflvl ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > d > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > v > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > l > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rgorfbjrofokggaf <<<<

> icw > start > [ rgorfbjrofokggaf ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ gorfbjrofokggaf ]

> icw > start > [ gorfbjrofokggaf ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ orfbjrofokggaf ]

> icw > start > [ orfbjrofokggaf ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ rfbjrofokggaf ]

> icw > start > [ rfbjrofokggaf ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ fbjrofokggaf ]

> icw > start > [ fbjrofokggaf ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ bjrofokggaf ]

> icw > start > [ bjrofokggaf ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ jrofokggaf ]

> icw > start > [ jrofokggaf ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > g > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > a > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > f > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dqhqats <<<<

> icw > start > [ dqhqats ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ qhqats ]

> icw > start > [ qhqats ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ hqats ]

> icw > start > [ hqats ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ qats ]

> icw > start > [ qats ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ ats ]

> icw > start > [ ats ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ ts ]

> icw > start > [ ts ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ s ]

> icw > start > [ s ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > split [ at ][ s ]

> icw > start > [ s ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > split [ qa ][ ts ]

> icw > start > [ ts ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ s ]

> icw > start > [ s ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zchpicyuawpovm <<<<

> icw > start > [ zchpicyuawpovm ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > v > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yzwfor <<<<

> icw > start > [ yzwfor ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ zwfor ]

> icw > start > [ zwfor ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> koat <<<<

> icw > start > [ koat ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ oat ]

> icw > start > [ oat ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ at ]

> icw > start > [ at ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ t ]

> icw > start > [ t ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > split [ oa ][ t ]

> icw > start > [ t ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> pybf <<<<

> icw > start > [ pybf ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ ybf ]

> icw > start > [ ybf ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ bf ]

> icw > start > [ bf ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ f ]

> icw > start > [ f ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fhdzsbiyjld <<<<

> icw > start > [ fhdzsbiyjld ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ hdzsbiyjld ]

> icw > start > [ hdzsbiyjld ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ dzsbiyjld ]

> icw > start > [ dzsbiyjld ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ zsbiyjld ]

> icw > start > [ zsbiyjld ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gznfnqydisn <<<<

> icw > start > [ gznfnqydisn ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ znfnqydisn ]

> icw > start > [ znfnqydisn ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xz <<<<

> icw > start > [ xz ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ z ]

> icw > start > [ z ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> po <<<<

> icw > start > [ po ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ o ]

> icw > start > [ o ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> tcjup <<<<

> icw > start > [ tcjup ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ cjup ]

> icw > start > [ cjup ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ jup ]

> icw > start > [ jup ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wygsnxk <<<<

> icw > start > [ wygsnxk ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ ygsnxk ]

> icw > start > [ ygsnxk ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ gsnxk ]

> icw > start > [ gsnxk ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ snxk ]

> icw > start > [ snxk ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ nxk ]

> icw > start > [ nxk ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ xk ]

> icw > start > [ xk ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ k ]

> icw > start > [ k ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > split [ nx ][ k ]

> icw > start > [ k ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> kqlima <<<<

> icw > start > [ kqlima ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ qlima ]

> icw > start > [ qlima ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ lima ]

> icw > start > [ lima ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > split [ lim ][ a ]

> icw > start > [ a ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 3 > a > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fgxnuohrnhg <<<<

> icw > start > [ fgxnuohrnhg ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ gxnuohrnhg ]

> icw > start > [ gxnuohrnhg ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ xnuohrnhg ]

> icw > start > [ xnuohrnhg ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ nuohrnhg ]

> icw > start > [ nuohrnhg ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ uohrnhg ]

> icw > start > [ uohrnhg ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ ohrnhg ]

> icw > start > [ ohrnhg ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ hrnhg ]

> icw > start > [ hrnhg ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ rnhg ]

> icw > start > [ rnhg ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ nhg ]

> icw > start > [ nhg ] 8 <nil>
> icw > 0 > n > [wc] 8 > [i] 0
> icw > split [ n ][ hg ]

> icw > start > [ hg ] 9 <nil>
> icw > 0 > h > [wc] 9 > [i] 0
> icw > split [ h ][ g ]

> icw > start > [ g ] 10 <nil>
> icw > 0 > g > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ fg ][ xnuohrnhg ]

> icw > start > [ xnuohrnhg ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ nuohrnhg ]

> icw > start > [ nuohrnhg ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ uohrnhg ]

> icw > start > [ uohrnhg ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ ohrnhg ]

> icw > start > [ ohrnhg ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ hrnhg ]

> icw > start > [ hrnhg ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ rnhg ]

> icw > start > [ rnhg ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ nhg ]

> icw > start > [ nhg ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > split [ n ][ hg ]

> icw > start > [ hg ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ g ]

> icw > start > [ g ] 9 <nil>
> icw > 0 > g > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> publurhztntgmimc <<<<

> icw > start > [ publurhztntgmimc ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ ublurhztntgmimc ]

> icw > start > [ ublurhztntgmimc ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ blurhztntgmimc ]

> icw > start > [ blurhztntgmimc ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ lurhztntgmimc ]

> icw > start > [ lurhztntgmimc ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > g > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > m > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > i > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > m > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > c > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zuufzphd <<<<

> icw > start > [ zuufzphd ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iucrmmmjqtcey <<<<

> icw > start > [ iucrmmmjqtcey ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > y > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wnnbq <<<<

> icw > start > [ wnnbq ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ nnbq ]

> icw > start > [ nnbq ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ nbq ]

> icw > start > [ nbq ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ bq ]

> icw > start > [ bq ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ q ]

> icw > start > [ q ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> rghzyz <<<<

> icw > start > [ rghzyz ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ ghzyz ]

> icw > start > [ ghzyz ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ hzyz ]

> icw > start > [ hzyz ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ zyz ]

> icw > start > [ zyz ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ukjqsjbmp <<<<

> icw > start > [ ukjqsjbmp ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ kjqsjbmp ]

> icw > start > [ kjqsjbmp ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ jqsjbmp ]

> icw > start > [ jqsjbmp ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mdtrgv <<<<

> icw > start > [ mdtrgv ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ dtrgv ]

> icw > start > [ dtrgv ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ trgv ]

> icw > start > [ trgv ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ rgv ]

> icw > start > [ rgv ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ gv ]

> icw > start > [ gv ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ v ]

> icw > start > [ v ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vyeikgjdnml <<<<

> icw > start > [ vyeikgjdnml ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ yeikgjdnml ]

> icw > start > [ yeikgjdnml ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ eikgjdnml ]

> icw > start > [ eikgjdnml ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ ikgjdnml ]

> icw > start > [ ikgjdnml ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > split [ ye ][ ikgjdnml ]

> icw > start > [ ikgjdnml ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kxwldnmi <<<<

> icw > start > [ kxwldnmi ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ xwldnmi ]

> icw > start > [ xwldnmi ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ wldnmi ]

> icw > start > [ wldnmi ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ ldnmi ]

> icw > start > [ ldnmi ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> apzuhsbssaxj <<<<

> icw > start > [ apzuhsbssaxj ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ pzuhsbssaxj ]

> icw > start > [ pzuhsbssaxj ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ zuhsbssaxj ]

> icw > start > [ zuhsbssaxj ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tkbkoljyodlipof <<<<

> icw > start > [ tkbkoljyodlipof ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ kbkoljyodlipof ]

> icw > start > [ kbkoljyodlipof ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ bkoljyodlipof ]

> icw > start > [ bkoljyodlipof ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ koljyodlipof ]

> icw > start > [ koljyodlipof ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ oljyodlipof ]

> icw > start > [ oljyodlipof ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ ljyodlipof ]

> icw > start > [ ljyodlipof ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > p > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > o > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > f > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nkq <<<<

> icw > start > [ nkq ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ kq ]

> icw > start > [ kq ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ q ]

> icw > start > [ q ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ktwtj <<<<

> icw > start > [ ktwtj ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ twtj ]

> icw > start > [ twtj ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ wtj ]

> icw > start > [ wtj ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ tj ]

> icw > start > [ tj ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ j ]

> icw > start > [ j ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vgmkgjwle <<<<

> icw > start > [ vgmkgjwle ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ gmkgjwle ]

> icw > start > [ gmkgjwle ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ mkgjwle ]

> icw > start > [ mkgjwle ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ kgjwle ]

> icw > start > [ kgjwle ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ gjwle ]

> icw > start > [ gjwle ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ jwle ]

> icw > start > [ jwle ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ vg ][ mkgjwle ]

> icw > start > [ mkgjwle ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ kgjwle ]

> icw > start > [ kgjwle ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ gjwle ]

> icw > start > [ gjwle ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ jwle ]

> icw > start > [ jwle ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> t <<<<

> icw > start > [ t ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> agylw <<<<

> icw > start > [ agylw ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ gylw ]

> icw > start > [ gylw ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ ylw ]

> icw > start > [ ylw ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ lw ]

> icw > start > [ lw ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vomtuy <<<<

> icw > start > [ vomtuy ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ omtuy ]

> icw > start > [ omtuy ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ mtuy ]

> icw > start > [ mtuy ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ tuy ]

> icw > start > [ tuy ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ uy ]

> icw > start > [ uy ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ y ]

> icw > start > [ y ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> jbtvitkqn <<<<

> icw > start > [ jbtvitkqn ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vtdxwrclpspcn <<<<

> icw > start > [ vtdxwrclpspcn ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ tdxwrclpspcn ]

> icw > start > [ tdxwrclpspcn ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ dxwrclpspcn ]

> icw > start > [ dxwrclpspcn ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ xwrclpspcn ]

> icw > start > [ xwrclpspcn ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ wrclpspcn ]

> icw > start > [ wrclpspcn ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ rclpspcn ]

> icw > start > [ rclpspcn ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ clpspcn ]

> icw > start > [ clpspcn ] 6 <nil>
> icw > 0 > c > [wc] 6 > [i] 0
> icw > split [ c ][ lpspcn ]

> icw > start > [ lpspcn ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > split [ wr ][ clpspcn ]

> icw > start > [ clpspcn ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ lpspcn ]

> icw > start > [ lpspcn ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > c > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rdrls <<<<

> icw > start > [ rdrls ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ drls ]

> icw > start > [ drls ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ rls ]

> icw > start > [ rls ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ ls ]

> icw > start > [ ls ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yxfeoh <<<<

> icw > start > [ yxfeoh ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ xfeoh ]

> icw > start > [ xfeoh ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ feoh ]

> icw > start > [ feoh ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ eoh ]

> icw > start > [ eoh ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ oh ]

> icw > start > [ oh ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ h ]

> icw > start > [ h ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > split [ eo ][ h ]

> icw > start > [ h ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> upj <<<<

> icw > start > [ upj ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ pj ]

> icw > start > [ pj ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ j ]

> icw > start > [ j ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> myctacn <<<<

> icw > start > [ myctacn ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ yctacn ]

> icw > start > [ yctacn ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ ctacn ]

> icw > start > [ ctacn ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ tacn ]

> icw > start > [ tacn ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ acn ]

> icw > start > [ acn ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ cn ]

> icw > start > [ cn ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ n ]

> icw > start > [ n ] 6 <nil>
> icw > 0 > n > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > split [ ta ][ cn ]

> icw > start > [ cn ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ n ]

> icw > start > [ n ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fdnor <<<<

> icw > start > [ fdnor ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ dnor ]

> icw > start > [ dnor ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ nor ]

> icw > start > [ nor ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ or ]

> icw > start > [ or ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ r ]

> icw > start > [ r ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > split [ fd ][ nor ]

> icw > start > [ nor ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ or ]

> icw > start > [ or ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ r ]

> icw > start > [ r ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ahqghzhoqprgkym <<<<

> icw > start > [ ahqghzhoqprgkym ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ hqghzhoqprgkym ]

> icw > start > [ hqghzhoqprgkym ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ qghzhoqprgkym ]

> icw > start > [ qghzhoqprgkym ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ ghzhoqprgkym ]

> icw > start > [ ghzhoqprgkym ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ hzhoqprgkym ]

> icw > start > [ hzhoqprgkym ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ zhoqprgkym ]

> icw > start > [ zhoqprgkym ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > g > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > k > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > m > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> phiuvdv <<<<

> icw > start > [ phiuvdv ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ hiuvdv ]

> icw > start > [ hiuvdv ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ iuvdv ]

> icw > start > [ iuvdv ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jp <<<<

> icw > start > [ jp ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fdgpouzjwbq <<<<

> icw > start > [ fdgpouzjwbq ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ dgpouzjwbq ]

> icw > start > [ dgpouzjwbq ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ gpouzjwbq ]

> icw > start > [ gpouzjwbq ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ pouzjwbq ]

> icw > start > [ pouzjwbq ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ ouzjwbq ]

> icw > start > [ ouzjwbq ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ uzjwbq ]

> icw > start > [ uzjwbq ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ zjwbq ]

> icw > start > [ zjwbq ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > split [ uz ][ jwbq ]

> icw > start > [ jwbq ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > split [ po ][ uzjwbq ]

> icw > start > [ uzjwbq ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ zjwbq ]

> icw > start > [ zjwbq ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > split [ uz ][ jwbq ]

> icw > start > [ jwbq ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > split [ fd ][ gpouzjwbq ]

> icw > start > [ gpouzjwbq ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ pouzjwbq ]

> icw > start > [ pouzjwbq ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ ouzjwbq ]

> icw > start > [ ouzjwbq ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ uzjwbq ]

> icw > start > [ uzjwbq ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ zjwbq ]

> icw > start > [ zjwbq ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > split [ uz ][ jwbq ]

> icw > start > [ jwbq ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > split [ po ][ uzjwbq ]

> icw > start > [ uzjwbq ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ zjwbq ]

> icw > start > [ zjwbq ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > split [ uz ][ jwbq ]

> icw > start > [ jwbq ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hqoyefmugjvewhxu <<<<

> icw > start > [ hqoyefmugjvewhxu ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ qoyefmugjvewhxu ]

> icw > start > [ qoyefmugjvewhxu ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ oyefmugjvewhxu ]

> icw > start > [ oyefmugjvewhxu ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ yefmugjvewhxu ]

> icw > start > [ yefmugjvewhxu ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ efmugjvewhxu ]

> icw > start > [ efmugjvewhxu ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ fmugjvewhxu ]

> icw > start > [ fmugjvewhxu ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ mugjvewhxu ]

> icw > start > [ mugjvewhxu ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ ugjvewhxu ]

> icw > start > [ ugjvewhxu ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ gjvewhxu ]

> icw > start > [ gjvewhxu ] 8 <nil>
> icw > 0 > g > [wc] 8 > [i] 0
> icw > split [ g ][ jvewhxu ]

> icw > start > [ jvewhxu ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > split [ ye ][ fmugjvewhxu ]

> icw > start > [ fmugjvewhxu ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ mugjvewhxu ]

> icw > start > [ mugjvewhxu ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ ugjvewhxu ]

> icw > start > [ ugjvewhxu ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ gjvewhxu ]

> icw > start > [ gjvewhxu ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ jvewhxu ]

> icw > start > [ jvewhxu ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > h > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > x > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > u > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qfzwuwe <<<<

> icw > start > [ qfzwuwe ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ fzwuwe ]

> icw > start > [ fzwuwe ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ zwuwe ]

> icw > start > [ zwuwe ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > split [ fz ][ wuwe ]

> icw > start > [ wuwe ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ uwe ]

> icw > start > [ uwe ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ we ]

> icw > start > [ we ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ e ]

> icw > start > [ e ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fnsbijkeepyxry <<<<

> icw > start > [ fnsbijkeepyxry ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ nsbijkeepyxry ]

> icw > start > [ nsbijkeepyxry ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ sbijkeepyxry ]

> icw > start > [ sbijkeepyxry ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ bijkeepyxry ]

> icw > start > [ bijkeepyxry ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ ijkeepyxry ]

> icw > start > [ ijkeepyxry ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > r > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> oja <<<<

> icw > start > [ oja ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ ja ]

> icw > start > [ ja ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qthkcij <<<<

> icw > start > [ qthkcij ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ thkcij ]

> icw > start > [ thkcij ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ hkcij ]

> icw > start > [ hkcij ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ kcij ]

> icw > start > [ kcij ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ cij ]

> icw > start > [ cij ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ ij ]

> icw > start > [ ij ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zpmqfbmnr <<<<

> icw > start > [ zpmqfbmnr ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ybaibmzonzqlnmd <<<<

> icw > start > [ ybaibmzonzqlnmd ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ baibmzonzqlnmd ]

> icw > start > [ baibmzonzqlnmd ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ aibmzonzqlnmd ]

> icw > start > [ aibmzonzqlnmd ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ ibmzonzqlnmd ]

> icw > start > [ ibmzonzqlnmd ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > d > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> svo <<<<

> icw > start > [ svo ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ vo ]

> icw > start > [ vo ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ o ]

> icw > start > [ o ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> gjftyfehik <<<<

> icw > start > [ gjftyfehik ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ jftyfehik ]

> icw > start > [ jftyfehik ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > split [ jf ][ tyfehik ]

> icw > start > [ tyfehik ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ yfehik ]

> icw > start > [ yfehik ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ fehik ]

> icw > start > [ fehik ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ ehik ]

> icw > start > [ ehik ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ hik ]

> icw > start > [ hik ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ ik ]

> icw > start > [ ik ] 7 <nil>
> icw > 0 > i > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jfrfgznuaytvaegm <<<<

> icw > start > [ jfrfgznuaytvaegm ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > split [ jf ][ rfgznuaytvaegm ]

> icw > start > [ rfgznuaytvaegm ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ fgznuaytvaegm ]

> icw > start > [ fgznuaytvaegm ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ gznuaytvaegm ]

> icw > start > [ gznuaytvaegm ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ znuaytvaegm ]

> icw > start > [ znuaytvaegm ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > split [ fg ][ znuaytvaegm ]

> icw > start > [ znuaytvaegm ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > v > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > a > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > g > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > m > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> aljhrx <<<<

> icw > start > [ aljhrx ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ ljhrx ]

> icw > start > [ ljhrx ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> odjq <<<<

> icw > start > [ odjq ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ djq ]

> icw > start > [ djq ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ jq ]

> icw > start > [ jq ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ogwaxrssjxgvnka <<<<

> icw > start > [ ogwaxrssjxgvnka ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ gwaxrssjxgvnka ]

> icw > start > [ gwaxrssjxgvnka ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ waxrssjxgvnka ]

> icw > start > [ waxrssjxgvnka ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ axrssjxgvnka ]

> icw > start > [ axrssjxgvnka ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ xrssjxgvnka ]

> icw > start > [ xrssjxgvnka ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ rssjxgvnka ]

> icw > start > [ rssjxgvnka ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ ssjxgvnka ]

> icw > start > [ ssjxgvnka ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > split [ s ][ sjxgvnka ]

> icw > start > [ sjxgvnka ] 7 <nil>
> icw > 0 > s > [wc] 7 > [i] 0
> icw > split [ s ][ jxgvnka ]

> icw > start > [ jxgvnka ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 6 > [i] 1
> icw > split [ ss ][ jxgvnka ]

> icw > start > [ jxgvnka ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > split [ ax ][ rssjxgvnka ]

> icw > start > [ rssjxgvnka ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ ssjxgvnka ]

> icw > start > [ ssjxgvnka ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ sjxgvnka ]

> icw > start > [ sjxgvnka ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > split [ s ][ jxgvnka ]

> icw > start > [ jxgvnka ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > split [ ss ][ jxgvnka ]

> icw > start > [ jxgvnka ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > v > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > k > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > a > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zaqswwofedxj <<<<

> icw > start > [ zaqswwofedxj ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lugpktauixp <<<<

> icw > start > [ lugpktauixp ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dc <<<<

> icw > start > [ dc ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ c ]

> icw > start > [ c ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> odknlbvxrs <<<<

> icw > start > [ odknlbvxrs ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ dknlbvxrs ]

> icw > start > [ dknlbvxrs ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ knlbvxrs ]

> icw > start > [ knlbvxrs ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ nlbvxrs ]

> icw > start > [ nlbvxrs ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ lbvxrs ]

> icw > start > [ lbvxrs ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jeobu <<<<

> icw > start > [ jeobu ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vqythyvzxbcgrlbg <<<<

> icw > start > [ vqythyvzxbcgrlbg ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ qythyvzxbcgrlbg ]

> icw > start > [ qythyvzxbcgrlbg ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ ythyvzxbcgrlbg ]

> icw > start > [ ythyvzxbcgrlbg ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ thyvzxbcgrlbg ]

> icw > start > [ thyvzxbcgrlbg ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ hyvzxbcgrlbg ]

> icw > start > [ hyvzxbcgrlbg ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ yvzxbcgrlbg ]

> icw > start > [ yvzxbcgrlbg ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ vzxbcgrlbg ]

> icw > start > [ vzxbcgrlbg ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ zxbcgrlbg ]

> icw > start > [ zxbcgrlbg ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > g > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > r > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > b > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > g > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hwc <<<<

> icw > start > [ hwc ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ wc ]

> icw > start > [ wc ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ c ]

> icw > start > [ c ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> erpbaxq <<<<

> icw > start > [ erpbaxq ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ rpbaxq ]

> icw > start > [ rpbaxq ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ pbaxq ]

> icw > start > [ pbaxq ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ baxq ]

> icw > start > [ baxq ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ axq ]

> icw > start > [ axq ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ xq ]

> icw > start > [ xq ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ q ]

> icw > start > [ q ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > split [ ax ][ q ]

> icw > start > [ q ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ujxcxck <<<<

> icw > start > [ ujxcxck ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ jxcxck ]

> icw > start > [ jxcxck ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rrklkb <<<<

> icw > start > [ rrklkb ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ rklkb ]

> icw > start > [ rklkb ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ klkb ]

> icw > start > [ klkb ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ lkb ]

> icw > start > [ lkb ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wlrwyuy <<<<

> icw > start > [ wlrwyuy ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ lrwyuy ]

> icw > start > [ lrwyuy ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zmg <<<<

> icw > start > [ zmg ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yyhga <<<<

> icw > start > [ yyhga ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ yhga ]

> icw > start > [ yhga ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ hga ]

> icw > start > [ hga ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ ga ]

> icw > start > [ ga ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ a ]

> icw > start > [ a ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> xwdbycdu <<<<

> icw > start > [ xwdbycdu ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ wdbycdu ]

> icw > start > [ wdbycdu ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ dbycdu ]

> icw > start > [ dbycdu ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ bycdu ]

> icw > start > [ bycdu ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ ycdu ]

> icw > start > [ ycdu ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ cdu ]

> icw > start > [ cdu ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ du ]

> icw > start > [ du ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ u ]

> icw > start > [ u ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > split [ wd ][ bycdu ]

> icw > start > [ bycdu ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ ycdu ]

> icw > start > [ ycdu ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ cdu ]

> icw > start > [ cdu ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ du ]

> icw > start > [ du ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ u ]

> icw > start > [ u ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> htedgvsrhchox <<<<

> icw > start > [ htedgvsrhchox ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ tedgvsrhchox ]

> icw > start > [ tedgvsrhchox ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ edgvsrhchox ]

> icw > start > [ edgvsrhchox ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ dgvsrhchox ]

> icw > start > [ dgvsrhchox ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ gvsrhchox ]

> icw > start > [ gvsrhchox ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ vsrhchox ]

> icw > start > [ vsrhchox ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ srhchox ]

> icw > start > [ srhchox ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > split [ s ][ rhchox ]

> icw > start > [ rhchox ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ hchox ]

> icw > start > [ hchox ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ chox ]

> icw > start > [ chox ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > split [ c ][ hox ]

> icw > start > [ hox ] 10 <nil>
> icw > 0 > h > [wc] 10 > [i] 0
> icw > split [ h ][ ox ]

> icw > start > [ ox ] 11 <nil>
> icw > 0 > o > [wc] 11 > [i] 0
> icw > split [ o ][ x ]

> icw > start > [ x ] 12 <nil>
> icw > 0 > x > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wr <<<<

> icw > start > [ wr ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ r ]

> icw > start > [ r ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> suhesetv <<<<

> icw > start > [ suhesetv ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ uhesetv ]

> icw > start > [ uhesetv ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ hesetv ]

> icw > start > [ hesetv ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ esetv ]

> icw > start > [ esetv ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ setv ]

> icw > start > [ setv ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ etv ]

> icw > start > [ etv ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ tv ]

> icw > start > [ tv ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ v ]

> icw > start > [ v ] 7 <nil>
> icw > 0 > v > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > split [ su ][ hesetv ]

> icw > start > [ hesetv ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ esetv ]

> icw > start > [ esetv ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ setv ]

> icw > start > [ setv ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ etv ]

> icw > start > [ etv ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ tv ]

> icw > start > [ tv ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ v ]

> icw > start > [ v ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> jonqwhkwezjvjgg <<<<

> icw > start > [ jonqwhkwezjvjgg ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > v > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > g > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> sqqyrxtjkcalswq <<<<

> icw > start > [ sqqyrxtjkcalswq ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ qqyrxtjkcalswq ]

> icw > start > [ qqyrxtjkcalswq ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ qyrxtjkcalswq ]

> icw > start > [ qyrxtjkcalswq ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ yrxtjkcalswq ]

> icw > start > [ yrxtjkcalswq ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ rxtjkcalswq ]

> icw > start > [ rxtjkcalswq ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ xtjkcalswq ]

> icw > start > [ xtjkcalswq ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ tjkcalswq ]

> icw > start > [ tjkcalswq ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ jkcalswq ]

> icw > start > [ jkcalswq ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > s > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > w > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > q > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hvyimhe <<<<

> icw > start > [ hvyimhe ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ vyimhe ]

> icw > start > [ vyimhe ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ yimhe ]

> icw > start > [ yimhe ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ imhe ]

> icw > start > [ imhe ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pjzdkmoue <<<<

> icw > start > [ pjzdkmoue ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ jzdkmoue ]

> icw > start > [ jzdkmoue ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zbphmgoxq <<<<

> icw > start > [ zbphmgoxq ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lbdlcumdgixjbcq <<<<

> icw > start > [ lbdlcumdgixjbcq ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > b > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > c > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > q > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ztzdjqmadthtdmv <<<<

> icw > start > [ ztzdjqmadthtdmv ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > d > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > v > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qcagsyqggcf <<<<

> icw > start > [ qcagsyqggcf ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ cagsyqggcf ]

> icw > start > [ cagsyqggcf ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ agsyqggcf ]

> icw > start > [ agsyqggcf ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ gsyqggcf ]

> icw > start > [ gsyqggcf ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ syqggcf ]

> icw > start > [ syqggcf ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ yqggcf ]

> icw > start > [ yqggcf ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ qggcf ]

> icw > start > [ qggcf ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ ggcf ]

> icw > start > [ ggcf ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ gcf ]

> icw > start > [ gcf ] 8 <nil>
> icw > 0 > g > [wc] 8 > [i] 0
> icw > split [ g ][ cf ]

> icw > start > [ cf ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > split [ c ][ f ]

> icw > start > [ f ] 10 <nil>
> icw > 0 > f > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> if <<<<

> icw > start > [ if ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jpjxcjyi <<<<

> icw > start > [ jpjxcjyi ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > split [ jp ][ jxcjyi ]

> icw > start > [ jxcjyi ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> chyicqibxdgkqtg <<<<

> icw > start > [ chyicqibxdgkqtg ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ hyicqibxdgkqtg ]

> icw > start > [ hyicqibxdgkqtg ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ yicqibxdgkqtg ]

> icw > start > [ yicqibxdgkqtg ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ icqibxdgkqtg ]

> icw > start > [ icqibxdgkqtg ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > t > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > g > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iwpdklhum <<<<

> icw > start > [ iwpdklhum ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wljmg <<<<

> icw > start > [ wljmg ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ ljmg ]

> icw > start > [ ljmg ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> micmun <<<<

> icw > start > [ micmun ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ icmun ]

> icw > start > [ icmun ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> npdbamofynykqv <<<<

> icw > start > [ npdbamofynykqv ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ pdbamofynykqv ]

> icw > start > [ pdbamofynykqv ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ dbamofynykqv ]

> icw > start > [ dbamofynykqv ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ bamofynykqv ]

> icw > start > [ bamofynykqv ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ amofynykqv ]

> icw > start > [ amofynykqv ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ mofynykqv ]

> icw > start > [ mofynykqv ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ ofynykqv ]

> icw > start > [ ofynykqv ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ fynykqv ]

> icw > start > [ fynykqv ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ ynykqv ]

> icw > start > [ ynykqv ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ nykqv ]

> icw > start > [ nykqv ] 9 <nil>
> icw > 0 > n > [wc] 9 > [i] 0
> icw > split [ n ][ ykqv ]

> icw > start > [ ykqv ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ kqv ]

> icw > start > [ kqv ] 11 <nil>
> icw > 0 > k > [wc] 11 > [i] 0
> icw > split [ k ][ qv ]

> icw > start > [ qv ] 12 <nil>
> icw > 0 > q > [wc] 12 > [i] 0
> icw > split [ q ][ v ]

> icw > start > [ v ] 13 <nil>
> icw > 0 > v > [wc] 13 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > split [ np ][ dbamofynykqv ]

> icw > start > [ dbamofynykqv ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ bamofynykqv ]

> icw > start > [ bamofynykqv ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ amofynykqv ]

> icw > start > [ amofynykqv ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ mofynykqv ]

> icw > start > [ mofynykqv ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ ofynykqv ]

> icw > start > [ ofynykqv ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ fynykqv ]

> icw > start > [ fynykqv ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ ynykqv ]

> icw > start > [ ynykqv ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ nykqv ]

> icw > start > [ nykqv ] 8 <nil>
> icw > 0 > n > [wc] 8 > [i] 0
> icw > split [ n ][ ykqv ]

> icw > start > [ ykqv ] 9 <nil>
> icw > 0 > y > [wc] 9 > [i] 0
> icw > split [ y ][ kqv ]

> icw > start > [ kqv ] 10 <nil>
> icw > 0 > k > [wc] 10 > [i] 0
> icw > split [ k ][ qv ]

> icw > start > [ qv ] 11 <nil>
> icw > 0 > q > [wc] 11 > [i] 0
> icw > split [ q ][ v ]

> icw > start > [ v ] 12 <nil>
> icw > 0 > v > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > v > [wc] 0 > [i] 13
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ijsnfkpfy <<<<

> icw > start > [ ijsnfkpfy ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lmq <<<<

> icw > start > [ lmq ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> oyjmeqvhcrvgm <<<<

> icw > start > [ oyjmeqvhcrvgm ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ yjmeqvhcrvgm ]

> icw > start > [ yjmeqvhcrvgm ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ jmeqvhcrvgm ]

> icw > start > [ jmeqvhcrvgm ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > g > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > m > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mqopusqktdthpvz <<<<

> icw > start > [ mqopusqktdthpvz ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ qopusqktdthpvz ]

> icw > start > [ qopusqktdthpvz ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ opusqktdthpvz ]

> icw > start > [ opusqktdthpvz ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ pusqktdthpvz ]

> icw > start > [ pusqktdthpvz ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ usqktdthpvz ]

> icw > start > [ usqktdthpvz ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ sqktdthpvz ]

> icw > start > [ sqktdthpvz ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ qktdthpvz ]

> icw > start > [ qktdthpvz ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ ktdthpvz ]

> icw > start > [ ktdthpvz ] 7 <nil>
> icw > 0 > k > [wc] 7 > [i] 0
> icw > split [ k ][ tdthpvz ]

> icw > start > [ tdthpvz ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ dthpvz ]

> icw > start > [ dthpvz ] 9 <nil>
> icw > 0 > d > [wc] 9 > [i] 0
> icw > split [ d ][ thpvz ]

> icw > start > [ thpvz ] 10 <nil>
> icw > 0 > t > [wc] 10 > [i] 0
> icw > split [ t ][ hpvz ]

> icw > start > [ hpvz ] 11 <nil>
> icw > 0 > h > [wc] 11 > [i] 0
> icw > split [ h ][ pvz ]

> icw > start > [ pvz ] 12 <nil>
> icw > 0 > p > [wc] 12 > [i] 0
> icw > split [ p ][ vz ]

> icw > start > [ vz ] 13 <nil>
> icw > 0 > v > [wc] 13 > [i] 0
> icw > split [ v ][ z ]

> icw > start > [ z ] 14 <nil>
> icw > 0 > z > [wc] 14 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 13 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 12 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > p > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > v > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > z > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fz <<<<

> icw > start > [ fz ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ z ]

> icw > start > [ z ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> r <<<<

> icw > start > [ r ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qbsqtipq <<<<

> icw > start > [ qbsqtipq ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ bsqtipq ]

> icw > start > [ bsqtipq ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ sqtipq ]

> icw > start > [ sqtipq ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ qtipq ]

> icw > start > [ qtipq ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ tipq ]

> icw > start > [ tipq ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ ipq ]

> icw > start > [ ipq ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nxtsnason <<<<

> icw > start > [ nxtsnason ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ xtsnason ]

> icw > start > [ xtsnason ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ tsnason ]

> icw > start > [ tsnason ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ snason ]

> icw > start > [ snason ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ nason ]

> icw > start > [ nason ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ ason ]

> icw > start > [ ason ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ son ]

> icw > start > [ son ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > split [ s ][ on ]

> icw > start > [ on ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ n ]

> icw > start > [ n ] 8 <nil>
> icw > 0 > n > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 7 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > split [ nx ][ tsnason ]

> icw > start > [ tsnason ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ snason ]

> icw > start > [ snason ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ nason ]

> icw > start > [ nason ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ ason ]

> icw > start > [ ason ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ son ]

> icw > start > [ son ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ on ]

> icw > start > [ on ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ n ]

> icw > start > [ n ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> xbpipyhh <<<<

> icw > start > [ xbpipyhh ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ bpipyhh ]

> icw > start > [ bpipyhh ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ pipyhh ]

> icw > start > [ pipyhh ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ ipyhh ]

> icw > start > [ ipyhh ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> topsuqomfjrd <<<<

> icw > start > [ topsuqomfjrd ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ opsuqomfjrd ]

> icw > start > [ opsuqomfjrd ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ psuqomfjrd ]

> icw > start > [ psuqomfjrd ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ suqomfjrd ]

> icw > start > [ suqomfjrd ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ uqomfjrd ]

> icw > start > [ uqomfjrd ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ qomfjrd ]

> icw > start > [ qomfjrd ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ omfjrd ]

> icw > start > [ omfjrd ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ mfjrd ]

> icw > start > [ mfjrd ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > split [ m ][ fjrd ]

> icw > start > [ fjrd ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ jrd ]

> icw > start > [ jrd ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > split [ mf ][ jrd ]

> icw > start > [ jrd ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > split [ su ][ qomfjrd ]

> icw > start > [ qomfjrd ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ omfjrd ]

> icw > start > [ omfjrd ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ mfjrd ]

> icw > start > [ mfjrd ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ fjrd ]

> icw > start > [ fjrd ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ jrd ]

> icw > start > [ jrd ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > split [ mf ][ jrd ]

> icw > start > [ jrd ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > d > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> islif <<<<

> icw > start > [ islif ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gbndakaq <<<<

> icw > start > [ gbndakaq ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ bndakaq ]

> icw > start > [ bndakaq ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ ndakaq ]

> icw > start > [ ndakaq ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ dakaq ]

> icw > start > [ dakaq ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ akaq ]

> icw > start > [ akaq ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ kaq ]

> icw > start > [ kaq ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ aq ]

> icw > start > [ aq ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ q ]

> icw > start > [ q ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> bwnkxnwpzeoohlx <<<<

> icw > start > [ bwnkxnwpzeoohlx ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ wnkxnwpzeoohlx ]

> icw > start > [ wnkxnwpzeoohlx ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ nkxnwpzeoohlx ]

> icw > start > [ nkxnwpzeoohlx ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ kxnwpzeoohlx ]

> icw > start > [ kxnwpzeoohlx ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ xnwpzeoohlx ]

> icw > start > [ xnwpzeoohlx ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ nwpzeoohlx ]

> icw > start > [ nwpzeoohlx ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ wpzeoohlx ]

> icw > start > [ wpzeoohlx ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > split [ w ][ pzeoohlx ]

> icw > start > [ pzeoohlx ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ zeoohlx ]

> icw > start > [ zeoohlx ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > h > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > x > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hrtbfnq <<<<

> icw > start > [ hrtbfnq ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ rtbfnq ]

> icw > start > [ rtbfnq ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ tbfnq ]

> icw > start > [ tbfnq ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ bfnq ]

> icw > start > [ bfnq ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ fnq ]

> icw > start > [ fnq ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ nq ]

> icw > start > [ nq ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ q ]

> icw > start > [ q ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fguvomeepxoffg <<<<

> icw > start > [ fguvomeepxoffg ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ guvomeepxoffg ]

> icw > start > [ guvomeepxoffg ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ uvomeepxoffg ]

> icw > start > [ uvomeepxoffg ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ vomeepxoffg ]

> icw > start > [ vomeepxoffg ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ omeepxoffg ]

> icw > start > [ omeepxoffg ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ meepxoffg ]

> icw > start > [ meepxoffg ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ eepxoffg ]

> icw > start > [ eepxoffg ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > split [ e ][ epxoffg ]

> icw > start > [ epxoffg ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ pxoffg ]

> icw > start > [ pxoffg ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ xoffg ]

> icw > start > [ xoffg ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ offg ]

> icw > start > [ offg ] 10 <nil>
> icw > 0 > o > [wc] 10 > [i] 0
> icw > split [ o ][ ffg ]

> icw > start > [ ffg ] 11 <nil>
> icw > 0 > f > [wc] 11 > [i] 0
> icw > split [ f ][ fg ]

> icw > start > [ fg ] 12 <nil>
> icw > 0 > f > [wc] 12 > [i] 0
> icw > split [ f ][ g ]

> icw > start > [ g ] 13 <nil>
> icw > 0 > g > [wc] 13 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 12 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ fg ][ uvomeepxoffg ]

> icw > start > [ uvomeepxoffg ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ vomeepxoffg ]

> icw > start > [ vomeepxoffg ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ omeepxoffg ]

> icw > start > [ omeepxoffg ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ meepxoffg ]

> icw > start > [ meepxoffg ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ eepxoffg ]

> icw > start > [ eepxoffg ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ epxoffg ]

> icw > start > [ epxoffg ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > split [ e ][ pxoffg ]

> icw > start > [ pxoffg ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ xoffg ]

> icw > start > [ xoffg ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ offg ]

> icw > start > [ offg ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > split [ o ][ ffg ]

> icw > start > [ ffg ] 10 <nil>
> icw > 0 > f > [wc] 10 > [i] 0
> icw > split [ f ][ fg ]

> icw > start > [ fg ] 11 <nil>
> icw > 0 > f > [wc] 11 > [i] 0
> icw > split [ f ][ g ]

> icw > start > [ g ] 12 <nil>
> icw > 0 > g > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> mat <<<<

> icw > start > [ mat ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ at ]

> icw > start > [ at ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ t ]

> icw > start > [ t ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> dzfpfnwbfuj <<<<

> icw > start > [ dzfpfnwbfuj ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ zfpfnwbfuj ]

> icw > start > [ zfpfnwbfuj ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> onlvy <<<<

> icw > start > [ onlvy ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ nlvy ]

> icw > start > [ nlvy ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ lvy ]

> icw > start > [ lvy ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cwcchvsasdylb <<<<

> icw > start > [ cwcchvsasdylb ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ wcchvsasdylb ]

> icw > start > [ wcchvsasdylb ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ cchvsasdylb ]

> icw > start > [ cchvsasdylb ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ chvsasdylb ]

> icw > start > [ chvsasdylb ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ hvsasdylb ]

> icw > start > [ hvsasdylb ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ vsasdylb ]

> icw > start > [ vsasdylb ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ sasdylb ]

> icw > start > [ sasdylb ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > split [ s ][ asdylb ]

> icw > start > [ asdylb ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ sdylb ]

> icw > start > [ sdylb ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > split [ s ][ dylb ]

> icw > start > [ dylb ] 9 <nil>
> icw > 0 > d > [wc] 9 > [i] 0
> icw > split [ d ][ ylb ]

> icw > start > [ ylb ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ lb ]

> icw > start > [ lb ] 11 <nil>
> icw > 0 > l > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 11 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > split [ cw ][ cchvsasdylb ]

> icw > start > [ cchvsasdylb ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ chvsasdylb ]

> icw > start > [ chvsasdylb ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ hvsasdylb ]

> icw > start > [ hvsasdylb ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ vsasdylb ]

> icw > start > [ vsasdylb ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ sasdylb ]

> icw > start > [ sasdylb ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ asdylb ]

> icw > start > [ asdylb ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ sdylb ]

> icw > start > [ sdylb ] 7 <nil>
> icw > 0 > s > [wc] 7 > [i] 0
> icw > split [ s ][ dylb ]

> icw > start > [ dylb ] 8 <nil>
> icw > 0 > d > [wc] 8 > [i] 0
> icw > split [ d ][ ylb ]

> icw > start > [ ylb ] 9 <nil>
> icw > 0 > y > [wc] 9 > [i] 0
> icw > split [ y ][ lb ]

> icw > start > [ lb ] 10 <nil>
> icw > 0 > l > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 10 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > b > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rxfcztzqopdi <<<<

> icw > start > [ rxfcztzqopdi ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ xfcztzqopdi ]

> icw > start > [ xfcztzqopdi ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ fcztzqopdi ]

> icw > start > [ fcztzqopdi ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ cztzqopdi ]

> icw > start > [ cztzqopdi ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ ztzqopdi ]

> icw > start > [ ztzqopdi ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ybrhodjn <<<<

> icw > start > [ ybrhodjn ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ brhodjn ]

> icw > start > [ brhodjn ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ rhodjn ]

> icw > start > [ rhodjn ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ hodjn ]

> icw > start > [ hodjn ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ odjn ]

> icw > start > [ odjn ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ djn ]

> icw > start > [ djn ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ jn ]

> icw > start > [ jn ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > split [ br ][ hodjn ]

> icw > start > [ hodjn ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ odjn ]

> icw > start > [ odjn ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ djn ]

> icw > start > [ djn ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ jn ]

> icw > start > [ jn ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> oqkijy <<<<

> icw > start > [ oqkijy ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ qkijy ]

> icw > start > [ qkijy ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ kijy ]

> icw > start > [ kijy ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ ijy ]

> icw > start > [ ijy ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ncvrjo <<<<

> icw > start > [ ncvrjo ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ cvrjo ]

> icw > start > [ cvrjo ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ vrjo ]

> icw > start > [ vrjo ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ rjo ]

> icw > start > [ rjo ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ jo ]

> icw > start > [ jo ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dphbfaal <<<<

> icw > start > [ dphbfaal ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ phbfaal ]

> icw > start > [ phbfaal ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ hbfaal ]

> icw > start > [ hbfaal ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ bfaal ]

> icw > start > [ bfaal ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ faal ]

> icw > start > [ faal ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ aal ]

> icw > start > [ aal ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ al ]

> icw > start > [ al ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ l ]

> icw > start > [ l ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > split [ aa ][ l ]

> icw > start > [ l ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xgtpdtkz <<<<

> icw > start > [ xgtpdtkz ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ gtpdtkz ]

> icw > start > [ gtpdtkz ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ tpdtkz ]

> icw > start > [ tpdtkz ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ pdtkz ]

> icw > start > [ pdtkz ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ dtkz ]

> icw > start > [ dtkz ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ tkz ]

> icw > start > [ tkz ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ kz ]

> icw > start > [ kz ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ z ]

> icw > start > [ z ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 5 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > split [ tp ][ dtkz ]

> icw > start > [ dtkz ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ tkz ]

> icw > start > [ tkz ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ kz ]

> icw > start > [ kz ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ z ]

> icw > start > [ z ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> sebevsopjvciwljf <<<<

> icw > start > [ sebevsopjvciwljf ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ ebevsopjvciwljf ]

> icw > start > [ ebevsopjvciwljf ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ bevsopjvciwljf ]

> icw > start > [ bevsopjvciwljf ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ evsopjvciwljf ]

> icw > start > [ evsopjvciwljf ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ vsopjvciwljf ]

> icw > start > [ vsopjvciwljf ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ sopjvciwljf ]

> icw > start > [ sopjvciwljf ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ opjvciwljf ]

> icw > start > [ opjvciwljf ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ pjvciwljf ]

> icw > start > [ pjvciwljf ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ jvciwljf ]

> icw > start > [ jvciwljf ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > f > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rcumyacqdapwczen <<<<

> icw > start > [ rcumyacqdapwczen ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ cumyacqdapwczen ]

> icw > start > [ cumyacqdapwczen ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ umyacqdapwczen ]

> icw > start > [ umyacqdapwczen ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ myacqdapwczen ]

> icw > start > [ myacqdapwczen ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ yacqdapwczen ]

> icw > start > [ yacqdapwczen ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ acqdapwczen ]

> icw > start > [ acqdapwczen ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ cqdapwczen ]

> icw > start > [ cqdapwczen ] 6 <nil>
> icw > 0 > c > [wc] 6 > [i] 0
> icw > split [ c ][ qdapwczen ]

> icw > start > [ qdapwczen ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > split [ q ][ dapwczen ]

> icw > start > [ dapwczen ] 8 <nil>
> icw > 0 > d > [wc] 8 > [i] 0
> icw > split [ d ][ apwczen ]

> icw > start > [ apwczen ] 9 <nil>
> icw > 0 > a > [wc] 9 > [i] 0
> icw > split [ a ][ pwczen ]

> icw > start > [ pwczen ] 10 <nil>
> icw > 0 > p > [wc] 10 > [i] 0
> icw > split [ p ][ wczen ]

> icw > start > [ wczen ] 11 <nil>
> icw > 0 > w > [wc] 11 > [i] 0
> icw > split [ w ][ czen ]

> icw > start > [ czen ] 12 <nil>
> icw > 0 > c > [wc] 12 > [i] 0
> icw > split [ c ][ zen ]

> icw > start > [ zen ] 13 <nil>
> icw > 0 > z > [wc] 13 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 13 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 13 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 12 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 9 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 9 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > w > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > z > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > e > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > n > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mabkapuoud <<<<

> icw > start > [ mabkapuoud ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ abkapuoud ]

> icw > start > [ abkapuoud ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ bkapuoud ]

> icw > start > [ bkapuoud ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ kapuoud ]

> icw > start > [ kapuoud ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ apuoud ]

> icw > start > [ apuoud ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ puoud ]

> icw > start > [ puoud ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ uoud ]

> icw > start > [ uoud ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ oud ]

> icw > start > [ oud ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ ud ]

> icw > start > [ ud ] 8 <nil>
> icw > 0 > u > [wc] 8 > [i] 0
> icw > split [ u ][ d ]

> icw > start > [ d ] 9 <nil>
> icw > 0 > d > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> pbozezeygljfftvy <<<<

> icw > start > [ pbozezeygljfftvy ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ bozezeygljfftvy ]

> icw > start > [ bozezeygljfftvy ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ ozezeygljfftvy ]

> icw > start > [ ozezeygljfftvy ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ zezeygljfftvy ]

> icw > start > [ zezeygljfftvy ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > t > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > v > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > y > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bvazmzbndl <<<<

> icw > start > [ bvazmzbndl ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ vazmzbndl ]

> icw > start > [ vazmzbndl ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ azmzbndl ]

> icw > start > [ azmzbndl ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ zmzbndl ]

> icw > start > [ zmzbndl ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vl <<<<

> icw > start > [ vl ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ l ]

> icw > start > [ l ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qiaixdtbhqvlzd <<<<

> icw > start > [ qiaixdtbhqvlzd ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ iaixdtbhqvlzd ]

> icw > start > [ iaixdtbhqvlzd ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > z > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ffjfb <<<<

> icw > start > [ ffjfb ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ fjfb ]

> icw > start > [ fjfb ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ jfb ]

> icw > start > [ jfb ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > split [ jf ][ b ]

> icw > start > [ b ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> svthrfmkoxbho <<<<

> icw > start > [ svthrfmkoxbho ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ vthrfmkoxbho ]

> icw > start > [ vthrfmkoxbho ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ thrfmkoxbho ]

> icw > start > [ thrfmkoxbho ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ hrfmkoxbho ]

> icw > start > [ hrfmkoxbho ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ rfmkoxbho ]

> icw > start > [ rfmkoxbho ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ fmkoxbho ]

> icw > start > [ fmkoxbho ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ mkoxbho ]

> icw > start > [ mkoxbho ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ koxbho ]

> icw > start > [ koxbho ] 7 <nil>
> icw > 0 > k > [wc] 7 > [i] 0
> icw > split [ k ][ oxbho ]

> icw > start > [ oxbho ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > split [ o ][ xbho ]

> icw > start > [ xbho ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ bho ]

> icw > start > [ bho ] 10 <nil>
> icw > 0 > b > [wc] 10 > [i] 0
> icw > split [ b ][ ho ]

> icw > start > [ ho ] 11 <nil>
> icw > 0 > h > [wc] 11 > [i] 0
> icw > split [ h ][ o ]

> icw > start > [ o ] 12 <nil>
> icw > 0 > o > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 10 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 9 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 9 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 8 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 8 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > b > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > o > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> cvet <<<<

> icw > start > [ cvet ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ vet ]

> icw > start > [ vet ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ et ]

> icw > start > [ et ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ t ]

> icw > start > [ t ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ucgqyvopafyttrh <<<<

> icw > start > [ ucgqyvopafyttrh ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ cgqyvopafyttrh ]

> icw > start > [ cgqyvopafyttrh ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ gqyvopafyttrh ]

> icw > start > [ gqyvopafyttrh ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ qyvopafyttrh ]

> icw > start > [ qyvopafyttrh ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ yvopafyttrh ]

> icw > start > [ yvopafyttrh ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ vopafyttrh ]

> icw > start > [ vopafyttrh ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ opafyttrh ]

> icw > start > [ opafyttrh ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ pafyttrh ]

> icw > start > [ pafyttrh ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ afyttrh ]

> icw > start > [ afyttrh ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > split [ a ][ fyttrh ]

> icw > start > [ fyttrh ] 9 <nil>
> icw > 0 > f > [wc] 9 > [i] 0
> icw > split [ f ][ yttrh ]

> icw > start > [ yttrh ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ ttrh ]

> icw > start > [ ttrh ] 11 <nil>
> icw > 0 > t > [wc] 11 > [i] 0
> icw > split [ t ][ trh ]

> icw > start > [ trh ] 12 <nil>
> icw > 0 > t > [wc] 12 > [i] 0
> icw > split [ t ][ rh ]

> icw > start > [ rh ] 13 <nil>
> icw > 0 > r > [wc] 13 > [i] 0
> icw > split [ r ][ h ]

> icw > start > [ h ] 14 <nil>
> icw > 0 > h > [wc] 14 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 13 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > t > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > r > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > h > [wc] 0 > [i] 14
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lbgihet <<<<

> icw > start > [ lbgihet ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> naiqyufxffdw <<<<

> icw > start > [ naiqyufxffdw ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ aiqyufxffdw ]

> icw > start > [ aiqyufxffdw ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ iqyufxffdw ]

> icw > start > [ iqyufxffdw ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > w > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vruh <<<<

> icw > start > [ vruh ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ ruh ]

> icw > start > [ ruh ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ uh ]

> icw > start > [ uh ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ h ]

> icw > start > [ h ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> uz <<<<

> icw > start > [ uz ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ z ]

> icw > start > [ z ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ukffmudygjavem <<<<

> icw > start > [ ukffmudygjavem ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ kffmudygjavem ]

> icw > start > [ kffmudygjavem ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ ffmudygjavem ]

> icw > start > [ ffmudygjavem ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ fmudygjavem ]

> icw > start > [ fmudygjavem ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ mudygjavem ]

> icw > start > [ mudygjavem ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ udygjavem ]

> icw > start > [ udygjavem ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ dygjavem ]

> icw > start > [ dygjavem ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ ygjavem ]

> icw > start > [ ygjavem ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ gjavem ]

> icw > start > [ gjavem ] 8 <nil>
> icw > 0 > g > [wc] 8 > [i] 0
> icw > split [ g ][ javem ]

> icw > start > [ javem ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 9 > [i] 2
> icw > split [ jav ][ em ]

> icw > start > [ em ] 10 <nil>
> icw > 0 > e > [wc] 10 > [i] 0
> icw > split [ e ][ m ]

> icw > start > [ m ] 11 <nil>
> icw > 0 > m > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 3 > e > [wc] 9 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > j > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > v > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> dccamymhp <<<<

> icw > start > [ dccamymhp ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ ccamymhp ]

> icw > start > [ ccamymhp ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ camymhp ]

> icw > start > [ camymhp ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ amymhp ]

> icw > start > [ amymhp ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ mymhp ]

> icw > start > [ mymhp ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ ymhp ]

> icw > start > [ ymhp ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ mhp ]

> icw > start > [ mhp ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ hp ]

> icw > start > [ hp ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ p ]

> icw > start > [ p ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > split [ dc ][ camymhp ]

> icw > start > [ camymhp ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ amymhp ]

> icw > start > [ amymhp ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ mymhp ]

> icw > start > [ mymhp ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ ymhp ]

> icw > start > [ ymhp ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ mhp ]

> icw > start > [ mhp ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ hp ]

> icw > start > [ hp ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ p ]

> icw > start > [ p ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wofwgjkykm <<<<

> icw > start > [ wofwgjkykm ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ ofwgjkykm ]

> icw > start > [ ofwgjkykm ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ fwgjkykm ]

> icw > start > [ fwgjkykm ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ wgjkykm ]

> icw > start > [ wgjkykm ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ gjkykm ]

> icw > start > [ gjkykm ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ jkykm ]

> icw > start > [ jkykm ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fbuujzxhln <<<<

> icw > start > [ fbuujzxhln ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ buujzxhln ]

> icw > start > [ buujzxhln ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ uujzxhln ]

> icw > start > [ uujzxhln ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ ujzxhln ]

> icw > start > [ ujzxhln ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ jzxhln ]

> icw > start > [ jzxhln ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kmm <<<<

> icw > start > [ kmm ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ mm ]

> icw > start > [ mm ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ m ]

> icw > start > [ m ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lzandlltowjpwsal <<<<

> icw > start > [ lzandlltowjpwsal ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > a > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > l > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fapfvrmezbsjxs <<<<

> icw > start > [ fapfvrmezbsjxs ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ apfvrmezbsjxs ]

> icw > start > [ apfvrmezbsjxs ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ pfvrmezbsjxs ]

> icw > start > [ pfvrmezbsjxs ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ fvrmezbsjxs ]

> icw > start > [ fvrmezbsjxs ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ vrmezbsjxs ]

> icw > start > [ vrmezbsjxs ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ rmezbsjxs ]

> icw > start > [ rmezbsjxs ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ mezbsjxs ]

> icw > start > [ mezbsjxs ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ ezbsjxs ]

> icw > start > [ ezbsjxs ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ zbsjxs ]

> icw > start > [ zbsjxs ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wiw <<<<

> icw > start > [ wiw ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ iw ]

> icw > start > [ iw ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> sc <<<<

> icw > start > [ sc ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ c ]

> icw > start > [ c ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> soqlh <<<<

> icw > start > [ soqlh ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ oqlh ]

> icw > start > [ oqlh ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ qlh ]

> icw > start > [ qlh ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ lh ]

> icw > start > [ lh ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hzaplclkwl <<<<

> icw > start > [ hzaplclkwl ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ zaplclkwl ]

> icw > start > [ zaplclkwl ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gcdqbcdwbwa <<<<

> icw > start > [ gcdqbcdwbwa ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ cdqbcdwbwa ]

> icw > start > [ cdqbcdwbwa ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ dqbcdwbwa ]

> icw > start > [ dqbcdwbwa ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ qbcdwbwa ]

> icw > start > [ qbcdwbwa ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ bcdwbwa ]

> icw > start > [ bcdwbwa ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ cdwbwa ]

> icw > start > [ cdwbwa ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ dwbwa ]

> icw > start > [ dwbwa ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ wbwa ]

> icw > start > [ wbwa ] 7 <nil>
> icw > 0 > w > [wc] 7 > [i] 0
> icw > split [ w ][ bwa ]

> icw > start > [ bwa ] 8 <nil>
> icw > 0 > b > [wc] 8 > [i] 0
> icw > split [ b ][ wa ]

> icw > start > [ wa ] 9 <nil>
> icw > 0 > w > [wc] 9 > [i] 0
> icw > split [ w ][ a ]

> icw > start > [ a ] 10 <nil>
> icw > 0 > a > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> gadgt <<<<

> icw > start > [ gadgt ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ adgt ]

> icw > start > [ adgt ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ dgt ]

> icw > start > [ dgt ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ gt ]

> icw > start > [ gt ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ t ]

> icw > start > [ t ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> pgowefka <<<<

> icw > start > [ pgowefka ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ gowefka ]

> icw > start > [ gowefka ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ owefka ]

> icw > start > [ owefka ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ wefka ]

> icw > start > [ wefka ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ efka ]

> icw > start > [ efka ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ fka ]

> icw > start > [ fka ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ ka ]

> icw > start > [ ka ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ a ]

> icw > start > [ a ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> juffuguqepwnfh <<<<

> icw > start > [ juffuguqepwnfh ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > n > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > h > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nbuinl <<<<

> icw > start > [ nbuinl ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ buinl ]

> icw > start > [ buinl ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ uinl ]

> icw > start > [ uinl ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ inl ]

> icw > start > [ inl ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cpdxf <<<<

> icw > start > [ cpdxf ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ pdxf ]

> icw > start > [ pdxf ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ dxf ]

> icw > start > [ dxf ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ xf ]

> icw > start > [ xf ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ f ]

> icw > start > [ f ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> sox <<<<

> icw > start > [ sox ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ ox ]

> icw > start > [ ox ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ x ]

> icw > start > [ x ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fq <<<<

> icw > start > [ fq ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ q ]

> icw > start > [ q ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lfnrhgsxkhx <<<<

> icw > start > [ lfnrhgsxkhx ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xrcorfygjxpi <<<<

> icw > start > [ xrcorfygjxpi ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ rcorfygjxpi ]

> icw > start > [ rcorfygjxpi ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ corfygjxpi ]

> icw > start > [ corfygjxpi ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ orfygjxpi ]

> icw > start > [ orfygjxpi ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ rfygjxpi ]

> icw > start > [ rfygjxpi ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ fygjxpi ]

> icw > start > [ fygjxpi ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ ygjxpi ]

> icw > start > [ ygjxpi ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ gjxpi ]

> icw > start > [ gjxpi ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ jxpi ]

> icw > start > [ jxpi ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 6 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 6 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mwtqjwbhgh <<<<

> icw > start > [ mwtqjwbhgh ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ wtqjwbhgh ]

> icw > start > [ wtqjwbhgh ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ tqjwbhgh ]

> icw > start > [ tqjwbhgh ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ qjwbhgh ]

> icw > start > [ qjwbhgh ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ jwbhgh ]

> icw > start > [ jwbhgh ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> loc <<<<

> icw > start > [ loc ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fkglorkkvx <<<<

> icw > start > [ fkglorkkvx ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ kglorkkvx ]

> icw > start > [ kglorkkvx ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ glorkkvx ]

> icw > start > [ glorkkvx ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ lorkkvx ]

> icw > start > [ lorkkvx ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nlzdhucvayrz <<<<

> icw > start > [ nlzdhucvayrz ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ lzdhucvayrz ]

> icw > start > [ lzdhucvayrz ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> azefobxutitrf <<<<

> icw > start > [ azefobxutitrf ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ zefobxutitrf ]

> icw > start > [ zefobxutitrf ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rlrstkcbtikklmh <<<<

> icw > start > [ rlrstkcbtikklmh ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ lrstkcbtikklmh ]

> icw > start > [ lrstkcbtikklmh ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > k > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > h > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ggk <<<<

> icw > start > [ ggk ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ gk ]

> icw > start > [ gk ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ k ]

> icw > start > [ k ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> sbphcejuylh <<<<

> icw > start > [ sbphcejuylh ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ bphcejuylh ]

> icw > start > [ bphcejuylh ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ phcejuylh ]

> icw > start > [ phcejuylh ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ hcejuylh ]

> icw > start > [ hcejuylh ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ cejuylh ]

> icw > start > [ cejuylh ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ ejuylh ]

> icw > start > [ ejuylh ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ juylh ]

> icw > start > [ juylh ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nraoenhd <<<<

> icw > start > [ nraoenhd ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ raoenhd ]

> icw > start > [ raoenhd ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ aoenhd ]

> icw > start > [ aoenhd ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ oenhd ]

> icw > start > [ oenhd ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ enhd ]

> icw > start > [ enhd ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ nhd ]

> icw > start > [ nhd ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ hd ]

> icw > start > [ hd ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ d ]

> icw > start > [ d ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zngyodiqlchxyycx <<<<

> icw > start > [ zngyodiqlchxyycx ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > y > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > c > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > x > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rrbhfwohfv <<<<

> icw > start > [ rrbhfwohfv ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ rbhfwohfv ]

> icw > start > [ rbhfwohfv ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ bhfwohfv ]

> icw > start > [ bhfwohfv ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ hfwohfv ]

> icw > start > [ hfwohfv ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ fwohfv ]

> icw > start > [ fwohfv ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ wohfv ]

> icw > start > [ wohfv ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ ohfv ]

> icw > start > [ ohfv ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ hfv ]

> icw > start > [ hfv ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ fv ]

> icw > start > [ fv ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ v ]

> icw > start > [ v ] 9 <nil>
> icw > 0 > v > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> krzolrglgn <<<<

> icw > start > [ krzolrglgn ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ rzolrglgn ]

> icw > start > [ rzolrglgn ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ zolrglgn ]

> icw > start > [ zolrglgn ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cpjesdzy <<<<

> icw > start > [ cpjesdzy ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ pjesdzy ]

> icw > start > [ pjesdzy ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ jesdzy ]

> icw > start > [ jesdzy ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yoifoyg <<<<

> icw > start > [ yoifoyg ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ oifoyg ]

> icw > start > [ oifoyg ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ ifoyg ]

> icw > start > [ ifoyg ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > split [ if ][ oyg ]

> icw > start > [ oyg ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ yg ]

> icw > start > [ yg ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ g ]

> icw > start > [ g ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hqqevqjugi <<<<

> icw > start > [ hqqevqjugi ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ qqevqjugi ]

> icw > start > [ qqevqjugi ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ qevqjugi ]

> icw > start > [ qevqjugi ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ evqjugi ]

> icw > start > [ evqjugi ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ vqjugi ]

> icw > start > [ vqjugi ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ qjugi ]

> icw > start > [ qjugi ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ jugi ]

> icw > start > [ jugi ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > split [ qe ][ vqjugi ]

> icw > start > [ vqjugi ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ qjugi ]

> icw > start > [ qjugi ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ jugi ]

> icw > start > [ jugi ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ahmv <<<<

> icw > start > [ ahmv ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ hmv ]

> icw > start > [ hmv ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ mv ]

> icw > start > [ mv ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ v ]

> icw > start > [ v ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> xgaujnyclcjq <<<<

> icw > start > [ xgaujnyclcjq ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ gaujnyclcjq ]

> icw > start > [ gaujnyclcjq ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ aujnyclcjq ]

> icw > start > [ aujnyclcjq ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ ujnyclcjq ]

> icw > start > [ ujnyclcjq ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ jnyclcjq ]

> icw > start > [ jnyclcjq ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > q > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> evhyfnlohavrj <<<<

> icw > start > [ evhyfnlohavrj ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ vhyfnlohavrj ]

> icw > start > [ vhyfnlohavrj ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ hyfnlohavrj ]

> icw > start > [ hyfnlohavrj ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ yfnlohavrj ]

> icw > start > [ yfnlohavrj ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ fnlohavrj ]

> icw > start > [ fnlohavrj ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ nlohavrj ]

> icw > start > [ nlohavrj ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ lohavrj ]

> icw > start > [ lohavrj ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> byyvhgh <<<<

> icw > start > [ byyvhgh ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ yyvhgh ]

> icw > start > [ yyvhgh ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ yvhgh ]

> icw > start > [ yvhgh ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ vhgh ]

> icw > start > [ vhgh ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ hgh ]

> icw > start > [ hgh ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ gh ]

> icw > start > [ gh ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ h ]

> icw > start > [ h ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hyw <<<<

> icw > start > [ hyw ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ yw ]

> icw > start > [ yw ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ w ]

> icw > start > [ w ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> kedhvwy <<<<

> icw > start > [ kedhvwy ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ edhvwy ]

> icw > start > [ edhvwy ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ dhvwy ]

> icw > start > [ dhvwy ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ hvwy ]

> icw > start > [ hvwy ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ vwy ]

> icw > start > [ vwy ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ wy ]

> icw > start > [ wy ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ y ]

> icw > start > [ y ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ysljsqminajfipds <<<<

> icw > start > [ ysljsqminajfipds ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ sljsqminajfipds ]

> icw > start > [ sljsqminajfipds ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ ljsqminajfipds ]

> icw > start > [ ljsqminajfipds ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > p > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > d > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > s > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rglnpxfqwu <<<<

> icw > start > [ rglnpxfqwu ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ glnpxfqwu ]

> icw > start > [ glnpxfqwu ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ lnpxfqwu ]

> icw > start > [ lnpxfqwu ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cibpynkxg <<<<

> icw > start > [ cibpynkxg ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ ibpynkxg ]

> icw > start > [ ibpynkxg ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> su <<<<

> icw > start > [ su ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ u ]

> icw > start > [ u ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> mbntqrlwyampdg <<<<

> icw > start > [ mbntqrlwyampdg ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ bntqrlwyampdg ]

> icw > start > [ bntqrlwyampdg ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ ntqrlwyampdg ]

> icw > start > [ ntqrlwyampdg ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ tqrlwyampdg ]

> icw > start > [ tqrlwyampdg ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ qrlwyampdg ]

> icw > start > [ qrlwyampdg ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ rlwyampdg ]

> icw > start > [ rlwyampdg ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ lwyampdg ]

> icw > start > [ lwyampdg ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > d > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nig <<<<

> icw > start > [ nig ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ ig ]

> icw > start > [ ig ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ldhlhqdyjcfhu <<<<

> icw > start > [ ldhlhqdyjcfhu ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > u > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jfymrbafmyoc <<<<

> icw > start > [ jfymrbafmyoc ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > split [ jf ][ ymrbafmyoc ]

> icw > start > [ ymrbafmyoc ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ mrbafmyoc ]

> icw > start > [ mrbafmyoc ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ rbafmyoc ]

> icw > start > [ rbafmyoc ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ bafmyoc ]

> icw > start > [ bafmyoc ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ afmyoc ]

> icw > start > [ afmyoc ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ fmyoc ]

> icw > start > [ fmyoc ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ myoc ]

> icw > start > [ myoc ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > split [ m ][ yoc ]

> icw > start > [ yoc ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ oc ]

> icw > start > [ oc ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > split [ o ][ c ]

> icw > start > [ c ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> tyjmnhlfnrtz <<<<

> icw > start > [ tyjmnhlfnrtz ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ yjmnhlfnrtz ]

> icw > start > [ yjmnhlfnrtz ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ jmnhlfnrtz ]

> icw > start > [ jmnhlfnrtz ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dlazixtlxyvm <<<<

> icw > start > [ dlazixtlxyvm ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ lazixtlxyvm ]

> icw > start > [ lazixtlxyvm ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fbiguhsfuqo <<<<

> icw > start > [ fbiguhsfuqo ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ biguhsfuqo ]

> icw > start > [ biguhsfuqo ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ iguhsfuqo ]

> icw > start > [ iguhsfuqo ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rhymsno <<<<

> icw > start > [ rhymsno ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ hymsno ]

> icw > start > [ hymsno ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ ymsno ]

> icw > start > [ ymsno ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ msno ]

> icw > start > [ msno ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ sno ]

> icw > start > [ sno ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ no ]

> icw > start > [ no ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ o ]

> icw > start > [ o ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> rkbdlchs <<<<

> icw > start > [ rkbdlchs ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ kbdlchs ]

> icw > start > [ kbdlchs ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ bdlchs ]

> icw > start > [ bdlchs ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ dlchs ]

> icw > start > [ dlchs ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ lchs ]

> icw > start > [ lchs ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ocbbwwd <<<<

> icw > start > [ ocbbwwd ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ cbbwwd ]

> icw > start > [ cbbwwd ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ bbwwd ]

> icw > start > [ bbwwd ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ bwwd ]

> icw > start > [ bwwd ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ wwd ]

> icw > start > [ wwd ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ wd ]

> icw > start > [ wd ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ d ]

> icw > start > [ d ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > split [ ww ][ d ]

> icw > start > [ d ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> astaiamnepwkya <<<<

> icw > start > [ astaiamnepwkya ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ staiamnepwkya ]

> icw > start > [ staiamnepwkya ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ taiamnepwkya ]

> icw > start > [ taiamnepwkya ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ aiamnepwkya ]

> icw > start > [ aiamnepwkya ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ iamnepwkya ]

> icw > start > [ iamnepwkya ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > split [ ta ][ iamnepwkya ]

> icw > start > [ iamnepwkya ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > y > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > a > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mplirup <<<<

> icw > start > [ mplirup ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ plirup ]

> icw > start > [ plirup ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ lirup ]

> icw > start > [ lirup ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> edkxjq <<<<

> icw > start > [ edkxjq ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ dkxjq ]

> icw > start > [ dkxjq ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ kxjq ]

> icw > start > [ kxjq ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ xjq ]

> icw > start > [ xjq ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ jq ]

> icw > start > [ jq ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> g <<<<

> icw > start > [ g ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> exlwulswtvot <<<<

> icw > start > [ exlwulswtvot ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ xlwulswtvot ]

> icw > start > [ xlwulswtvot ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ lwulswtvot ]

> icw > start > [ lwulswtvot ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tlnc <<<<

> icw > start > [ tlnc ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ lnc ]

> icw > start > [ lnc ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vnrrzerz <<<<

> icw > start > [ vnrrzerz ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ nrrzerz ]

> icw > start > [ nrrzerz ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ rrzerz ]

> icw > start > [ rrzerz ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ rzerz ]

> icw > start > [ rzerz ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ zerz ]

> icw > start > [ zerz ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ygeraoozbtt <<<<

> icw > start > [ ygeraoozbtt ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ geraoozbtt ]

> icw > start > [ geraoozbtt ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ eraoozbtt ]

> icw > start > [ eraoozbtt ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ raoozbtt ]

> icw > start > [ raoozbtt ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ aoozbtt ]

> icw > start > [ aoozbtt ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ oozbtt ]

> icw > start > [ oozbtt ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ ozbtt ]

> icw > start > [ ozbtt ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ zbtt ]

> icw > start > [ zbtt ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > split [ ge ][ raoozbtt ]

> icw > start > [ raoozbtt ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ aoozbtt ]

> icw > start > [ aoozbtt ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ oozbtt ]

> icw > start > [ oozbtt ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ ozbtt ]

> icw > start > [ ozbtt ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ zbtt ]

> icw > start > [ zbtt ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yyifkin <<<<

> icw > start > [ yyifkin ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ yifkin ]

> icw > start > [ yifkin ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ ifkin ]

> icw > start > [ ifkin ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > split [ if ][ kin ]

> icw > start > [ kin ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ in ]

> icw > start > [ in ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> eo <<<<

> icw > start > [ eo ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ o ]

> icw > start > [ o ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ua <<<<

> icw > start > [ ua ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ a ]

> icw > start > [ a ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> qgztvqdolf <<<<

> icw > start > [ qgztvqdolf ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ gztvqdolf ]

> icw > start > [ gztvqdolf ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ ztvqdolf ]

> icw > start > [ ztvqdolf ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rlzddjzcshvd <<<<

> icw > start > [ rlzddjzcshvd ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ lzddjzcshvd ]

> icw > start > [ lzddjzcshvd ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > d > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> khxkdxflwxme <<<<

> icw > start > [ khxkdxflwxme ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ hxkdxflwxme ]

> icw > start > [ hxkdxflwxme ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ xkdxflwxme ]

> icw > start > [ xkdxflwxme ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ kdxflwxme ]

> icw > start > [ kdxflwxme ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ dxflwxme ]

> icw > start > [ dxflwxme ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ xflwxme ]

> icw > start > [ xflwxme ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ flwxme ]

> icw > start > [ flwxme ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ lwxme ]

> icw > start > [ lwxme ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kk <<<<

> icw > start > [ kk ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ k ]

> icw > start > [ k ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zylbhoaac <<<<

> icw > start > [ zylbhoaac ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cw <<<<

> icw > start > [ cw ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ w ]

> icw > start > [ w ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> iizic <<<<

> icw > start > [ iizic ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gcdxstpz <<<<

> icw > start > [ gcdxstpz ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ cdxstpz ]

> icw > start > [ cdxstpz ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ dxstpz ]

> icw > start > [ dxstpz ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ xstpz ]

> icw > start > [ xstpz ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ stpz ]

> icw > start > [ stpz ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ tpz ]

> icw > start > [ tpz ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ pz ]

> icw > start > [ pz ] 6 <nil>
> icw > 0 > p > [wc] 6 > [i] 0
> icw > split [ p ][ z ]

> icw > start > [ z ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > split [ tp ][ z ]

> icw > start > [ z ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > z > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kjwdqeg <<<<

> icw > start > [ kjwdqeg ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ jwdqeg ]

> icw > start > [ jwdqeg ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> earjrncmmkdel <<<<

> icw > start > [ earjrncmmkdel ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ arjrncmmkdel ]

> icw > start > [ arjrncmmkdel ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ rjrncmmkdel ]

> icw > start > [ rjrncmmkdel ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ jrncmmkdel ]

> icw > start > [ jrncmmkdel ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kbesuhquepj <<<<

> icw > start > [ kbesuhquepj ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ besuhquepj ]

> icw > start > [ besuhquepj ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ esuhquepj ]

> icw > start > [ esuhquepj ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ suhquepj ]

> icw > start > [ suhquepj ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ uhquepj ]

> icw > start > [ uhquepj ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ hquepj ]

> icw > start > [ hquepj ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ quepj ]

> icw > start > [ quepj ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ uepj ]

> icw > start > [ uepj ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ epj ]

> icw > start > [ epj ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ pj ]

> icw > start > [ pj ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > split [ p ][ j ]

> icw > start > [ j ] 10 <nil>
> icw > 0 > j > [wc] 10 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 9 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > split [ su ][ hquepj ]

> icw > start > [ hquepj ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ quepj ]

> icw > start > [ quepj ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ uepj ]

> icw > start > [ uepj ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ epj ]

> icw > start > [ epj ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ pj ]

> icw > start > [ pj ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ j ]

> icw > start > [ j ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 8 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nrzbllldgdmyrpgl <<<<

> icw > start > [ nrzbllldgdmyrpgl ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ rzbllldgdmyrpgl ]

> icw > start > [ rzbllldgdmyrpgl ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ zbllldgdmyrpgl ]

> icw > start > [ zbllldgdmyrpgl ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > r > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > p > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > g > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > l > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hllwnqozf <<<<

> icw > start > [ hllwnqozf ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ llwnqozf ]

> icw > start > [ llwnqozf ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> djpchowhwevbqvjj <<<<

> icw > start > [ djpchowhwevbqvjj ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ jpchowhwevbqvjj ]

> icw > start > [ jpchowhwevbqvjj ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > split [ jp ][ chowhwevbqvjj ]

> icw > start > [ chowhwevbqvjj ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ howhwevbqvjj ]

> icw > start > [ howhwevbqvjj ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ owhwevbqvjj ]

> icw > start > [ owhwevbqvjj ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ whwevbqvjj ]

> icw > start > [ whwevbqvjj ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ hwevbqvjj ]

> icw > start > [ hwevbqvjj ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ wevbqvjj ]

> icw > start > [ wevbqvjj ] 7 <nil>
> icw > 0 > w > [wc] 7 > [i] 0
> icw > split [ w ][ evbqvjj ]

> icw > start > [ evbqvjj ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ vbqvjj ]

> icw > start > [ vbqvjj ] 9 <nil>
> icw > 0 > v > [wc] 9 > [i] 0
> icw > split [ v ][ bqvjj ]

> icw > start > [ bqvjj ] 10 <nil>
> icw > 0 > b > [wc] 10 > [i] 0
> icw > split [ b ][ qvjj ]

> icw > start > [ qvjj ] 11 <nil>
> icw > 0 > q > [wc] 11 > [i] 0
> icw > split [ q ][ vjj ]

> icw > start > [ vjj ] 12 <nil>
> icw > 0 > v > [wc] 12 > [i] 0
> icw > split [ v ][ jj ]

> icw > start > [ jj ] 13 <nil>
> icw > 0 > j > [wc] 13 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 13 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > v > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > j > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zsmhylnjpktb <<<<

> icw > start > [ zsmhylnjpktb ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pxnktxkm <<<<

> icw > start > [ pxnktxkm ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ xnktxkm ]

> icw > start > [ xnktxkm ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ nktxkm ]

> icw > start > [ nktxkm ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ ktxkm ]

> icw > start > [ ktxkm ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ txkm ]

> icw > start > [ txkm ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ xkm ]

> icw > start > [ xkm ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ km ]

> icw > start > [ km ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ m ]

> icw > start > [ m ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> fxwiaqqb <<<<

> icw > start > [ fxwiaqqb ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ xwiaqqb ]

> icw > start > [ xwiaqqb ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ wiaqqb ]

> icw > start > [ wiaqqb ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ iaqqb ]

> icw > start > [ iaqqb ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qjwufmwresfsfaok <<<<

> icw > start > [ qjwufmwresfsfaok ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ jwufmwresfsfaok ]

> icw > start > [ jwufmwresfsfaok ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > a > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > o > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > k > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> aa <<<<

> icw > start > [ aa ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ a ]

> icw > start > [ a ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> d <<<<

> icw > start > [ d ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iobioqm <<<<

> icw > start > [ iobioqm ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> svjgzk <<<<

> icw > start > [ svjgzk ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ vjgzk ]

> icw > start > [ vjgzk ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ jgzk ]

> icw > start > [ jgzk ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> khbzp <<<<

> icw > start > [ khbzp ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ hbzp ]

> icw > start > [ hbzp ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ bzp ]

> icw > start > [ bzp ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ zp ]

> icw > start > [ zp ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> euexyudhrioi <<<<

> icw > start > [ euexyudhrioi ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ uexyudhrioi ]

> icw > start > [ uexyudhrioi ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ exyudhrioi ]

> icw > start > [ exyudhrioi ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ xyudhrioi ]

> icw > start > [ xyudhrioi ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ yudhrioi ]

> icw > start > [ yudhrioi ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ udhrioi ]

> icw > start > [ udhrioi ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ dhrioi ]

> icw > start > [ dhrioi ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ hrioi ]

> icw > start > [ hrioi ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ rioi ]

> icw > start > [ rioi ] 8 <nil>
> icw > 0 > r > [wc] 8 > [i] 0
> icw > split [ r ][ ioi ]

> icw > start > [ ioi ] 9 <nil>
> icw > 0 > i > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > split [ yu ][ dhrioi ]

> icw > start > [ dhrioi ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ hrioi ]

> icw > start > [ hrioi ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ rioi ]

> icw > start > [ rioi ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ ioi ]

> icw > start > [ ioi ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yqsj <<<<

> icw > start > [ yqsj ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ qsj ]

> icw > start > [ qsj ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ sj ]

> icw > start > [ sj ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ j ]

> icw > start > [ j ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ngrwqpoh <<<<

> icw > start > [ ngrwqpoh ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ grwqpoh ]

> icw > start > [ grwqpoh ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ rwqpoh ]

> icw > start > [ rwqpoh ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ wqpoh ]

> icw > start > [ wqpoh ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ qpoh ]

> icw > start > [ qpoh ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ poh ]

> icw > start > [ poh ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ oh ]

> icw > start > [ oh ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ h ]

> icw > start > [ h ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > split [ po ][ h ]

> icw > start > [ h ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ ng ][ rwqpoh ]

> icw > start > [ rwqpoh ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ wqpoh ]

> icw > start > [ wqpoh ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ qpoh ]

> icw > start > [ qpoh ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ poh ]

> icw > start > [ poh ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ oh ]

> icw > start > [ oh ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ h ]

> icw > start > [ h ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > split [ po ][ h ]

> icw > start > [ h ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> rwuvd <<<<

> icw > start > [ rwuvd ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ wuvd ]

> icw > start > [ wuvd ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ uvd ]

> icw > start > [ uvd ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ vd ]

> icw > start > [ vd ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ d ]

> icw > start > [ d ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> eruffmlg <<<<

> icw > start > [ eruffmlg ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ ruffmlg ]

> icw > start > [ ruffmlg ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ uffmlg ]

> icw > start > [ uffmlg ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ ffmlg ]

> icw > start > [ ffmlg ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ fmlg ]

> icw > start > [ fmlg ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ mlg ]

> icw > start > [ mlg ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ lg ]

> icw > start > [ lg ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bxzovyew <<<<

> icw > start > [ bxzovyew ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ xzovyew ]

> icw > start > [ xzovyew ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ zovyew ]

> icw > start > [ zovyew ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > split [ xz ][ ovyew ]

> icw > start > [ ovyew ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ vyew ]

> icw > start > [ vyew ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ yew ]

> icw > start > [ yew ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ ew ]

> icw > start > [ ew ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ w ]

> icw > start > [ w ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > split [ ye ][ w ]

> icw > start > [ w ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> faz <<<<

> icw > start > [ faz ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ az ]

> icw > start > [ az ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ z ]

> icw > start > [ z ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pmvfvyguqdi <<<<

> icw > start > [ pmvfvyguqdi ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ mvfvyguqdi ]

> icw > start > [ mvfvyguqdi ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ vfvyguqdi ]

> icw > start > [ vfvyguqdi ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ fvyguqdi ]

> icw > start > [ fvyguqdi ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ vyguqdi ]

> icw > start > [ vyguqdi ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ yguqdi ]

> icw > start > [ yguqdi ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ guqdi ]

> icw > start > [ guqdi ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > split [ g ][ uqdi ]

> icw > start > [ uqdi ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ qdi ]

> icw > start > [ qdi ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > split [ q ][ di ]

> icw > start > [ di ] 9 <nil>
> icw > 0 > d > [wc] 9 > [i] 0
> icw > split [ d ][ i ]

> icw > start > [ i ] 10 <nil>
> icw > 0 > i > [wc] 10 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 9 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jlxnoixsy <<<<

> icw > start > [ jlxnoixsy ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hyfrdngjf <<<<

> icw > start > [ hyfrdngjf ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ yfrdngjf ]

> icw > start > [ yfrdngjf ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ frdngjf ]

> icw > start > [ frdngjf ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ rdngjf ]

> icw > start > [ rdngjf ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ dngjf ]

> icw > start > [ dngjf ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ ngjf ]

> icw > start > [ ngjf ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ gjf ]

> icw > start > [ gjf ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > split [ g ][ jf ]

> icw > start > [ jf ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > split [ ng ][ jf ]

> icw > start > [ jf ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ly <<<<

> icw > start > [ ly ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> eibcapetpmeaid <<<<

> icw > start > [ eibcapetpmeaid ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ ibcapetpmeaid ]

> icw > start > [ ibcapetpmeaid ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > a > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tpnwwiif <<<<

> icw > start > [ tpnwwiif ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ pnwwiif ]

> icw > start > [ pnwwiif ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ nwwiif ]

> icw > start > [ nwwiif ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ wwiif ]

> icw > start > [ wwiif ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ wiif ]

> icw > start > [ wiif ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ iif ]

> icw > start > [ iif ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > split [ ww ][ iif ]

> icw > start > [ iif ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > split [ tp ][ nwwiif ]

> icw > start > [ nwwiif ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ wwiif ]

> icw > start > [ wwiif ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ wiif ]

> icw > start > [ wiif ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ iif ]

> icw > start > [ iif ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > split [ ww ][ iif ]

> icw > start > [ iif ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pfgsp <<<<

> icw > start > [ pfgsp ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ fgsp ]

> icw > start > [ fgsp ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ gsp ]

> icw > start > [ gsp ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ sp ]

> icw > start > [ sp ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ p ]

> icw > start > [ p ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > split [ fg ][ sp ]

> icw > start > [ sp ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ p ]

> icw > start > [ p ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> kvhhwkzvtvlhhb <<<<

> icw > start > [ kvhhwkzvtvlhhb ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ vhhwkzvtvlhhb ]

> icw > start > [ vhhwkzvtvlhhb ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ hhwkzvtvlhhb ]

> icw > start > [ hhwkzvtvlhhb ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ hwkzvtvlhhb ]

> icw > start > [ hwkzvtvlhhb ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ wkzvtvlhhb ]

> icw > start > [ wkzvtvlhhb ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ kzvtvlhhb ]

> icw > start > [ kzvtvlhhb ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ zvtvlhhb ]

> icw > start > [ zvtvlhhb ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > h > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > b > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pjxurgqbtldims <<<<

> icw > start > [ pjxurgqbtldims ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ jxurgqbtldims ]

> icw > start > [ jxurgqbtldims ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > m > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rncplkeweoirje <<<<

> icw > start > [ rncplkeweoirje ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ ncplkeweoirje ]

> icw > start > [ ncplkeweoirje ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ cplkeweoirje ]

> icw > start > [ cplkeweoirje ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ plkeweoirje ]

> icw > start > [ plkeweoirje ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ lkeweoirje ]

> icw > start > [ lkeweoirje ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> akyprzzphew <<<<

> icw > start > [ akyprzzphew ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ kyprzzphew ]

> icw > start > [ kyprzzphew ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ yprzzphew ]

> icw > start > [ yprzzphew ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ przzphew ]

> icw > start > [ przzphew ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ rzzphew ]

> icw > start > [ rzzphew ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ zzphew ]

> icw > start > [ zzphew ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > split [ zz ][ phew ]

> icw > start > [ phew ] 6 <nil>
> icw > 0 > p > [wc] 6 > [i] 0
> icw > split [ p ][ hew ]

> icw > start > [ hew ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ ew ]

> icw > start > [ ew ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ w ]

> icw > start > [ w ] 9 <nil>
> icw > 0 > w > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wyvfpjyglzrmhfqp <<<<

> icw > start > [ wyvfpjyglzrmhfqp ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ yvfpjyglzrmhfqp ]

> icw > start > [ yvfpjyglzrmhfqp ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ vfpjyglzrmhfqp ]

> icw > start > [ vfpjyglzrmhfqp ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ fpjyglzrmhfqp ]

> icw > start > [ fpjyglzrmhfqp ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ pjyglzrmhfqp ]

> icw > start > [ pjyglzrmhfqp ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ jyglzrmhfqp ]

> icw > start > [ jyglzrmhfqp ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > split [ jy ][ glzrmhfqp ]

> icw > start > [ glzrmhfqp ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > split [ g ][ lzrmhfqp ]

> icw > start > [ lzrmhfqp ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > h > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > f > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > q > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > p > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ubheeqt <<<<

> icw > start > [ ubheeqt ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ bheeqt ]

> icw > start > [ bheeqt ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ heeqt ]

> icw > start > [ heeqt ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ eeqt ]

> icw > start > [ eeqt ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ eqt ]

> icw > start > [ eqt ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ qt ]

> icw > start > [ qt ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ t ]

> icw > start > [ t ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> rmbxlcmn <<<<

> icw > start > [ rmbxlcmn ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ mbxlcmn ]

> icw > start > [ mbxlcmn ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ bxlcmn ]

> icw > start > [ bxlcmn ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ xlcmn ]

> icw > start > [ xlcmn ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ lcmn ]

> icw > start > [ lcmn ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> taqakgim <<<<

> icw > start > [ taqakgim ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ aqakgim ]

> icw > start > [ aqakgim ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ qakgim ]

> icw > start > [ qakgim ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ akgim ]

> icw > start > [ akgim ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ kgim ]

> icw > start > [ kgim ] 4 <nil>
> icw > 0 > k > [wc] 4 > [i] 0
> icw > split [ k ][ gim ]

> icw > start > [ gim ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ im ]

> icw > start > [ im ] 6 <nil>
> icw > 0 > i > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > split [ qa ][ kgim ]

> icw > start > [ kgim ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ gim ]

> icw > start > [ gim ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ im ]

> icw > start > [ im ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > split [ ta ][ qakgim ]

> icw > start > [ qakgim ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ akgim ]

> icw > start > [ akgim ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ kgim ]

> icw > start > [ kgim ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ gim ]

> icw > start > [ gim ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ im ]

> icw > start > [ im ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > split [ qa ][ kgim ]

> icw > start > [ kgim ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ gim ]

> icw > start > [ gim ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ im ]

> icw > start > [ im ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> apsbu <<<<

> icw > start > [ apsbu ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ psbu ]

> icw > start > [ psbu ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ sbu ]

> icw > start > [ sbu ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ bu ]

> icw > start > [ bu ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ u ]

> icw > start > [ u ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> khwnykughmwrlk <<<<

> icw > start > [ khwnykughmwrlk ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ hwnykughmwrlk ]

> icw > start > [ hwnykughmwrlk ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ wnykughmwrlk ]

> icw > start > [ wnykughmwrlk ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ nykughmwrlk ]

> icw > start > [ nykughmwrlk ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ ykughmwrlk ]

> icw > start > [ ykughmwrlk ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ kughmwrlk ]

> icw > start > [ kughmwrlk ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ ughmwrlk ]

> icw > start > [ ughmwrlk ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ ghmwrlk ]

> icw > start > [ ghmwrlk ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ hmwrlk ]

> icw > start > [ hmwrlk ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ mwrlk ]

> icw > start > [ mwrlk ] 9 <nil>
> icw > 0 > m > [wc] 9 > [i] 0
> icw > split [ m ][ wrlk ]

> icw > start > [ wrlk ] 10 <nil>
> icw > 0 > w > [wc] 10 > [i] 0
> icw > split [ w ][ rlk ]

> icw > start > [ rlk ] 11 <nil>
> icw > 0 > r > [wc] 11 > [i] 0
> icw > split [ r ][ lk ]

> icw > start > [ lk ] 12 <nil>
> icw > 0 > l > [wc] 12 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 12 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 10 > [i] 1
> icw > split [ wr ][ lk ]

> icw > start > [ lk ] 11 <nil>
> icw > 0 > l > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 11 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 9 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 9 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > split [ ku ][ ghmwrlk ]

> icw > start > [ ghmwrlk ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > split [ g ][ hmwrlk ]

> icw > start > [ hmwrlk ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ mwrlk ]

> icw > start > [ mwrlk ] 8 <nil>
> icw > 0 > m > [wc] 8 > [i] 0
> icw > split [ m ][ wrlk ]

> icw > start > [ wrlk ] 9 <nil>
> icw > 0 > w > [wc] 9 > [i] 0
> icw > split [ w ][ rlk ]

> icw > start > [ rlk ] 10 <nil>
> icw > 0 > r > [wc] 10 > [i] 0
> icw > split [ r ][ lk ]

> icw > start > [ lk ] 11 <nil>
> icw > 0 > l > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 11 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 9 > [i] 1
> icw > split [ wr ][ lk ]

> icw > start > [ lk ] 10 <nil>
> icw > 0 > l > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 10 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 8 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 8 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > k > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vtdlzwpbhcsbvjno <<<<

> icw > start > [ vtdlzwpbhcsbvjno ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ tdlzwpbhcsbvjno ]

> icw > start > [ tdlzwpbhcsbvjno ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ dlzwpbhcsbvjno ]

> icw > start > [ dlzwpbhcsbvjno ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ lzwpbhcsbvjno ]

> icw > start > [ lzwpbhcsbvjno ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > v > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > j > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > n > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > o > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tffmjggrmyil <<<<

> icw > start > [ tffmjggrmyil ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ ffmjggrmyil ]

> icw > start > [ ffmjggrmyil ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ fmjggrmyil ]

> icw > start > [ fmjggrmyil ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ mjggrmyil ]

> icw > start > [ mjggrmyil ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ jggrmyil ]

> icw > start > [ jggrmyil ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> schgwrrzt <<<<

> icw > start > [ schgwrrzt ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ chgwrrzt ]

> icw > start > [ chgwrrzt ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ hgwrrzt ]

> icw > start > [ hgwrrzt ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ gwrrzt ]

> icw > start > [ gwrrzt ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ wrrzt ]

> icw > start > [ wrrzt ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ rrzt ]

> icw > start > [ rrzt ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ rzt ]

> icw > start > [ rzt ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ zt ]

> icw > start > [ zt ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > split [ wr ][ rzt ]

> icw > start > [ rzt ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ zt ]

> icw > start > [ zt ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > r > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > split [ sc ][ hgwrrzt ]

> icw > start > [ hgwrrzt ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ gwrrzt ]

> icw > start > [ gwrrzt ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ wrrzt ]

> icw > start > [ wrrzt ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ rrzt ]

> icw > start > [ rrzt ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ rzt ]

> icw > start > [ rzt ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ zt ]

> icw > start > [ zt ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > split [ wr ][ rzt ]

> icw > start > [ rzt ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ zt ]

> icw > start > [ zt ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mvndmua <<<<

> icw > start > [ mvndmua ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ vndmua ]

> icw > start > [ vndmua ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ ndmua ]

> icw > start > [ ndmua ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ dmua ]

> icw > start > [ dmua ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ mua ]

> icw > start > [ mua ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ ua ]

> icw > start > [ ua ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ a ]

> icw > start > [ a ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> nlwpw <<<<

> icw > start > [ nlwpw ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ lwpw ]

> icw > start > [ lwpw ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> glvbtkegzjs <<<<

> icw > start > [ glvbtkegzjs ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ lvbtkegzjs ]

> icw > start > [ lvbtkegzjs ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> piwllpgnlpcnezqs <<<<

> icw > start > [ piwllpgnlpcnezqs ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ iwllpgnlpcnezqs ]

> icw > start > [ iwllpgnlpcnezqs ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > n > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > z > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > q > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > s > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xkelind <<<<

> icw > start > [ xkelind ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ kelind ]

> icw > start > [ kelind ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ elind ]

> icw > start > [ elind ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ lind ]

> icw > start > [ lind ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> urtxsezrwz <<<<

> icw > start > [ urtxsezrwz ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ rtxsezrwz ]

> icw > start > [ rtxsezrwz ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ txsezrwz ]

> icw > start > [ txsezrwz ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ xsezrwz ]

> icw > start > [ xsezrwz ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ sezrwz ]

> icw > start > [ sezrwz ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ ezrwz ]

> icw > start > [ ezrwz ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ zrwz ]

> icw > start > [ zrwz ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zechoc <<<<

> icw > start > [ zechoc ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vfaimxrqnyiq <<<<

> icw > start > [ vfaimxrqnyiq ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ faimxrqnyiq ]

> icw > start > [ faimxrqnyiq ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ aimxrqnyiq ]

> icw > start > [ aimxrqnyiq ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ imxrqnyiq ]

> icw > start > [ imxrqnyiq ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > q > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ybugjsblhzfravzn <<<<

> icw > start > [ ybugjsblhzfravzn ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ bugjsblhzfravzn ]

> icw > start > [ bugjsblhzfravzn ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ ugjsblhzfravzn ]

> icw > start > [ ugjsblhzfravzn ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ gjsblhzfravzn ]

> icw > start > [ gjsblhzfravzn ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ jsblhzfravzn ]

> icw > start > [ jsblhzfravzn ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > a > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > v > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > z > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > n > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> btgcpqwovwp <<<<

> icw > start > [ btgcpqwovwp ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ tgcpqwovwp ]

> icw > start > [ tgcpqwovwp ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ gcpqwovwp ]

> icw > start > [ gcpqwovwp ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ cpqwovwp ]

> icw > start > [ cpqwovwp ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ pqwovwp ]

> icw > start > [ pqwovwp ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ qwovwp ]

> icw > start > [ qwovwp ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ wovwp ]

> icw > start > [ wovwp ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > split [ w ][ ovwp ]

> icw > start > [ ovwp ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ vwp ]

> icw > start > [ vwp ] 8 <nil>
> icw > 0 > v > [wc] 8 > [i] 0
> icw > split [ v ][ wp ]

> icw > start > [ wp ] 9 <nil>
> icw > 0 > w > [wc] 9 > [i] 0
> icw > split [ w ][ p ]

> icw > start > [ p ] 10 <nil>
> icw > 0 > p > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > split [ tg ][ cpqwovwp ]

> icw > start > [ cpqwovwp ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ pqwovwp ]

> icw > start > [ pqwovwp ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ qwovwp ]

> icw > start > [ qwovwp ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ wovwp ]

> icw > start > [ wovwp ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ ovwp ]

> icw > start > [ ovwp ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ vwp ]

> icw > start > [ vwp ] 7 <nil>
> icw > 0 > v > [wc] 7 > [i] 0
> icw > split [ v ][ wp ]

> icw > start > [ wp ] 8 <nil>
> icw > 0 > w > [wc] 8 > [i] 0
> icw > split [ w ][ p ]

> icw > start > [ p ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zgxgodlhmix <<<<

> icw > start > [ zgxgodlhmix ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> sfzdknoxzassc <<<<

> icw > start > [ sfzdknoxzassc ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ fzdknoxzassc ]

> icw > start > [ fzdknoxzassc ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ zdknoxzassc ]

> icw > start > [ zdknoxzassc ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > split [ zd ][ knoxzassc ]

> icw > start > [ knoxzassc ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ noxzassc ]

> icw > start > [ noxzassc ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ oxzassc ]

> icw > start > [ oxzassc ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ xzassc ]

> icw > start > [ xzassc ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ zassc ]

> icw > start > [ zassc ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > split [ xz ][ assc ]

> icw > start > [ assc ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ ssc ]

> icw > start > [ ssc ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > split [ s ][ sc ]

> icw > start > [ sc ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ c ]

> icw > start > [ c ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > split [ ss ][ c ]

> icw > start > [ c ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > split [ fz ][ dknoxzassc ]

> icw > start > [ dknoxzassc ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ knoxzassc ]

> icw > start > [ knoxzassc ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ noxzassc ]

> icw > start > [ noxzassc ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ oxzassc ]

> icw > start > [ oxzassc ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ xzassc ]

> icw > start > [ xzassc ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ zassc ]

> icw > start > [ zassc ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > split [ xz ][ assc ]

> icw > start > [ assc ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ ssc ]

> icw > start > [ ssc ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > split [ s ][ sc ]

> icw > start > [ sc ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ c ]

> icw > start > [ c ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > split [ ss ][ c ]

> icw > start > [ c ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wgzvqkxuqrsqxs <<<<

> icw > start > [ wgzvqkxuqrsqxs ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ gzvqkxuqrsqxs ]

> icw > start > [ gzvqkxuqrsqxs ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ zvqkxuqrsqxs ]

> icw > start > [ zvqkxuqrsqxs ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > q > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dwneyqisozq <<<<

> icw > start > [ dwneyqisozq ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ wneyqisozq ]

> icw > start > [ wneyqisozq ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ neyqisozq ]

> icw > start > [ neyqisozq ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ eyqisozq ]

> icw > start > [ eyqisozq ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ yqisozq ]

> icw > start > [ yqisozq ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ qisozq ]

> icw > start > [ qisozq ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ isozq ]

> icw > start > [ isozq ] 6 <nil>
> icw > 0 > i > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fg <<<<

> icw > start > [ fg ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ g ]

> icw > start > [ g ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vhfsf <<<<

> icw > start > [ vhfsf ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ hfsf ]

> icw > start > [ hfsf ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ fsf ]

> icw > start > [ fsf ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ sf ]

> icw > start > [ sf ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ f ]

> icw > start > [ f ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> uspujvqhydw <<<<

> icw > start > [ uspujvqhydw ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ spujvqhydw ]

> icw > start > [ spujvqhydw ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ pujvqhydw ]

> icw > start > [ pujvqhydw ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ ujvqhydw ]

> icw > start > [ ujvqhydw ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ jvqhydw ]

> icw > start > [ jvqhydw ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> eadosqafyxbmzgr <<<<

> icw > start > [ eadosqafyxbmzgr ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ adosqafyxbmzgr ]

> icw > start > [ adosqafyxbmzgr ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ dosqafyxbmzgr ]

> icw > start > [ dosqafyxbmzgr ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ osqafyxbmzgr ]

> icw > start > [ osqafyxbmzgr ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ sqafyxbmzgr ]

> icw > start > [ sqafyxbmzgr ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ qafyxbmzgr ]

> icw > start > [ qafyxbmzgr ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ afyxbmzgr ]

> icw > start > [ afyxbmzgr ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ fyxbmzgr ]

> icw > start > [ fyxbmzgr ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ yxbmzgr ]

> icw > start > [ yxbmzgr ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ xbmzgr ]

> icw > start > [ xbmzgr ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ bmzgr ]

> icw > start > [ bmzgr ] 10 <nil>
> icw > 0 > b > [wc] 10 > [i] 0
> icw > split [ b ][ mzgr ]

> icw > start > [ mzgr ] 11 <nil>
> icw > 0 > m > [wc] 11 > [i] 0
> icw > split [ m ][ zgr ]

> icw > start > [ zgr ] 12 <nil>
> icw > 0 > z > [wc] 12 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 12 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 12 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > split [ qa ][ fyxbmzgr ]

> icw > start > [ fyxbmzgr ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ yxbmzgr ]

> icw > start > [ yxbmzgr ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ xbmzgr ]

> icw > start > [ xbmzgr ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ bmzgr ]

> icw > start > [ bmzgr ] 9 <nil>
> icw > 0 > b > [wc] 9 > [i] 0
> icw > split [ b ][ mzgr ]

> icw > start > [ mzgr ] 10 <nil>
> icw > 0 > m > [wc] 10 > [i] 0
> icw > split [ m ][ zgr ]

> icw > start > [ zgr ] 11 <nil>
> icw > 0 > z > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > split [ os ][ qafyxbmzgr ]

> icw > start > [ qafyxbmzgr ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ afyxbmzgr ]

> icw > start > [ afyxbmzgr ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ fyxbmzgr ]

> icw > start > [ fyxbmzgr ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ yxbmzgr ]

> icw > start > [ yxbmzgr ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ xbmzgr ]

> icw > start > [ xbmzgr ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ bmzgr ]

> icw > start > [ bmzgr ] 9 <nil>
> icw > 0 > b > [wc] 9 > [i] 0
> icw > split [ b ][ mzgr ]

> icw > start > [ mzgr ] 10 <nil>
> icw > 0 > m > [wc] 10 > [i] 0
> icw > split [ m ][ zgr ]

> icw > start > [ zgr ] 11 <nil>
> icw > 0 > z > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > split [ qa ][ fyxbmzgr ]

> icw > start > [ fyxbmzgr ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ yxbmzgr ]

> icw > start > [ yxbmzgr ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ xbmzgr ]

> icw > start > [ xbmzgr ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ bmzgr ]

> icw > start > [ bmzgr ] 8 <nil>
> icw > 0 > b > [wc] 8 > [i] 0
> icw > split [ b ][ mzgr ]

> icw > start > [ mzgr ] 9 <nil>
> icw > 0 > m > [wc] 9 > [i] 0
> icw > split [ m ][ zgr ]

> icw > start > [ zgr ] 10 <nil>
> icw > 0 > z > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 1 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 1 > [i] 4
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > b > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > z > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > r > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tyff <<<<

> icw > start > [ tyff ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ yff ]

> icw > start > [ yff ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ ff ]

> icw > start > [ ff ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ f ]

> icw > start > [ f ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> blolplosqnfcwx <<<<

> icw > start > [ blolplosqnfcwx ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ lolplosqnfcwx ]

> icw > start > [ lolplosqnfcwx ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > x > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> uwkl <<<<

> icw > start > [ uwkl ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ wkl ]

> icw > start > [ wkl ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ kl ]

> icw > start > [ kl ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ l ]

> icw > start > [ l ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> puenodlvotb <<<<

> icw > start > [ puenodlvotb ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ uenodlvotb ]

> icw > start > [ uenodlvotb ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ enodlvotb ]

> icw > start > [ enodlvotb ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ nodlvotb ]

> icw > start > [ nodlvotb ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ odlvotb ]

> icw > start > [ odlvotb ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ dlvotb ]

> icw > start > [ dlvotb ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ lvotb ]

> icw > start > [ lvotb ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > b > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iizudxqjvfnky <<<<

> icw > start > [ iizudxqjvfnky ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > y > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cjcywjkfvukvveq <<<<

> icw > start > [ cjcywjkfvukvveq ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ jcywjkfvukvveq ]

> icw > start > [ jcywjkfvukvveq ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > k > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > v > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > v > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > q > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jrxd <<<<

> icw > start > [ jrxd ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> igwb <<<<

> icw > start > [ igwb ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dftdyelydzyummmt <<<<

> icw > start > [ dftdyelydzyummmt ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ ftdyelydzyummmt ]

> icw > start > [ ftdyelydzyummmt ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ tdyelydzyummmt ]

> icw > start > [ tdyelydzyummmt ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ dyelydzyummmt ]

> icw > start > [ dyelydzyummmt ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ yelydzyummmt ]

> icw > start > [ yelydzyummmt ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ elydzyummmt ]

> icw > start > [ elydzyummmt ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ lydzyummmt ]

> icw > start > [ lydzyummmt ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > split [ ly ][ dzyummmt ]

> icw > start > [ dzyummmt ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ zyummmt ]

> icw > start > [ zyummmt ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > d > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > split [ ye ][ lydzyummmt ]

> icw > start > [ lydzyummmt ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > split [ ly ][ dzyummmt ]

> icw > start > [ dzyummmt ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ zyummmt ]

> icw > start > [ zyummmt ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > m > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > m > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > t > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> uvfmaicednym <<<<

> icw > start > [ uvfmaicednym ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ vfmaicednym ]

> icw > start > [ vfmaicednym ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ fmaicednym ]

> icw > start > [ fmaicednym ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ maicednym ]

> icw > start > [ maicednym ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ aicednym ]

> icw > start > [ aicednym ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ icednym ]

> icw > start > [ icednym ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> oai <<<<

> icw > start > [ oai ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ ai ]

> icw > start > [ ai ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ i ]

> icw > start > [ i ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > split [ oa ][ i ]

> icw > start > [ i ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> higfkfavgeemcgo <<<<

> icw > start > [ higfkfavgeemcgo ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ igfkfavgeemcgo ]

> icw > start > [ igfkfavgeemcgo ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > o > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> naefganqo <<<<

> icw > start > [ naefganqo ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ aefganqo ]

> icw > start > [ aefganqo ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ efganqo ]

> icw > start > [ efganqo ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ fganqo ]

> icw > start > [ fganqo ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ ganqo ]

> icw > start > [ ganqo ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ anqo ]

> icw > start > [ anqo ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ nqo ]

> icw > start > [ nqo ] 6 <nil>
> icw > 0 > n > [wc] 6 > [i] 0
> icw > split [ n ][ qo ]

> icw > start > [ qo ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > split [ q ][ o ]

> icw > start > [ o ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > split [ fg ][ anqo ]

> icw > start > [ anqo ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ nqo ]

> icw > start > [ nqo ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ qo ]

> icw > start > [ qo ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ o ]

> icw > start > [ o ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> iqebfibigljbc <<<<

> icw > start > [ iqebfibigljbc ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ulicojzjfrc <<<<

> icw > start > [ ulicojzjfrc ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ licojzjfrc ]

> icw > start > [ licojzjfrc ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> igxprunj <<<<

> icw > start > [ igxprunj ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cymbrl <<<<

> icw > start > [ cymbrl ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ ymbrl ]

> icw > start > [ ymbrl ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ mbrl ]

> icw > start > [ mbrl ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ brl ]

> icw > start > [ brl ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ rl ]

> icw > start > [ rl ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ l ]

> icw > start > [ l ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > split [ br ][ l ]

> icw > start > [ l ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fqmwciqtynca <<<<

> icw > start > [ fqmwciqtynca ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ qmwciqtynca ]

> icw > start > [ qmwciqtynca ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ mwciqtynca ]

> icw > start > [ mwciqtynca ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ wciqtynca ]

> icw > start > [ wciqtynca ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ ciqtynca ]

> icw > start > [ ciqtynca ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ iqtynca ]

> icw > start > [ iqtynca ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > split [ qm ][ wciqtynca ]

> icw > start > [ wciqtynca ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ ciqtynca ]

> icw > start > [ ciqtynca ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ iqtynca ]

> icw > start > [ iqtynca ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > split [ fq ][ mwciqtynca ]

> icw > start > [ mwciqtynca ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ wciqtynca ]

> icw > start > [ wciqtynca ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ ciqtynca ]

> icw > start > [ ciqtynca ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ iqtynca ]

> icw > start > [ iqtynca ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > a > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zjyagi <<<<

> icw > start > [ zjyagi ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mzuejrttefhdwqc <<<<

> icw > start > [ mzuejrttefhdwqc ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ zuejrttefhdwqc ]

> icw > start > [ zuejrttefhdwqc ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > d > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > q > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > c > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zyiurxvf <<<<

> icw > start > [ zyiurxvf ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wrjxffzbjexsh <<<<

> icw > start > [ wrjxffzbjexsh ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ rjxffzbjexsh ]

> icw > start > [ rjxffzbjexsh ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ jxffzbjexsh ]

> icw > start > [ jxffzbjexsh ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > split [ wr ][ jxffzbjexsh ]

> icw > start > [ jxffzbjexsh ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > h > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wrxw <<<<

> icw > start > [ wrxw ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ rxw ]

> icw > start > [ rxw ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ xw ]

> icw > start > [ xw ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ w ]

> icw > start > [ w ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > split [ wr ][ xw ]

> icw > start > [ xw ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ w ]

> icw > start > [ w ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> mhrbdxjwi <<<<

> icw > start > [ mhrbdxjwi ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ hrbdxjwi ]

> icw > start > [ hrbdxjwi ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ rbdxjwi ]

> icw > start > [ rbdxjwi ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ bdxjwi ]

> icw > start > [ bdxjwi ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ dxjwi ]

> icw > start > [ dxjwi ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > split [ d ][ xjwi ]

> icw > start > [ xjwi ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ jwi ]

> icw > start > [ jwi ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> htknfa <<<<

> icw > start > [ htknfa ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ tknfa ]

> icw > start > [ tknfa ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ knfa ]

> icw > start > [ knfa ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ nfa ]

> icw > start > [ nfa ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ fa ]

> icw > start > [ fa ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ a ]

> icw > start > [ a ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wfrvxqdkhbwwef <<<<

> icw > start > [ wfrvxqdkhbwwef ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ frvxqdkhbwwef ]

> icw > start > [ frvxqdkhbwwef ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ rvxqdkhbwwef ]

> icw > start > [ rvxqdkhbwwef ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ vxqdkhbwwef ]

> icw > start > [ vxqdkhbwwef ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ xqdkhbwwef ]

> icw > start > [ xqdkhbwwef ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ qdkhbwwef ]

> icw > start > [ qdkhbwwef ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ dkhbwwef ]

> icw > start > [ dkhbwwef ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ khbwwef ]

> icw > start > [ khbwwef ] 7 <nil>
> icw > 0 > k > [wc] 7 > [i] 0
> icw > split [ k ][ hbwwef ]

> icw > start > [ hbwwef ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ bwwef ]

> icw > start > [ bwwef ] 9 <nil>
> icw > 0 > b > [wc] 9 > [i] 0
> icw > split [ b ][ wwef ]

> icw > start > [ wwef ] 10 <nil>
> icw > 0 > w > [wc] 10 > [i] 0
> icw > split [ w ][ wef ]

> icw > start > [ wef ] 11 <nil>
> icw > 0 > w > [wc] 11 > [i] 0
> icw > split [ w ][ ef ]

> icw > start > [ ef ] 12 <nil>
> icw > 0 > e > [wc] 12 > [i] 0
> icw > split [ e ][ f ]

> icw > start > [ f ] 13 <nil>
> icw > 0 > f > [wc] 13 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 10 > [i] 1
> icw > split [ ww ][ ef ]

> icw > start > [ ef ] 11 <nil>
> icw > 0 > e > [wc] 11 > [i] 0
> icw > split [ e ][ f ]

> icw > start > [ f ] 12 <nil>
> icw > 0 > f > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > split [ rv ][ xqdkhbwwef ]

> icw > start > [ xqdkhbwwef ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ qdkhbwwef ]

> icw > start > [ qdkhbwwef ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ dkhbwwef ]

> icw > start > [ dkhbwwef ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ khbwwef ]

> icw > start > [ khbwwef ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ hbwwef ]

> icw > start > [ hbwwef ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ bwwef ]

> icw > start > [ bwwef ] 8 <nil>
> icw > 0 > b > [wc] 8 > [i] 0
> icw > split [ b ][ wwef ]

> icw > start > [ wwef ] 9 <nil>
> icw > 0 > w > [wc] 9 > [i] 0
> icw > split [ w ][ wef ]

> icw > start > [ wef ] 10 <nil>
> icw > 0 > w > [wc] 10 > [i] 0
> icw > split [ w ][ ef ]

> icw > start > [ ef ] 11 <nil>
> icw > 0 > e > [wc] 11 > [i] 0
> icw > split [ e ][ f ]

> icw > start > [ f ] 12 <nil>
> icw > 0 > f > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 9 > [i] 1
> icw > split [ ww ][ ef ]

> icw > start > [ ef ] 10 <nil>
> icw > 0 > e > [wc] 10 > [i] 0
> icw > split [ e ][ f ]

> icw > start > [ f ] 11 <nil>
> icw > 0 > f > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 6 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 6 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > w > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > f > [wc] 0 > [i] 13
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vqsghhhutdget <<<<

> icw > start > [ vqsghhhutdget ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ qsghhhutdget ]

> icw > start > [ qsghhhutdget ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ sghhhutdget ]

> icw > start > [ sghhhutdget ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ ghhhutdget ]

> icw > start > [ ghhhutdget ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ hhhutdget ]

> icw > start > [ hhhutdget ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ hhutdget ]

> icw > start > [ hhutdget ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ hutdget ]

> icw > start > [ hutdget ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ utdget ]

> icw > start > [ utdget ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ tdget ]

> icw > start > [ tdget ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ dget ]

> icw > start > [ dget ] 9 <nil>
> icw > 0 > d > [wc] 9 > [i] 0
> icw > split [ d ][ get ]

> icw > start > [ get ] 10 <nil>
> icw > 0 > g > [wc] 10 > [i] 0
> icw > split [ g ][ et ]

> icw > start > [ et ] 11 <nil>
> icw > 0 > e > [wc] 11 > [i] 0
> icw > split [ e ][ t ]

> icw > start > [ t ] 12 <nil>
> icw > 0 > t > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 10 > [i] 1
> icw > split [ ge ][ t ]

> icw > start > [ t ] 11 <nil>
> icw > 0 > t > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > t > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> cwupzrts <<<<

> icw > start > [ cwupzrts ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ wupzrts ]

> icw > start > [ wupzrts ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ upzrts ]

> icw > start > [ upzrts ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ pzrts ]

> icw > start > [ pzrts ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ zrts ]

> icw > start > [ zrts ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > split [ cw ][ upzrts ]

> icw > start > [ upzrts ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ pzrts ]

> icw > start > [ pzrts ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ zrts ]

> icw > start > [ zrts ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hbjnb <<<<

> icw > start > [ hbjnb ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ bjnb ]

> icw > start > [ bjnb ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ jnb ]

> icw > start > [ jnb ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wpccoa <<<<

> icw > start > [ wpccoa ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ pccoa ]

> icw > start > [ pccoa ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ ccoa ]

> icw > start > [ ccoa ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ coa ]

> icw > start > [ coa ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ oa ]

> icw > start > [ oa ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ a ]

> icw > start > [ a ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> nx <<<<

> icw > start > [ nx ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ x ]

> icw > start > [ x ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> howbzhaoscgyk <<<<

> icw > start > [ howbzhaoscgyk ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ owbzhaoscgyk ]

> icw > start > [ owbzhaoscgyk ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ wbzhaoscgyk ]

> icw > start > [ wbzhaoscgyk ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ bzhaoscgyk ]

> icw > start > [ bzhaoscgyk ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ zhaoscgyk ]

> icw > start > [ zhaoscgyk ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > k > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bilt <<<<

> icw > start > [ bilt ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ ilt ]

> icw > start > [ ilt ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > split [ il ][ t ]

> icw > start > [ t ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wqqatye <<<<

> icw > start > [ wqqatye ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ qqatye ]

> icw > start > [ qqatye ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ qatye ]

> icw > start > [ qatye ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ atye ]

> icw > start > [ atye ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ tye ]

> icw > start > [ tye ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ ye ]

> icw > start > [ ye ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ e ]

> icw > start > [ e ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > split [ at ][ ye ]

> icw > start > [ ye ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ e ]

> icw > start > [ e ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > split [ qa ][ tye ]

> icw > start > [ tye ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ ye ]

> icw > start > [ ye ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ e ]

> icw > start > [ e ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zceuuwg <<<<

> icw > start > [ zceuuwg ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jxzon <<<<

> icw > start > [ jxzon ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kkfj <<<<

> icw > start > [ kkfj ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ kfj ]

> icw > start > [ kfj ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ fj ]

> icw > start > [ fj ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ j ]

> icw > start > [ j ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > split [ kk ][ fj ]

> icw > start > [ fj ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ j ]

> icw > start > [ j ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bwsezd <<<<

> icw > start > [ bwsezd ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ wsezd ]

> icw > start > [ wsezd ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ sezd ]

> icw > start > [ sezd ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ ezd ]

> icw > start > [ ezd ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ zd ]

> icw > start > [ zd ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ifdegsyjtswselk <<<<

> icw > start > [ ifdegsyjtswselk ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > split [ if ][ degsyjtswselk ]

> icw > start > [ degsyjtswselk ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ egsyjtswselk ]

> icw > start > [ egsyjtswselk ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ gsyjtswselk ]

> icw > start > [ gsyjtswselk ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ syjtswselk ]

> icw > start > [ syjtswselk ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ yjtswselk ]

> icw > start > [ yjtswselk ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ jtswselk ]

> icw > start > [ jtswselk ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > k > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xweimxlnzoh <<<<

> icw > start > [ xweimxlnzoh ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ weimxlnzoh ]

> icw > start > [ weimxlnzoh ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ eimxlnzoh ]

> icw > start > [ eimxlnzoh ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ imxlnzoh ]

> icw > start > [ imxlnzoh ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tqthlftjblnpht <<<<

> icw > start > [ tqthlftjblnpht ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ qthlftjblnpht ]

> icw > start > [ qthlftjblnpht ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ thlftjblnpht ]

> icw > start > [ thlftjblnpht ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ hlftjblnpht ]

> icw > start > [ hlftjblnpht ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ lftjblnpht ]

> icw > start > [ lftjblnpht ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > h > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > t > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ww <<<<

> icw > start > [ ww ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ w ]

> icw > start > [ w ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ss <<<<

> icw > start > [ ss ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ s ]

> icw > start > [ s ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> b <<<<

> icw > start > [ b ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jmruuqscwjp <<<<

> icw > start > [ jmruuqscwjp ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nxbk <<<<

> icw > start > [ nxbk ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ xbk ]

> icw > start > [ xbk ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ bk ]

> icw > start > [ bk ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ k ]

> icw > start > [ k ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > split [ nx ][ bk ]

> icw > start > [ bk ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ k ]

> icw > start > [ k ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wd <<<<

> icw > start > [ wd ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ d ]

> icw > start > [ d ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> cqkrtbxgzg <<<<

> icw > start > [ cqkrtbxgzg ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ qkrtbxgzg ]

> icw > start > [ qkrtbxgzg ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ krtbxgzg ]

> icw > start > [ krtbxgzg ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ rtbxgzg ]

> icw > start > [ rtbxgzg ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ tbxgzg ]

> icw > start > [ tbxgzg ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ bxgzg ]

> icw > start > [ bxgzg ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ xgzg ]

> icw > start > [ xgzg ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ gzg ]

> icw > start > [ gzg ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ zg ]

> icw > start > [ zg ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 8 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xhppcjnq <<<<

> icw > start > [ xhppcjnq ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ hppcjnq ]

> icw > start > [ hppcjnq ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ ppcjnq ]

> icw > start > [ ppcjnq ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ pcjnq ]

> icw > start > [ pcjnq ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ cjnq ]

> icw > start > [ cjnq ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ jnq ]

> icw > start > [ jnq ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cfq <<<<

> icw > start > [ cfq ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ fq ]

> icw > start > [ fq ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ q ]

> icw > start > [ q ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> tkkolzcfi <<<<

> icw > start > [ tkkolzcfi ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ kkolzcfi ]

> icw > start > [ kkolzcfi ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ kolzcfi ]

> icw > start > [ kolzcfi ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ olzcfi ]

> icw > start > [ olzcfi ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ lzcfi ]

> icw > start > [ lzcfi ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > split [ kk ][ olzcfi ]

> icw > start > [ olzcfi ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ lzcfi ]

> icw > start > [ lzcfi ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wblxki <<<<

> icw > start > [ wblxki ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ blxki ]

> icw > start > [ blxki ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ lxki ]

> icw > start > [ lxki ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ijeglxsvc <<<<

> icw > start > [ ijeglxsvc ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kcqjjwcwuhvzydm <<<<

> icw > start > [ kcqjjwcwuhvzydm ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ cqjjwcwuhvzydm ]

> icw > start > [ cqjjwcwuhvzydm ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ qjjwcwuhvzydm ]

> icw > start > [ qjjwcwuhvzydm ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ jjwcwuhvzydm ]

> icw > start > [ jjwcwuhvzydm ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > y > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > m > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gubqavlqffhrzz <<<<

> icw > start > [ gubqavlqffhrzz ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ ubqavlqffhrzz ]

> icw > start > [ ubqavlqffhrzz ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ bqavlqffhrzz ]

> icw > start > [ bqavlqffhrzz ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ qavlqffhrzz ]

> icw > start > [ qavlqffhrzz ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ avlqffhrzz ]

> icw > start > [ avlqffhrzz ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ vlqffhrzz ]

> icw > start > [ vlqffhrzz ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ lqffhrzz ]

> icw > start > [ lqffhrzz ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 6 > [i] 1
> icw > split [ lq ][ ffhrzz ]

> icw > start > [ ffhrzz ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ fhrzz ]

> icw > start > [ fhrzz ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ hrzz ]

> icw > start > [ hrzz ] 9 <nil>
> icw > 0 > h > [wc] 9 > [i] 0
> icw > split [ h ][ rzz ]

> icw > start > [ rzz ] 10 <nil>
> icw > 0 > r > [wc] 10 > [i] 0
> icw > split [ r ][ zz ]

> icw > start > [ zz ] 11 <nil>
> icw > 0 > z > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > split [ vl ][ qffhrzz ]

> icw > start > [ qffhrzz ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ ffhrzz ]

> icw > start > [ ffhrzz ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ fhrzz ]

> icw > start > [ fhrzz ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ hrzz ]

> icw > start > [ hrzz ] 9 <nil>
> icw > 0 > h > [wc] 9 > [i] 0
> icw > split [ h ][ rzz ]

> icw > start > [ rzz ] 10 <nil>
> icw > 0 > r > [wc] 10 > [i] 0
> icw > split [ r ][ zz ]

> icw > start > [ zz ] 11 <nil>
> icw > 0 > z > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > split [ av ][ lqffhrzz ]

> icw > start > [ lqffhrzz ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > split [ lq ][ ffhrzz ]

> icw > start > [ ffhrzz ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ fhrzz ]

> icw > start > [ fhrzz ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ hrzz ]

> icw > start > [ hrzz ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ rzz ]

> icw > start > [ rzz ] 9 <nil>
> icw > 0 > r > [wc] 9 > [i] 0
> icw > split [ r ][ zz ]

> icw > start > [ zz ] 10 <nil>
> icw > 0 > z > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > split [ qa ][ vlqffhrzz ]

> icw > start > [ vlqffhrzz ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ lqffhrzz ]

> icw > start > [ lqffhrzz ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > split [ lq ][ ffhrzz ]

> icw > start > [ ffhrzz ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ fhrzz ]

> icw > start > [ fhrzz ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ hrzz ]

> icw > start > [ hrzz ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ rzz ]

> icw > start > [ rzz ] 9 <nil>
> icw > 0 > r > [wc] 9 > [i] 0
> icw > split [ r ][ zz ]

> icw > start > [ zz ] 10 <nil>
> icw > 0 > z > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > split [ vl ][ qffhrzz ]

> icw > start > [ qffhrzz ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ ffhrzz ]

> icw > start > [ ffhrzz ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ fhrzz ]

> icw > start > [ fhrzz ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ hrzz ]

> icw > start > [ hrzz ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ rzz ]

> icw > start > [ rzz ] 9 <nil>
> icw > 0 > r > [wc] 9 > [i] 0
> icw > split [ r ][ zz ]

> icw > start > [ zz ] 10 <nil>
> icw > 0 > z > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > z > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > z > [wc] 0 > [i] 13
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hiwxrgftittd <<<<

> icw > start > [ hiwxrgftittd ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ iwxrgftittd ]

> icw > start > [ iwxrgftittd ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > d > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> caybc <<<<

> icw > start > [ caybc ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ aybc ]

> icw > start > [ aybc ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ ybc ]

> icw > start > [ ybc ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ bc ]

> icw > start > [ bc ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ c ]

> icw > start > [ c ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ncsyjlzlxyyklc <<<<

> icw > start > [ ncsyjlzlxyyklc ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ csyjlzlxyyklc ]

> icw > start > [ csyjlzlxyyklc ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ syjlzlxyyklc ]

> icw > start > [ syjlzlxyyklc ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ yjlzlxyyklc ]

> icw > start > [ yjlzlxyyklc ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ jlzlxyyklc ]

> icw > start > [ jlzlxyyklc ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > c > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> poxcgnexmaajzuha <<<<

> icw > start > [ poxcgnexmaajzuha ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ oxcgnexmaajzuha ]

> icw > start > [ oxcgnexmaajzuha ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ xcgnexmaajzuha ]

> icw > start > [ xcgnexmaajzuha ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ cgnexmaajzuha ]

> icw > start > [ cgnexmaajzuha ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ gnexmaajzuha ]

> icw > start > [ gnexmaajzuha ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ nexmaajzuha ]

> icw > start > [ nexmaajzuha ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ exmaajzuha ]

> icw > start > [ exmaajzuha ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > split [ e ][ xmaajzuha ]

> icw > start > [ xmaajzuha ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ maajzuha ]

> icw > start > [ maajzuha ] 8 <nil>
> icw > 0 > m > [wc] 8 > [i] 0
> icw > split [ m ][ aajzuha ]

> icw > start > [ aajzuha ] 9 <nil>
> icw > 0 > a > [wc] 9 > [i] 0
> icw > split [ a ][ ajzuha ]

> icw > start > [ ajzuha ] 10 <nil>
> icw > 0 > a > [wc] 10 > [i] 0
> icw > split [ a ][ jzuha ]

> icw > start > [ jzuha ] 11 <nil>
> icw > 0 > j > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 9 > [i] 1
> icw > split [ aa ][ jzuha ]

> icw > start > [ jzuha ] 10 <nil>
> icw > 0 > j > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 9 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 9 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > split [ po ][ xcgnexmaajzuha ]

> icw > start > [ xcgnexmaajzuha ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ cgnexmaajzuha ]

> icw > start > [ cgnexmaajzuha ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ gnexmaajzuha ]

> icw > start > [ gnexmaajzuha ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ nexmaajzuha ]

> icw > start > [ nexmaajzuha ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ exmaajzuha ]

> icw > start > [ exmaajzuha ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ xmaajzuha ]

> icw > start > [ xmaajzuha ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ maajzuha ]

> icw > start > [ maajzuha ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > split [ m ][ aajzuha ]

> icw > start > [ aajzuha ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > split [ a ][ ajzuha ]

> icw > start > [ ajzuha ] 9 <nil>
> icw > 0 > a > [wc] 9 > [i] 0
> icw > split [ a ][ jzuha ]

> icw > start > [ jzuha ] 10 <nil>
> icw > 0 > j > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 8 > [i] 1
> icw > split [ aa ][ jzuha ]

> icw > start > [ jzuha ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 8 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 8 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > z > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > u > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > h > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > a > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dhaccuualacyl <<<<

> icw > start > [ dhaccuualacyl ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ haccuualacyl ]

> icw > start > [ haccuualacyl ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ accuualacyl ]

> icw > start > [ accuualacyl ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ ccuualacyl ]

> icw > start > [ ccuualacyl ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ cuualacyl ]

> icw > start > [ cuualacyl ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ uualacyl ]

> icw > start > [ uualacyl ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ ualacyl ]

> icw > start > [ ualacyl ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ alacyl ]

> icw > start > [ alacyl ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ lacyl ]

> icw > start > [ lacyl ] 8 <nil>
> icw > 0 > l > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > split [ ua ][ lacyl ]

> icw > start > [ lacyl ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mtkewbprs <<<<

> icw > start > [ mtkewbprs ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ tkewbprs ]

> icw > start > [ tkewbprs ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ kewbprs ]

> icw > start > [ kewbprs ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ ewbprs ]

> icw > start > [ ewbprs ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ wbprs ]

> icw > start > [ wbprs ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ bprs ]

> icw > start > [ bprs ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ prs ]

> icw > start > [ prs ] 6 <nil>
> icw > 0 > p > [wc] 6 > [i] 0
> icw > split [ p ][ rs ]

> icw > start > [ rs ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ s ]

> icw > start > [ s ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> oncggqvr <<<<

> icw > start > [ oncggqvr ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ ncggqvr ]

> icw > start > [ ncggqvr ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ cggqvr ]

> icw > start > [ cggqvr ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ ggqvr ]

> icw > start > [ ggqvr ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ gqvr ]

> icw > start > [ gqvr ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ qvr ]

> icw > start > [ qvr ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ vr ]

> icw > start > [ vr ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ r ]

> icw > start > [ r ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> sqqoffmwkplsgbrp <<<<

> icw > start > [ sqqoffmwkplsgbrp ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ qqoffmwkplsgbrp ]

> icw > start > [ qqoffmwkplsgbrp ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ qoffmwkplsgbrp ]

> icw > start > [ qoffmwkplsgbrp ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ offmwkplsgbrp ]

> icw > start > [ offmwkplsgbrp ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ ffmwkplsgbrp ]

> icw > start > [ ffmwkplsgbrp ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ fmwkplsgbrp ]

> icw > start > [ fmwkplsgbrp ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ mwkplsgbrp ]

> icw > start > [ mwkplsgbrp ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ wkplsgbrp ]

> icw > start > [ wkplsgbrp ] 7 <nil>
> icw > 0 > w > [wc] 7 > [i] 0
> icw > split [ w ][ kplsgbrp ]

> icw > start > [ kplsgbrp ] 8 <nil>
> icw > 0 > k > [wc] 8 > [i] 0
> icw > split [ k ][ plsgbrp ]

> icw > start > [ plsgbrp ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > split [ p ][ lsgbrp ]

> icw > start > [ lsgbrp ] 10 <nil>
> icw > 0 > l > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 5 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > g > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > b > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > r > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > p > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ioajuppvqluhbdet <<<<

> icw > start > [ ioajuppvqluhbdet ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > l > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > u > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > b > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > e > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > t > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dzwwzaelmo <<<<

> icw > start > [ dzwwzaelmo ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ zwwzaelmo ]

> icw > start > [ zwwzaelmo ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> afumtqugec <<<<

> icw > start > [ afumtqugec ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ fumtqugec ]

> icw > start > [ fumtqugec ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ umtqugec ]

> icw > start > [ umtqugec ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ mtqugec ]

> icw > start > [ mtqugec ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ tqugec ]

> icw > start > [ tqugec ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ qugec ]

> icw > start > [ qugec ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ ugec ]

> icw > start > [ ugec ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ gec ]

> icw > start > [ gec ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ ec ]

> icw > start > [ ec ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ c ]

> icw > start > [ c ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > split [ ge ][ c ]

> icw > start > [ c ] 8 <nil>
> icw > 0 > c > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wglucmugwqi <<<<

> icw > start > [ wglucmugwqi ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ glucmugwqi ]

> icw > start > [ glucmugwqi ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ lucmugwqi ]

> icw > start > [ lucmugwqi ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zveswrjevfz <<<<

> icw > start > [ zveswrjevfz ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > z > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nxlbkak <<<<

> icw > start > [ nxlbkak ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ xlbkak ]

> icw > start > [ xlbkak ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ lbkak ]

> icw > start > [ lbkak ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > split [ nx ][ lbkak ]

> icw > start > [ lbkak ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pzcejvxzeoybb <<<<

> icw > start > [ pzcejvxzeoybb ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ zcejvxzeoybb ]

> icw > start > [ zcejvxzeoybb ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > b > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fd <<<<

> icw > start > [ fd ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ d ]

> icw > start > [ d ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vewj <<<<

> icw > start > [ vewj ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ ewj ]

> icw > start > [ ewj ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ wj ]

> icw > start > [ wj ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ j ]

> icw > start > [ j ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ivws <<<<

> icw > start > [ ivws ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zjhudtpqsfc <<<<

> icw > start > [ zjhudtpqsfc ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zcmukotirrxx <<<<

> icw > start > [ zcmukotirrxx ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > r > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zksmx <<<<

> icw > start > [ zksmx ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> umofzhhowyftz <<<<

> icw > start > [ umofzhhowyftz ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ mofzhhowyftz ]

> icw > start > [ mofzhhowyftz ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ ofzhhowyftz ]

> icw > start > [ ofzhhowyftz ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ fzhhowyftz ]

> icw > start > [ fzhhowyftz ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ zhhowyftz ]

> icw > start > [ zhhowyftz ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > split [ fz ][ hhowyftz ]

> icw > start > [ hhowyftz ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ howyftz ]

> icw > start > [ howyftz ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ owyftz ]

> icw > start > [ owyftz ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ wyftz ]

> icw > start > [ wyftz ] 7 <nil>
> icw > 0 > w > [wc] 7 > [i] 0
> icw > split [ w ][ yftz ]

> icw > start > [ yftz ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ ftz ]

> icw > start > [ ftz ] 9 <nil>
> icw > 0 > f > [wc] 9 > [i] 0
> icw > split [ f ][ tz ]

> icw > start > [ tz ] 10 <nil>
> icw > 0 > t > [wc] 10 > [i] 0
> icw > split [ t ][ z ]

> icw > start > [ z ] 11 <nil>
> icw > 0 > z > [wc] 11 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 5 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > z > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zbotrokaxaryxlk <<<<

> icw > start > [ zbotrokaxaryxlk ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > k > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ueolqk <<<<

> icw > start > [ ueolqk ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ eolqk ]

> icw > start > [ eolqk ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ olqk ]

> icw > start > [ olqk ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ lqk ]

> icw > start > [ lqk ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > split [ lq ][ k ]

> icw > start > [ k ] 4 <nil>
> icw > 0 > k > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > split [ eo ][ lqk ]

> icw > start > [ lqk ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > split [ lq ][ k ]

> icw > start > [ k ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> dxmzhoq <<<<

> icw > start > [ dxmzhoq ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ xmzhoq ]

> icw > start > [ xmzhoq ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ mzhoq ]

> icw > start > [ mzhoq ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ zhoq ]

> icw > start > [ zhoq ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zvu <<<<

> icw > start > [ zvu ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cjl <<<<

> icw > start > [ cjl ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ jl ]

> icw > start > [ jl ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> esfmqgvxwfy <<<<

> icw > start > [ esfmqgvxwfy ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ sfmqgvxwfy ]

> icw > start > [ sfmqgvxwfy ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ fmqgvxwfy ]

> icw > start > [ fmqgvxwfy ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ mqgvxwfy ]

> icw > start > [ mqgvxwfy ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ qgvxwfy ]

> icw > start > [ qgvxwfy ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ gvxwfy ]

> icw > start > [ gvxwfy ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ vxwfy ]

> icw > start > [ vxwfy ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ xwfy ]

> icw > start > [ xwfy ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ wfy ]

> icw > start > [ wfy ] 8 <nil>
> icw > 0 > w > [wc] 8 > [i] 0
> icw > split [ w ][ fy ]

> icw > start > [ fy ] 9 <nil>
> icw > 0 > f > [wc] 9 > [i] 0
> icw > split [ f ][ y ]

> icw > start > [ y ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> npbep <<<<

> icw > start > [ npbep ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ pbep ]

> icw > start > [ pbep ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ bep ]

> icw > start > [ bep ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ ep ]

> icw > start > [ ep ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ p ]

> icw > start > [ p ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > split [ np ][ bep ]

> icw > start > [ bep ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ ep ]

> icw > start > [ ep ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ p ]

> icw > start > [ p ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vbgjtbv <<<<

> icw > start > [ vbgjtbv ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ bgjtbv ]

> icw > start > [ bgjtbv ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ gjtbv ]

> icw > start > [ gjtbv ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ jtbv ]

> icw > start > [ jtbv ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> poeugoqynkbfiv <<<<

> icw > start > [ poeugoqynkbfiv ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ oeugoqynkbfiv ]

> icw > start > [ oeugoqynkbfiv ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ eugoqynkbfiv ]

> icw > start > [ eugoqynkbfiv ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ ugoqynkbfiv ]

> icw > start > [ ugoqynkbfiv ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ goqynkbfiv ]

> icw > start > [ goqynkbfiv ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ oqynkbfiv ]

> icw > start > [ oqynkbfiv ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ qynkbfiv ]

> icw > start > [ qynkbfiv ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ ynkbfiv ]

> icw > start > [ ynkbfiv ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ nkbfiv ]

> icw > start > [ nkbfiv ] 8 <nil>
> icw > 0 > n > [wc] 8 > [i] 0
> icw > split [ n ][ kbfiv ]

> icw > start > [ kbfiv ] 9 <nil>
> icw > 0 > k > [wc] 9 > [i] 0
> icw > split [ k ][ bfiv ]

> icw > start > [ bfiv ] 10 <nil>
> icw > 0 > b > [wc] 10 > [i] 0
> icw > split [ b ][ fiv ]

> icw > start > [ fiv ] 11 <nil>
> icw > 0 > f > [wc] 11 > [i] 0
> icw > split [ f ][ iv ]

> icw > start > [ iv ] 12 <nil>
> icw > 0 > i > [wc] 12 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 12 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > split [ po ][ eugoqynkbfiv ]

> icw > start > [ eugoqynkbfiv ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ ugoqynkbfiv ]

> icw > start > [ ugoqynkbfiv ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ goqynkbfiv ]

> icw > start > [ goqynkbfiv ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ oqynkbfiv ]

> icw > start > [ oqynkbfiv ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ qynkbfiv ]

> icw > start > [ qynkbfiv ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ ynkbfiv ]

> icw > start > [ ynkbfiv ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ nkbfiv ]

> icw > start > [ nkbfiv ] 7 <nil>
> icw > 0 > n > [wc] 7 > [i] 0
> icw > split [ n ][ kbfiv ]

> icw > start > [ kbfiv ] 8 <nil>
> icw > 0 > k > [wc] 8 > [i] 0
> icw > split [ k ][ bfiv ]

> icw > start > [ bfiv ] 9 <nil>
> icw > 0 > b > [wc] 9 > [i] 0
> icw > split [ b ][ fiv ]

> icw > start > [ fiv ] 10 <nil>
> icw > 0 > f > [wc] 10 > [i] 0
> icw > split [ f ][ iv ]

> icw > start > [ iv ] 11 <nil>
> icw > 0 > i > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 11 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > b > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > v > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fewjjscjrei <<<<

> icw > start > [ fewjjscjrei ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ ewjjscjrei ]

> icw > start > [ ewjjscjrei ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ wjjscjrei ]

> icw > start > [ wjjscjrei ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ jjscjrei ]

> icw > start > [ jjscjrei ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yqssxzsydgllfzmo <<<<

> icw > start > [ yqssxzsydgllfzmo ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ qssxzsydgllfzmo ]

> icw > start > [ qssxzsydgllfzmo ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ ssxzsydgllfzmo ]

> icw > start > [ ssxzsydgllfzmo ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ sxzsydgllfzmo ]

> icw > start > [ sxzsydgllfzmo ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ xzsydgllfzmo ]

> icw > start > [ xzsydgllfzmo ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ zsydgllfzmo ]

> icw > start > [ zsydgllfzmo ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > split [ xz ][ sydgllfzmo ]

> icw > start > [ sydgllfzmo ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ ydgllfzmo ]

> icw > start > [ ydgllfzmo ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ dgllfzmo ]

> icw > start > [ dgllfzmo ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ gllfzmo ]

> icw > start > [ gllfzmo ] 8 <nil>
> icw > 0 > g > [wc] 8 > [i] 0
> icw > split [ g ][ llfzmo ]

> icw > start > [ llfzmo ] 9 <nil>
> icw > 0 > l > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 6 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > split [ ss ][ xzsydgllfzmo ]

> icw > start > [ xzsydgllfzmo ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ zsydgllfzmo ]

> icw > start > [ zsydgllfzmo ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > split [ xz ][ sydgllfzmo ]

> icw > start > [ sydgllfzmo ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ ydgllfzmo ]

> icw > start > [ ydgllfzmo ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ dgllfzmo ]

> icw > start > [ dgllfzmo ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ gllfzmo ]

> icw > start > [ gllfzmo ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ llfzmo ]

> icw > start > [ llfzmo ] 8 <nil>
> icw > 0 > l > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 5 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > z > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > m > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > o > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> urxkwcypctjkabi <<<<

> icw > start > [ urxkwcypctjkabi ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ rxkwcypctjkabi ]

> icw > start > [ rxkwcypctjkabi ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ xkwcypctjkabi ]

> icw > start > [ xkwcypctjkabi ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ kwcypctjkabi ]

> icw > start > [ kwcypctjkabi ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ wcypctjkabi ]

> icw > start > [ wcypctjkabi ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ cypctjkabi ]

> icw > start > [ cypctjkabi ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ ypctjkabi ]

> icw > start > [ ypctjkabi ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ pctjkabi ]

> icw > start > [ pctjkabi ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ ctjkabi ]

> icw > start > [ ctjkabi ] 8 <nil>
> icw > 0 > c > [wc] 8 > [i] 0
> icw > split [ c ][ tjkabi ]

> icw > start > [ tjkabi ] 9 <nil>
> icw > 0 > t > [wc] 9 > [i] 0
> icw > split [ t ][ jkabi ]

> icw > start > [ jkabi ] 10 <nil>
> icw > 0 > j > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 5 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > a > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > b > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > i > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wqtldwhjouas <<<<

> icw > start > [ wqtldwhjouas ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ qtldwhjouas ]

> icw > start > [ qtldwhjouas ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ tldwhjouas ]

> icw > start > [ tldwhjouas ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ ldwhjouas ]

> icw > start > [ ldwhjouas ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tovdtkr <<<<

> icw > start > [ tovdtkr ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ ovdtkr ]

> icw > start > [ ovdtkr ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ vdtkr ]

> icw > start > [ vdtkr ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ dtkr ]

> icw > start > [ dtkr ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ tkr ]

> icw > start > [ tkr ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ kr ]

> icw > start > [ kr ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ r ]

> icw > start > [ r ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> onzgeyddkqwuhnim <<<<

> icw > start > [ onzgeyddkqwuhnim ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ nzgeyddkqwuhnim ]

> icw > start > [ nzgeyddkqwuhnim ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ zgeyddkqwuhnim ]

> icw > start > [ zgeyddkqwuhnim ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > h > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > n > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > i > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > m > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ffxviyvsktqrfa <<<<

> icw > start > [ ffxviyvsktqrfa ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ fxviyvsktqrfa ]

> icw > start > [ fxviyvsktqrfa ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ xviyvsktqrfa ]

> icw > start > [ xviyvsktqrfa ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ viyvsktqrfa ]

> icw > start > [ viyvsktqrfa ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ iyvsktqrfa ]

> icw > start > [ iyvsktqrfa ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > a > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qujhd <<<<

> icw > start > [ qujhd ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ ujhd ]

> icw > start > [ ujhd ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ jhd ]

> icw > start > [ jhd ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pvcz <<<<

> icw > start > [ pvcz ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ vcz ]

> icw > start > [ vcz ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ cz ]

> icw > start > [ cz ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ z ]

> icw > start > [ z ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hiyjlkxmeplnrvxg <<<<

> icw > start > [ hiyjlkxmeplnrvxg ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ iyjlkxmeplnrvxg ]

> icw > start > [ iyjlkxmeplnrvxg ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > n > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > r > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > v > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > x > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > g > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hdykehkefp <<<<

> icw > start > [ hdykehkefp ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ dykehkefp ]

> icw > start > [ dykehkefp ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ ykehkefp ]

> icw > start > [ ykehkefp ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ kehkefp ]

> icw > start > [ kehkefp ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ ehkefp ]

> icw > start > [ ehkefp ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ hkefp ]

> icw > start > [ hkefp ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ kefp ]

> icw > start > [ kefp ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ efp ]

> icw > start > [ efp ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ fp ]

> icw > start > [ fp ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ p ]

> icw > start > [ p ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vepcxhozpjxtreyn <<<<

> icw > start > [ vepcxhozpjxtreyn ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ epcxhozpjxtreyn ]

> icw > start > [ epcxhozpjxtreyn ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ pcxhozpjxtreyn ]

> icw > start > [ pcxhozpjxtreyn ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ cxhozpjxtreyn ]

> icw > start > [ cxhozpjxtreyn ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ xhozpjxtreyn ]

> icw > start > [ xhozpjxtreyn ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ hozpjxtreyn ]

> icw > start > [ hozpjxtreyn ] 5 <nil>
> icw > 0 > h > [wc] 5 > [i] 0
> icw > split [ h ][ ozpjxtreyn ]

> icw > start > [ ozpjxtreyn ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ zpjxtreyn ]

> icw > start > [ zpjxtreyn ] 7 <nil>
> icw > 0 > z > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > split [ vep ][ cxhozpjxtreyn ]

> icw > start > [ cxhozpjxtreyn ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ xhozpjxtreyn ]

> icw > start > [ xhozpjxtreyn ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ hozpjxtreyn ]

> icw > start > [ hozpjxtreyn ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ ozpjxtreyn ]

> icw > start > [ ozpjxtreyn ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ zpjxtreyn ]

> icw > start > [ zpjxtreyn ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > r > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > y > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > n > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> liguhuxudbnh <<<<

> icw > start > [ liguhuxudbnh ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> f <<<<

> icw > start > [ f ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ordxzm <<<<

> icw > start > [ ordxzm ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ rdxzm ]

> icw > start > [ rdxzm ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ dxzm ]

> icw > start > [ dxzm ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ xzm ]

> icw > start > [ xzm ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ zm ]

> icw > start > [ zm ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > split [ xz ][ m ]

> icw > start > [ m ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> klgohcmmbukz <<<<

> icw > start > [ klgohcmmbukz ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ lgohcmmbukz ]

> icw > start > [ lgohcmmbukz ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > k > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yrmooliaobbnlap <<<<

> icw > start > [ yrmooliaobbnlap ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ rmooliaobbnlap ]

> icw > start > [ rmooliaobbnlap ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ mooliaobbnlap ]

> icw > start > [ mooliaobbnlap ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ ooliaobbnlap ]

> icw > start > [ ooliaobbnlap ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ oliaobbnlap ]

> icw > start > [ oliaobbnlap ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ liaobbnlap ]

> icw > start > [ liaobbnlap ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > b > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > n > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > a > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > p > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dutnbetocxylcey <<<<

> icw > start > [ dutnbetocxylcey ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ utnbetocxylcey ]

> icw > start > [ utnbetocxylcey ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ tnbetocxylcey ]

> icw > start > [ tnbetocxylcey ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ nbetocxylcey ]

> icw > start > [ nbetocxylcey ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ betocxylcey ]

> icw > start > [ betocxylcey ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ etocxylcey ]

> icw > start > [ etocxylcey ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ tocxylcey ]

> icw > start > [ tocxylcey ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ ocxylcey ]

> icw > start > [ ocxylcey ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ cxylcey ]

> icw > start > [ cxylcey ] 8 <nil>
> icw > 0 > c > [wc] 8 > [i] 0
> icw > split [ c ][ xylcey ]

> icw > start > [ xylcey ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ ylcey ]

> icw > start > [ ylcey ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ lcey ]

> icw > start > [ lcey ] 11 <nil>
> icw > 0 > l > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > y > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ywdsjegd <<<<

> icw > start > [ ywdsjegd ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ wdsjegd ]

> icw > start > [ wdsjegd ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ dsjegd ]

> icw > start > [ dsjegd ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ sjegd ]

> icw > start > [ sjegd ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ jegd ]

> icw > start > [ jegd ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > split [ wd ][ sjegd ]

> icw > start > [ sjegd ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ jegd ]

> icw > start > [ jegd ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > split [ yw ][ dsjegd ]

> icw > start > [ dsjegd ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ sjegd ]

> icw > start > [ sjegd ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ jegd ]

> icw > start > [ jegd ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cr <<<<

> icw > start > [ cr ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ r ]

> icw > start > [ r ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> blbxhjsgcuoxmqft <<<<

> icw > start > [ blbxhjsgcuoxmqft ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ lbxhjsgcuoxmqft ]

> icw > start > [ lbxhjsgcuoxmqft ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > m > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > q > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > f > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > t > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ngzdc <<<<

> icw > start > [ ngzdc ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ gzdc ]

> icw > start > [ gzdc ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ zdc ]

> icw > start > [ zdc ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > split [ zd ][ c ]

> icw > start > [ c ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ ng ][ zdc ]

> icw > start > [ zdc ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > split [ zd ][ c ]

> icw > start > [ c ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> srfyjjumcbxole <<<<

> icw > start > [ srfyjjumcbxole ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ rfyjjumcbxole ]

> icw > start > [ rfyjjumcbxole ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ fyjjumcbxole ]

> icw > start > [ fyjjumcbxole ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ yjjumcbxole ]

> icw > start > [ yjjumcbxole ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ jjumcbxole ]

> icw > start > [ jjumcbxole ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dazwzwtdjoyuqeqj <<<<

> icw > start > [ dazwzwtdjoyuqeqj ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ azwzwtdjoyuqeqj ]

> icw > start > [ azwzwtdjoyuqeqj ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ zwzwtdjoyuqeqj ]

> icw > start > [ zwzwtdjoyuqeqj ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > q > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > j > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xazjarqgfm <<<<

> icw > start > [ xazjarqgfm ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ azjarqgfm ]

> icw > start > [ azjarqgfm ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ zjarqgfm ]

> icw > start > [ zjarqgfm ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fxyfqbeoktcc <<<<

> icw > start > [ fxyfqbeoktcc ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ xyfqbeoktcc ]

> icw > start > [ xyfqbeoktcc ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ yfqbeoktcc ]

> icw > start > [ yfqbeoktcc ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ fqbeoktcc ]

> icw > start > [ fqbeoktcc ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ qbeoktcc ]

> icw > start > [ qbeoktcc ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ beoktcc ]

> icw > start > [ beoktcc ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ eoktcc ]

> icw > start > [ eoktcc ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > split [ e ][ oktcc ]

> icw > start > [ oktcc ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ ktcc ]

> icw > start > [ ktcc ] 8 <nil>
> icw > 0 > k > [wc] 8 > [i] 0
> icw > split [ k ][ tcc ]

> icw > start > [ tcc ] 9 <nil>
> icw > 0 > t > [wc] 9 > [i] 0
> icw > split [ t ][ cc ]

> icw > start > [ cc ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > split [ c ][ c ]

> icw > start > [ c ] 11 <nil>
> icw > 0 > c > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 9 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > split [ eo ][ ktcc ]

> icw > start > [ ktcc ] 7 <nil>
> icw > 0 > k > [wc] 7 > [i] 0
> icw > split [ k ][ tcc ]

> icw > start > [ tcc ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ cc ]

> icw > start > [ cc ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > split [ c ][ c ]

> icw > start > [ c ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > k > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > split [ fq ][ beoktcc ]

> icw > start > [ beoktcc ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ eoktcc ]

> icw > start > [ eoktcc ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ oktcc ]

> icw > start > [ oktcc ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ ktcc ]

> icw > start > [ ktcc ] 7 <nil>
> icw > 0 > k > [wc] 7 > [i] 0
> icw > split [ k ][ tcc ]

> icw > start > [ tcc ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ cc ]

> icw > start > [ cc ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > split [ c ][ c ]

> icw > start > [ c ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > split [ eo ][ ktcc ]

> icw > start > [ ktcc ] 6 <nil>
> icw > 0 > k > [wc] 6 > [i] 0
> icw > split [ k ][ tcc ]

> icw > start > [ tcc ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ cc ]

> icw > start > [ cc ] 8 <nil>
> icw > 0 > c > [wc] 8 > [i] 0
> icw > split [ c ][ c ]

> icw > start > [ c ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 7 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > k > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> qrsjchxp <<<<

> icw > start > [ qrsjchxp ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ rsjchxp ]

> icw > start > [ rsjchxp ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ sjchxp ]

> icw > start > [ sjchxp ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ jchxp ]

> icw > start > [ jchxp ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iltaqzawhgu <<<<

> icw > start > [ iltaqzawhgu ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > split [ il ][ taqzawhgu ]

> icw > start > [ taqzawhgu ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ aqzawhgu ]

> icw > start > [ aqzawhgu ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ qzawhgu ]

> icw > start > [ qzawhgu ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ zawhgu ]

> icw > start > [ zawhgu ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > split [ ta ][ qzawhgu ]

> icw > start > [ qzawhgu ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ zawhgu ]

> icw > start > [ zawhgu ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > u > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> sgenjcfxr <<<<

> icw > start > [ sgenjcfxr ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ genjcfxr ]

> icw > start > [ genjcfxr ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ enjcfxr ]

> icw > start > [ enjcfxr ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ njcfxr ]

> icw > start > [ njcfxr ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ jcfxr ]

> icw > start > [ jcfxr ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > split [ ge ][ njcfxr ]

> icw > start > [ njcfxr ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ jcfxr ]

> icw > start > [ jcfxr ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yfikp <<<<

> icw > start > [ yfikp ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ fikp ]

> icw > start > [ fikp ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ ikp ]

> icw > start > [ ikp ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dvwhbyumthkiktb <<<<

> icw > start > [ dvwhbyumthkiktb ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ vwhbyumthkiktb ]

> icw > start > [ vwhbyumthkiktb ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ whbyumthkiktb ]

> icw > start > [ whbyumthkiktb ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ hbyumthkiktb ]

> icw > start > [ hbyumthkiktb ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ byumthkiktb ]

> icw > start > [ byumthkiktb ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ yumthkiktb ]

> icw > start > [ yumthkiktb ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ umthkiktb ]

> icw > start > [ umthkiktb ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ mthkiktb ]

> icw > start > [ mthkiktb ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > split [ m ][ thkiktb ]

> icw > start > [ thkiktb ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ hkiktb ]

> icw > start > [ hkiktb ] 9 <nil>
> icw > 0 > h > [wc] 9 > [i] 0
> icw > split [ h ][ kiktb ]

> icw > start > [ kiktb ] 10 <nil>
> icw > 0 > k > [wc] 10 > [i] 0
> icw > split [ k ][ iktb ]

> icw > start > [ iktb ] 11 <nil>
> icw > 0 > i > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 8 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 8 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > split [ yu ][ mthkiktb ]

> icw > start > [ mthkiktb ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ thkiktb ]

> icw > start > [ thkiktb ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ hkiktb ]

> icw > start > [ hkiktb ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ kiktb ]

> icw > start > [ kiktb ] 9 <nil>
> icw > 0 > k > [wc] 9 > [i] 0
> icw > split [ k ][ iktb ]

> icw > start > [ iktb ] 10 <nil>
> icw > 0 > i > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > k > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > k > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > t > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > b > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> walsx <<<<

> icw > start > [ walsx ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ alsx ]

> icw > start > [ alsx ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ lsx ]

> icw > start > [ lsx ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jyajrkcvysicisab <<<<

> icw > start > [ jyajrkcvysicisab ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > split [ jy ][ ajrkcvysicisab ]

> icw > start > [ ajrkcvysicisab ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ jrkcvysicisab ]

> icw > start > [ jrkcvysicisab ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > a > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > b > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> brdeumb <<<<

> icw > start > [ brdeumb ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ rdeumb ]

> icw > start > [ rdeumb ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ deumb ]

> icw > start > [ deumb ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ eumb ]

> icw > start > [ eumb ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ umb ]

> icw > start > [ umb ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ mb ]

> icw > start > [ mb ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ b ]

> icw > start > [ b ] 6 <nil>
> icw > 0 > b > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > split [ br ][ deumb ]

> icw > start > [ deumb ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ eumb ]

> icw > start > [ eumb ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ umb ]

> icw > start > [ umb ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ mb ]

> icw > start > [ mb ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ b ]

> icw > start > [ b ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> tviihjwxdcz <<<<

> icw > start > [ tviihjwxdcz ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ viihjwxdcz ]

> icw > start > [ viihjwxdcz ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ iihjwxdcz ]

> icw > start > [ iihjwxdcz ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > z > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dnrrgmem <<<<

> icw > start > [ dnrrgmem ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ nrrgmem ]

> icw > start > [ nrrgmem ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ rrgmem ]

> icw > start > [ rrgmem ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ rgmem ]

> icw > start > [ rgmem ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ gmem ]

> icw > start > [ gmem ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ mem ]

> icw > start > [ mem ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ em ]

> icw > start > [ em ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > split [ e ][ m ]

> icw > start > [ m ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ydgxlrjzucxyid <<<<

> icw > start > [ ydgxlrjzucxyid ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ dgxlrjzucxyid ]

> icw > start > [ dgxlrjzucxyid ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ gxlrjzucxyid ]

> icw > start > [ gxlrjzucxyid ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ xlrjzucxyid ]

> icw > start > [ xlrjzucxyid ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ lrjzucxyid ]

> icw > start > [ lrjzucxyid ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cdvdpvjlagwmg <<<<

> icw > start > [ cdvdpvjlagwmg ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ dvdpvjlagwmg ]

> icw > start > [ dvdpvjlagwmg ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ vdpvjlagwmg ]

> icw > start > [ vdpvjlagwmg ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ dpvjlagwmg ]

> icw > start > [ dpvjlagwmg ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ pvjlagwmg ]

> icw > start > [ pvjlagwmg ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ vjlagwmg ]

> icw > start > [ vjlagwmg ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ jlagwmg ]

> icw > start > [ jlagwmg ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > g > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ngnpxjkxims <<<<

> icw > start > [ ngnpxjkxims ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ gnpxjkxims ]

> icw > start > [ gnpxjkxims ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ npxjkxims ]

> icw > start > [ npxjkxims ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ pxjkxims ]

> icw > start > [ pxjkxims ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ xjkxims ]

> icw > start > [ xjkxims ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ jkxims ]

> icw > start > [ jkxims ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > split [ np ][ xjkxims ]

> icw > start > [ xjkxims ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ jkxims ]

> icw > start > [ jkxims ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > split [ ng ][ npxjkxims ]

> icw > start > [ npxjkxims ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ pxjkxims ]

> icw > start > [ pxjkxims ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ xjkxims ]

> icw > start > [ xjkxims ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ jkxims ]

> icw > start > [ jkxims ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > split [ np ][ xjkxims ]

> icw > start > [ xjkxims ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ jkxims ]

> icw > start > [ jkxims ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gvyhnchlimsxc <<<<

> icw > start > [ gvyhnchlimsxc ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ vyhnchlimsxc ]

> icw > start > [ vyhnchlimsxc ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ yhnchlimsxc ]

> icw > start > [ yhnchlimsxc ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ hnchlimsxc ]

> icw > start > [ hnchlimsxc ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ nchlimsxc ]

> icw > start > [ nchlimsxc ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ chlimsxc ]

> icw > start > [ chlimsxc ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ hlimsxc ]

> icw > start > [ hlimsxc ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ limsxc ]

> icw > start > [ limsxc ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 7 > [i] 2
> icw > split [ lim ][ sxc ]

> icw > start > [ sxc ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > split [ s ][ xc ]

> icw > start > [ xc ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ c ]

> icw > start > [ c ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 3 > s > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> w <<<<

> icw > start > [ w ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jtizpezjl <<<<

> icw > start > [ jtizpezjl ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qe <<<<

> icw > start > [ qe ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ e ]

> icw > start > [ e ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> rjzv <<<<

> icw > start > [ rjzv ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ jzv ]

> icw > start > [ jzv ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vhnqvi <<<<

> icw > start > [ vhnqvi ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ hnqvi ]

> icw > start > [ hnqvi ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ nqvi ]

> icw > start > [ nqvi ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ qvi ]

> icw > start > [ qvi ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ vi ]

> icw > start > [ vi ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ i ]

> icw > start > [ i ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qm <<<<

> icw > start > [ qm ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ m ]

> icw > start > [ m ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> iedzqswrsnfmnn <<<<

> icw > start > [ iedzqswrsnfmnn ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > s > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > n > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lt <<<<

> icw > start > [ lt ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> utqfcqyrrwm <<<<

> icw > start > [ utqfcqyrrwm ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ tqfcqyrrwm ]

> icw > start > [ tqfcqyrrwm ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ qfcqyrrwm ]

> icw > start > [ qfcqyrrwm ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ fcqyrrwm ]

> icw > start > [ fcqyrrwm ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ cqyrrwm ]

> icw > start > [ cqyrrwm ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ qyrrwm ]

> icw > start > [ qyrrwm ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ yrrwm ]

> icw > start > [ yrrwm ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ rrwm ]

> icw > start > [ rrwm ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ rwm ]

> icw > start > [ rwm ] 8 <nil>
> icw > 0 > r > [wc] 8 > [i] 0
> icw > split [ r ][ wm ]

> icw > start > [ wm ] 9 <nil>
> icw > 0 > w > [wc] 9 > [i] 0
> icw > split [ w ][ m ]

> icw > start > [ m ] 10 <nil>
> icw > 0 > m > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> wtelvsqrru <<<<

> icw > start > [ wtelvsqrru ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ telvsqrru ]

> icw > start > [ telvsqrru ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ elvsqrru ]

> icw > start > [ elvsqrru ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ lvsqrru ]

> icw > start > [ lvsqrru ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fjwrhjcrtbcytn <<<<

> icw > start > [ fjwrhjcrtbcytn ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ jwrhjcrtbcytn ]

> icw > start > [ jwrhjcrtbcytn ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > t > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > n > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qmqxceuohpiffaq <<<<

> icw > start > [ qmqxceuohpiffaq ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ mqxceuohpiffaq ]

> icw > start > [ mqxceuohpiffaq ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ qxceuohpiffaq ]

> icw > start > [ qxceuohpiffaq ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ xceuohpiffaq ]

> icw > start > [ xceuohpiffaq ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ ceuohpiffaq ]

> icw > start > [ ceuohpiffaq ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ euohpiffaq ]

> icw > start > [ euohpiffaq ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ uohpiffaq ]

> icw > start > [ uohpiffaq ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ ohpiffaq ]

> icw > start > [ ohpiffaq ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ hpiffaq ]

> icw > start > [ hpiffaq ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ piffaq ]

> icw > start > [ piffaq ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > split [ p ][ iffaq ]

> icw > start > [ iffaq ] 10 <nil>
> icw > 0 > i > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > split [ if ][ faq ]

> icw > start > [ faq ] 11 <nil>
> icw > 0 > f > [wc] 11 > [i] 0
> icw > split [ f ][ aq ]

> icw > start > [ aq ] 12 <nil>
> icw > 0 > a > [wc] 12 > [i] 0
> icw > split [ a ][ q ]

> icw > start > [ q ] 13 <nil>
> icw > 0 > q > [wc] 13 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 12 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > split [ qm ][ qxceuohpiffaq ]

> icw > start > [ qxceuohpiffaq ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ xceuohpiffaq ]

> icw > start > [ xceuohpiffaq ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ ceuohpiffaq ]

> icw > start > [ ceuohpiffaq ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ euohpiffaq ]

> icw > start > [ euohpiffaq ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ uohpiffaq ]

> icw > start > [ uohpiffaq ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ ohpiffaq ]

> icw > start > [ ohpiffaq ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ hpiffaq ]

> icw > start > [ hpiffaq ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ piffaq ]

> icw > start > [ piffaq ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ iffaq ]

> icw > start > [ iffaq ] 9 <nil>
> icw > 0 > i > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > split [ if ][ faq ]

> icw > start > [ faq ] 10 <nil>
> icw > 0 > f > [wc] 10 > [i] 0
> icw > split [ f ][ aq ]

> icw > start > [ aq ] 11 <nil>
> icw > 0 > a > [wc] 11 > [i] 0
> icw > split [ a ][ q ]

> icw > start > [ q ] 12 <nil>
> icw > 0 > q > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 11 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > a > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > q > [wc] 0 > [i] 14
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> rmoybqjjgdyo <<<<

> icw > start > [ rmoybqjjgdyo ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ moybqjjgdyo ]

> icw > start > [ moybqjjgdyo ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ oybqjjgdyo ]

> icw > start > [ oybqjjgdyo ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ ybqjjgdyo ]

> icw > start > [ ybqjjgdyo ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ bqjjgdyo ]

> icw > start > [ bqjjgdyo ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ qjjgdyo ]

> icw > start > [ qjjgdyo ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ jjgdyo ]

> icw > start > [ jjgdyo ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pmxttqftypfexlv <<<<

> icw > start > [ pmxttqftypfexlv ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ mxttqftypfexlv ]

> icw > start > [ mxttqftypfexlv ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ xttqftypfexlv ]

> icw > start > [ xttqftypfexlv ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ ttqftypfexlv ]

> icw > start > [ ttqftypfexlv ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ tqftypfexlv ]

> icw > start > [ tqftypfexlv ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ qftypfexlv ]

> icw > start > [ qftypfexlv ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ ftypfexlv ]

> icw > start > [ ftypfexlv ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ typfexlv ]

> icw > start > [ typfexlv ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ ypfexlv ]

> icw > start > [ ypfexlv ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ pfexlv ]

> icw > start > [ pfexlv ] 9 <nil>
> icw > 0 > p > [wc] 9 > [i] 0
> icw > split [ p ][ fexlv ]

> icw > start > [ fexlv ] 10 <nil>
> icw > 0 > f > [wc] 10 > [i] 0
> icw > split [ f ][ exlv ]

> icw > start > [ exlv ] 11 <nil>
> icw > 0 > e > [wc] 11 > [i] 0
> icw > split [ e ][ xlv ]

> icw > start > [ xlv ] 12 <nil>
> icw > 0 > x > [wc] 12 > [i] 0
> icw > split [ x ][ lv ]

> icw > start > [ lv ] 13 <nil>
> icw > 0 > l > [wc] 13 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 13 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 11 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 11 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 7 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 7 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > l > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > v > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tg <<<<

> icw > start > [ tg ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ g ]

> icw > start > [ g ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> qa <<<<

> icw > start > [ qa ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ a ]

> icw > start > [ a ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> iqbqjlnpbf <<<<

> icw > start > [ iqbqjlnpbf ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kgaynkddbzllecd <<<<

> icw > start > [ kgaynkddbzllecd ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ gaynkddbzllecd ]

> icw > start > [ gaynkddbzllecd ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ aynkddbzllecd ]

> icw > start > [ aynkddbzllecd ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ ynkddbzllecd ]

> icw > start > [ ynkddbzllecd ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ nkddbzllecd ]

> icw > start > [ nkddbzllecd ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ kddbzllecd ]

> icw > start > [ kddbzllecd ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ ddbzllecd ]

> icw > start > [ ddbzllecd ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ dbzllecd ]

> icw > start > [ dbzllecd ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ bzllecd ]

> icw > start > [ bzllecd ] 8 <nil>
> icw > 0 > b > [wc] 8 > [i] 0
> icw > split [ b ][ zllecd ]

> icw > start > [ zllecd ] 9 <nil>
> icw > 0 > z > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 5 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > c > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > d > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tccvslp <<<<

> icw > start > [ tccvslp ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ ccvslp ]

> icw > start > [ ccvslp ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ cvslp ]

> icw > start > [ cvslp ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ vslp ]

> icw > start > [ vslp ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ slp ]

> icw > start > [ slp ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ lp ]

> icw > start > [ lp ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> curkxfoimnw <<<<

> icw > start > [ curkxfoimnw ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ urkxfoimnw ]

> icw > start > [ urkxfoimnw ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ rkxfoimnw ]

> icw > start > [ rkxfoimnw ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ kxfoimnw ]

> icw > start > [ kxfoimnw ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ xfoimnw ]

> icw > start > [ xfoimnw ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ foimnw ]

> icw > start > [ foimnw ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ oimnw ]

> icw > start > [ oimnw ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ imnw ]

> icw > start > [ imnw ] 7 <nil>
> icw > 0 > i > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fvnyqkzlheruxr <<<<

> icw > start > [ fvnyqkzlheruxr ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ vnyqkzlheruxr ]

> icw > start > [ vnyqkzlheruxr ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ nyqkzlheruxr ]

> icw > start > [ nyqkzlheruxr ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ yqkzlheruxr ]

> icw > start > [ yqkzlheruxr ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ qkzlheruxr ]

> icw > start > [ qkzlheruxr ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ kzlheruxr ]

> icw > start > [ kzlheruxr ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ zlheruxr ]

> icw > start > [ zlheruxr ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > r > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iiygnzfov <<<<

> icw > start > [ iiygnzfov ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> coqs <<<<

> icw > start > [ coqs ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ oqs ]

> icw > start > [ oqs ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ qs ]

> icw > start > [ qs ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ s ]

> icw > start > [ s ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> oa <<<<

> icw > start > [ oa ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ a ]

> icw > start > [ a ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> eiu <<<<

> icw > start > [ eiu ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ iu ]

> icw > start > [ iu ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vzemmxtklis <<<<

> icw > start > [ vzemmxtklis ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ zemmxtklis ]

> icw > start > [ zemmxtklis ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lxu <<<<

> icw > start > [ lxu ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nrwsjaxzwmh <<<<

> icw > start > [ nrwsjaxzwmh ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ rwsjaxzwmh ]

> icw > start > [ rwsjaxzwmh ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ wsjaxzwmh ]

> icw > start > [ wsjaxzwmh ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ sjaxzwmh ]

> icw > start > [ sjaxzwmh ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ jaxzwmh ]

> icw > start > [ jaxzwmh ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tdayz <<<<

> icw > start > [ tdayz ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ dayz ]

> icw > start > [ dayz ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ ayz ]

> icw > start > [ ayz ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ yz ]

> icw > start > [ yz ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ z ]

> icw > start > [ z ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> oxbbemejgosgcynf <<<<

> icw > start > [ oxbbemejgosgcynf ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ xbbemejgosgcynf ]

> icw > start > [ xbbemejgosgcynf ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ bbemejgosgcynf ]

> icw > start > [ bbemejgosgcynf ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ bemejgosgcynf ]

> icw > start > [ bemejgosgcynf ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ emejgosgcynf ]

> icw > start > [ emejgosgcynf ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ mejgosgcynf ]

> icw > start > [ mejgosgcynf ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ ejgosgcynf ]

> icw > start > [ ejgosgcynf ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > split [ e ][ jgosgcynf ]

> icw > start > [ jgosgcynf ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > g > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > n > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > f > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ykbcn <<<<

> icw > start > [ ykbcn ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ kbcn ]

> icw > start > [ kbcn ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ bcn ]

> icw > start > [ bcn ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ cn ]

> icw > start > [ cn ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ n ]

> icw > start > [ n ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hesvnctfvdsp <<<<

> icw > start > [ hesvnctfvdsp ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ esvnctfvdsp ]

> icw > start > [ esvnctfvdsp ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ svnctfvdsp ]

> icw > start > [ svnctfvdsp ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ vnctfvdsp ]

> icw > start > [ vnctfvdsp ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ nctfvdsp ]

> icw > start > [ nctfvdsp ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ ctfvdsp ]

> icw > start > [ ctfvdsp ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ tfvdsp ]

> icw > start > [ tfvdsp ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ fvdsp ]

> icw > start > [ fvdsp ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ vdsp ]

> icw > start > [ vdsp ] 8 <nil>
> icw > 0 > v > [wc] 8 > [i] 0
> icw > split [ v ][ dsp ]

> icw > start > [ dsp ] 9 <nil>
> icw > 0 > d > [wc] 9 > [i] 0
> icw > split [ d ][ sp ]

> icw > start > [ sp ] 10 <nil>
> icw > 0 > s > [wc] 10 > [i] 0
> icw > split [ s ][ p ]

> icw > start > [ p ] 11 <nil>
> icw > 0 > p > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ku <<<<

> icw > start > [ ku ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ u ]

> icw > start > [ u ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> rjhykpadahbhj <<<<

> icw > start > [ rjhykpadahbhj ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ jhykpadahbhj ]

> icw > start > [ jhykpadahbhj ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > b > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> at <<<<

> icw > start > [ at ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ t ]

> icw > start > [ t ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> sxlngbtxmqr <<<<

> icw > start > [ sxlngbtxmqr ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ xlngbtxmqr ]

> icw > start > [ xlngbtxmqr ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ lngbtxmqr ]

> icw > start > [ lngbtxmqr ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > m > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wqrom <<<<

> icw > start > [ wqrom ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ qrom ]

> icw > start > [ qrom ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ rom ]

> icw > start > [ rom ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ om ]

> icw > start > [ om ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ m ]

> icw > start > [ m ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> qzyabzrco <<<<

> icw > start > [ qzyabzrco ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ zyabzrco ]

> icw > start > [ zyabzrco ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rbbyklndcqdj <<<<

> icw > start > [ rbbyklndcqdj ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ bbyklndcqdj ]

> icw > start > [ bbyklndcqdj ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ byklndcqdj ]

> icw > start > [ byklndcqdj ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ yklndcqdj ]

> icw > start > [ yklndcqdj ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ klndcqdj ]

> icw > start > [ klndcqdj ] 4 <nil>
> icw > 0 > k > [wc] 4 > [i] 0
> icw > split [ k ][ lndcqdj ]

> icw > start > [ lndcqdj ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cnsmgmwmpbgjq <<<<

> icw > start > [ cnsmgmwmpbgjq ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ nsmgmwmpbgjq ]

> icw > start > [ nsmgmwmpbgjq ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ smgmwmpbgjq ]

> icw > start > [ smgmwmpbgjq ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ mgmwmpbgjq ]

> icw > start > [ mgmwmpbgjq ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ gmwmpbgjq ]

> icw > start > [ gmwmpbgjq ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ mwmpbgjq ]

> icw > start > [ mwmpbgjq ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ wmpbgjq ]

> icw > start > [ wmpbgjq ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > split [ w ][ mpbgjq ]

> icw > start > [ mpbgjq ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > split [ m ][ pbgjq ]

> icw > start > [ pbgjq ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ bgjq ]

> icw > start > [ bgjq ] 9 <nil>
> icw > 0 > b > [wc] 9 > [i] 0
> icw > split [ b ][ gjq ]

> icw > start > [ gjq ] 10 <nil>
> icw > 0 > g > [wc] 10 > [i] 0
> icw > split [ g ][ jq ]

> icw > start > [ jq ] 11 <nil>
> icw > 0 > j > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 11 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > j > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> krvnaf <<<<

> icw > start > [ krvnaf ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ rvnaf ]

> icw > start > [ rvnaf ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ vnaf ]

> icw > start > [ vnaf ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ naf ]

> icw > start > [ naf ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ af ]

> icw > start > [ af ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ f ]

> icw > start > [ f ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > split [ rv ][ naf ]

> icw > start > [ naf ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ af ]

> icw > start > [ af ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ f ]

> icw > start > [ f ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> qrwfajnfahyqocdb <<<<

> icw > start > [ qrwfajnfahyqocdb ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ rwfajnfahyqocdb ]

> icw > start > [ rwfajnfahyqocdb ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ wfajnfahyqocdb ]

> icw > start > [ wfajnfahyqocdb ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ fajnfahyqocdb ]

> icw > start > [ fajnfahyqocdb ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ ajnfahyqocdb ]

> icw > start > [ ajnfahyqocdb ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ jnfahyqocdb ]

> icw > start > [ jnfahyqocdb ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > q > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > o > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > c > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > d > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > b > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fnlaozmff <<<<

> icw > start > [ fnlaozmff ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ nlaozmff ]

> icw > start > [ nlaozmff ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ laozmff ]

> icw > start > [ laozmff ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vmoymbmytjvfcgt <<<<

> icw > start > [ vmoymbmytjvfcgt ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ moymbmytjvfcgt ]

> icw > start > [ moymbmytjvfcgt ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ oymbmytjvfcgt ]

> icw > start > [ oymbmytjvfcgt ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ ymbmytjvfcgt ]

> icw > start > [ ymbmytjvfcgt ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ mbmytjvfcgt ]

> icw > start > [ mbmytjvfcgt ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ bmytjvfcgt ]

> icw > start > [ bmytjvfcgt ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ mytjvfcgt ]

> icw > start > [ mytjvfcgt ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > split [ m ][ ytjvfcgt ]

> icw > start > [ ytjvfcgt ] 7 <nil>
> icw > 0 > y > [wc] 7 > [i] 0
> icw > split [ y ][ tjvfcgt ]

> icw > start > [ tjvfcgt ] 8 <nil>
> icw > 0 > t > [wc] 8 > [i] 0
> icw > split [ t ][ jvfcgt ]

> icw > start > [ jvfcgt ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > t > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cijyy <<<<

> icw > start > [ cijyy ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ ijyy ]

> icw > start > [ ijyy ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jdgwjbztl <<<<

> icw > start > [ jdgwjbztl ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> swmalgbgpaplqgz <<<<

> icw > start > [ swmalgbgpaplqgz ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ wmalgbgpaplqgz ]

> icw > start > [ wmalgbgpaplqgz ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ malgbgpaplqgz ]

> icw > start > [ malgbgpaplqgz ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ algbgpaplqgz ]

> icw > start > [ algbgpaplqgz ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ lgbgpaplqgz ]

> icw > start > [ lgbgpaplqgz ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > q > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > z > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hfl <<<<

> icw > start > [ hfl ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ fl ]

> icw > start > [ fl ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ l ]

> icw > start > [ l ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> typttkrpfvx <<<<

> icw > start > [ typttkrpfvx ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ ypttkrpfvx ]

> icw > start > [ ypttkrpfvx ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ pttkrpfvx ]

> icw > start > [ pttkrpfvx ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ ttkrpfvx ]

> icw > start > [ ttkrpfvx ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ tkrpfvx ]

> icw > start > [ tkrpfvx ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ krpfvx ]

> icw > start > [ krpfvx ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ rpfvx ]

> icw > start > [ rpfvx ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ pfvx ]

> icw > start > [ pfvx ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ fvx ]

> icw > start > [ fvx ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ vx ]

> icw > start > [ vx ] 9 <nil>
> icw > 0 > v > [wc] 9 > [i] 0
> icw > split [ v ][ x ]

> icw > start > [ x ] 10 <nil>
> icw > 0 > x > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> tkzpzrscwbx <<<<

> icw > start > [ tkzpzrscwbx ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ kzpzrscwbx ]

> icw > start > [ kzpzrscwbx ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ zpzrscwbx ]

> icw > start > [ zpzrscwbx ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bwfqqvjcukjbsg <<<<

> icw > start > [ bwfqqvjcukjbsg ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ wfqqvjcukjbsg ]

> icw > start > [ wfqqvjcukjbsg ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ fqqvjcukjbsg ]

> icw > start > [ fqqvjcukjbsg ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ qqvjcukjbsg ]

> icw > start > [ qqvjcukjbsg ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ qvjcukjbsg ]

> icw > start > [ qvjcukjbsg ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ vjcukjbsg ]

> icw > start > [ vjcukjbsg ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ jcukjbsg ]

> icw > start > [ jcukjbsg ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > split [ fq ][ qvjcukjbsg ]

> icw > start > [ qvjcukjbsg ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ vjcukjbsg ]

> icw > start > [ vjcukjbsg ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ jcukjbsg ]

> icw > start > [ jcukjbsg ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > u > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > s > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > g > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> nxqmxr <<<<

> icw > start > [ nxqmxr ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ xqmxr ]

> icw > start > [ xqmxr ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ qmxr ]

> icw > start > [ qmxr ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ mxr ]

> icw > start > [ mxr ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ xr ]

> icw > start > [ xr ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ r ]

> icw > start > [ r ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > split [ qm ][ xr ]

> icw > start > [ xr ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ r ]

> icw > start > [ r ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > split [ nx ][ qmxr ]

> icw > start > [ qmxr ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ mxr ]

> icw > start > [ mxr ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ xr ]

> icw > start > [ xr ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ r ]

> icw > start > [ r ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > split [ qm ][ xr ]

> icw > start > [ xr ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ r ]

> icw > start > [ r ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> x <<<<

> icw > start > [ x ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> eyavnz <<<<

> icw > start > [ eyavnz ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ yavnz ]

> icw > start > [ yavnz ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ avnz ]

> icw > start > [ avnz ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ vnz ]

> icw > start > [ vnz ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ nz ]

> icw > start > [ nz ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ z ]

> icw > start > [ z ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > split [ av ][ nz ]

> icw > start > [ nz ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ z ]

> icw > start > [ z ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> il <<<<

> icw > start > [ il ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dhthp <<<<

> icw > start > [ dhthp ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ hthp ]

> icw > start > [ hthp ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ thp ]

> icw > start > [ thp ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ hp ]

> icw > start > [ hp ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ p ]

> icw > start > [ p ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> eyelg <<<<

> icw > start > [ eyelg ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ yelg ]

> icw > start > [ yelg ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ elg ]

> icw > start > [ elg ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ lg ]

> icw > start > [ lg ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > split [ ye ][ lg ]

> icw > start > [ lg ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> npsoqsw <<<<

> icw > start > [ npsoqsw ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ psoqsw ]

> icw > start > [ psoqsw ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ soqsw ]

> icw > start > [ soqsw ] 2 <nil>
> icw > 0 > s > [wc] 2 > [i] 0
> icw > split [ s ][ oqsw ]

> icw > start > [ oqsw ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ qsw ]

> icw > start > [ qsw ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ sw ]

> icw > start > [ sw ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ w ]

> icw > start > [ w ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > split [ np ][ soqsw ]

> icw > start > [ soqsw ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ oqsw ]

> icw > start > [ oqsw ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ qsw ]

> icw > start > [ qsw ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ sw ]

> icw > start > [ sw ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ w ]

> icw > start > [ w ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> reogbmveofvusdsx <<<<

> icw > start > [ reogbmveofvusdsx ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ eogbmveofvusdsx ]

> icw > start > [ eogbmveofvusdsx ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ ogbmveofvusdsx ]

> icw > start > [ ogbmveofvusdsx ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ gbmveofvusdsx ]

> icw > start > [ gbmveofvusdsx ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ bmveofvusdsx ]

> icw > start > [ bmveofvusdsx ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ mveofvusdsx ]

> icw > start > [ mveofvusdsx ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ veofvusdsx ]

> icw > start > [ veofvusdsx ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ eofvusdsx ]

> icw > start > [ eofvusdsx ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ ofvusdsx ]

> icw > start > [ ofvusdsx ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > split [ o ][ fvusdsx ]

> icw > start > [ fvusdsx ] 9 <nil>
> icw > 0 > f > [wc] 9 > [i] 0
> icw > split [ f ][ vusdsx ]

> icw > start > [ vusdsx ] 10 <nil>
> icw > 0 > v > [wc] 10 > [i] 0
> icw > split [ v ][ usdsx ]

> icw > start > [ usdsx ] 11 <nil>
> icw > 0 > u > [wc] 11 > [i] 0
> icw > split [ u ][ sdsx ]

> icw > start > [ sdsx ] 12 <nil>
> icw > 0 > s > [wc] 12 > [i] 0
> icw > split [ s ][ dsx ]

> icw > start > [ dsx ] 13 <nil>
> icw > 0 > d > [wc] 13 > [i] 0
> icw > split [ d ][ sx ]

> icw > start > [ sx ] 14 <nil>
> icw > 0 > s > [wc] 14 > [i] 0
> icw > split [ s ][ x ]

> icw > start > [ x ] 15 <nil>
> icw > 0 > x > [wc] 15 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 14 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 13 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 7 > [i] 1
> icw > split [ eo ][ fvusdsx ]

> icw > start > [ fvusdsx ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ vusdsx ]

> icw > start > [ vusdsx ] 9 <nil>
> icw > 0 > v > [wc] 9 > [i] 0
> icw > split [ v ][ usdsx ]

> icw > start > [ usdsx ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ sdsx ]

> icw > start > [ sdsx ] 11 <nil>
> icw > 0 > s > [wc] 11 > [i] 0
> icw > split [ s ][ dsx ]

> icw > start > [ dsx ] 12 <nil>
> icw > 0 > d > [wc] 12 > [i] 0
> icw > split [ d ][ sx ]

> icw > start > [ sx ] 13 <nil>
> icw > 0 > s > [wc] 13 > [i] 0
> icw > split [ s ][ x ]

> icw > start > [ x ] 14 <nil>
> icw > 0 > x > [wc] 14 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 13 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > split [ eo ][ gbmveofvusdsx ]

> icw > start > [ gbmveofvusdsx ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ bmveofvusdsx ]

> icw > start > [ bmveofvusdsx ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ mveofvusdsx ]

> icw > start > [ mveofvusdsx ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ veofvusdsx ]

> icw > start > [ veofvusdsx ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ eofvusdsx ]

> icw > start > [ eofvusdsx ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > split [ e ][ ofvusdsx ]

> icw > start > [ ofvusdsx ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ fvusdsx ]

> icw > start > [ fvusdsx ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ vusdsx ]

> icw > start > [ vusdsx ] 9 <nil>
> icw > 0 > v > [wc] 9 > [i] 0
> icw > split [ v ][ usdsx ]

> icw > start > [ usdsx ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ sdsx ]

> icw > start > [ sdsx ] 11 <nil>
> icw > 0 > s > [wc] 11 > [i] 0
> icw > split [ s ][ dsx ]

> icw > start > [ dsx ] 12 <nil>
> icw > 0 > d > [wc] 12 > [i] 0
> icw > split [ d ][ sx ]

> icw > start > [ sx ] 13 <nil>
> icw > 0 > s > [wc] 13 > [i] 0
> icw > split [ s ][ x ]

> icw > start > [ x ] 14 <nil>
> icw > 0 > x > [wc] 14 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 13 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > split [ eo ][ fvusdsx ]

> icw > start > [ fvusdsx ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ vusdsx ]

> icw > start > [ vusdsx ] 8 <nil>
> icw > 0 > v > [wc] 8 > [i] 0
> icw > split [ v ][ usdsx ]

> icw > start > [ usdsx ] 9 <nil>
> icw > 0 > u > [wc] 9 > [i] 0
> icw > split [ u ][ sdsx ]

> icw > start > [ sdsx ] 10 <nil>
> icw > 0 > s > [wc] 10 > [i] 0
> icw > split [ s ][ dsx ]

> icw > start > [ dsx ] 11 <nil>
> icw > 0 > d > [wc] 11 > [i] 0
> icw > split [ d ][ sx ]

> icw > start > [ sx ] 12 <nil>
> icw > 0 > s > [wc] 12 > [i] 0
> icw > split [ s ][ x ]

> icw > start > [ x ] 13 <nil>
> icw > 0 > x > [wc] 13 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 12 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > split [ re ][ ogbmveofvusdsx ]

> icw > start > [ ogbmveofvusdsx ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ gbmveofvusdsx ]

> icw > start > [ gbmveofvusdsx ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ bmveofvusdsx ]

> icw > start > [ bmveofvusdsx ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ mveofvusdsx ]

> icw > start > [ mveofvusdsx ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ veofvusdsx ]

> icw > start > [ veofvusdsx ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ eofvusdsx ]

> icw > start > [ eofvusdsx ] 6 <nil>
> icw > 0 > e > [wc] 6 > [i] 0
> icw > split [ e ][ ofvusdsx ]

> icw > start > [ ofvusdsx ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ fvusdsx ]

> icw > start > [ fvusdsx ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > split [ f ][ vusdsx ]

> icw > start > [ vusdsx ] 9 <nil>
> icw > 0 > v > [wc] 9 > [i] 0
> icw > split [ v ][ usdsx ]

> icw > start > [ usdsx ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ sdsx ]

> icw > start > [ sdsx ] 11 <nil>
> icw > 0 > s > [wc] 11 > [i] 0
> icw > split [ s ][ dsx ]

> icw > start > [ dsx ] 12 <nil>
> icw > 0 > d > [wc] 12 > [i] 0
> icw > split [ d ][ sx ]

> icw > start > [ sx ] 13 <nil>
> icw > 0 > s > [wc] 13 > [i] 0
> icw > split [ s ][ x ]

> icw > start > [ x ] 14 <nil>
> icw > 0 > x > [wc] 14 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 13 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > split [ eo ][ fvusdsx ]

> icw > start > [ fvusdsx ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ vusdsx ]

> icw > start > [ vusdsx ] 8 <nil>
> icw > 0 > v > [wc] 8 > [i] 0
> icw > split [ v ][ usdsx ]

> icw > start > [ usdsx ] 9 <nil>
> icw > 0 > u > [wc] 9 > [i] 0
> icw > split [ u ][ sdsx ]

> icw > start > [ sdsx ] 10 <nil>
> icw > 0 > s > [wc] 10 > [i] 0
> icw > split [ s ][ dsx ]

> icw > start > [ dsx ] 11 <nil>
> icw > 0 > d > [wc] 11 > [i] 0
> icw > split [ d ][ sx ]

> icw > start > [ sx ] 12 <nil>
> icw > 0 > s > [wc] 12 > [i] 0
> icw > split [ s ][ x ]

> icw > start > [ x ] 13 <nil>
> icw > 0 > x > [wc] 13 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 12 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > s > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > s > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > x > [wc] 0 > [i] 15
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> jvdrjkhxkq <<<<

> icw > start > [ jvdrjkhxkq ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > h > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qzjbrpljwuzpl <<<<

> icw > start > [ qzjbrpljwuzpl ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ zjbrpljwuzpl ]

> icw > start > [ zjbrpljwuzpl ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > l > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > z > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> czqeevvbvcwh <<<<

> icw > start > [ czqeevvbvcwh ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ zqeevvbvcwh ]

> icw > start > [ zqeevvbvcwh ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > b > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vzuszqvhlmapty <<<<

> icw > start > [ vzuszqvhlmapty ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ zuszqvhlmapty ]

> icw > start > [ zuszqvhlmapty ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > p > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > t > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> yu <<<<

> icw > start > [ yu ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ u ]

> icw > start > [ u ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> yldwwgezlqur <<<<

> icw > start > [ yldwwgezlqur ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ ldwwgezlqur ]

> icw > start > [ ldwwgezlqur ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > e > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > u > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vorxwgdtgjilgydq <<<<

> icw > start > [ vorxwgdtgjilgydq ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ orxwgdtgjilgydq ]

> icw > start > [ orxwgdtgjilgydq ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ rxwgdtgjilgydq ]

> icw > start > [ rxwgdtgjilgydq ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ xwgdtgjilgydq ]

> icw > start > [ xwgdtgjilgydq ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ wgdtgjilgydq ]

> icw > start > [ wgdtgjilgydq ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ gdtgjilgydq ]

> icw > start > [ gdtgjilgydq ] 5 <nil>
> icw > 0 > g > [wc] 5 > [i] 0
> icw > split [ g ][ dtgjilgydq ]

> icw > start > [ dtgjilgydq ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ tgjilgydq ]

> icw > start > [ tgjilgydq ] 7 <nil>
> icw > 0 > t > [wc] 7 > [i] 0
> icw > split [ t ][ gjilgydq ]

> icw > start > [ gjilgydq ] 8 <nil>
> icw > 0 > g > [wc] 8 > [i] 0
> icw > split [ g ][ jilgydq ]

> icw > start > [ jilgydq ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 7 > [i] 1
> icw > split [ tg ][ jilgydq ]

> icw > start > [ jilgydq ] 8 <nil>
> icw > 0 > j > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > j > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > l > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > g > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > d > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > q > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pknt <<<<

> icw > start > [ pknt ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ knt ]

> icw > start > [ knt ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ nt ]

> icw > start > [ nt ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ t ]

> icw > start > [ t ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> bgihl <<<<

> icw > start > [ bgihl ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ gihl ]

> icw > start > [ gihl ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ ihl ]

> icw > start > [ ihl ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ckorgrm <<<<

> icw > start > [ ckorgrm ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ korgrm ]

> icw > start > [ korgrm ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ orgrm ]

> icw > start > [ orgrm ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ rgrm ]

> icw > start > [ rgrm ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ grm ]

> icw > start > [ grm ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ rm ]

> icw > start > [ rm ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ m ]

> icw > start > [ m ] 6 <nil>
> icw > 0 > m > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ixylxjmlfv <<<<

> icw > start > [ ixylxjmlfv ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bpoaboylced <<<<

> icw > start > [ bpoaboylced ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ poaboylced ]

> icw > start > [ poaboylced ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ oaboylced ]

> icw > start > [ oaboylced ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ aboylced ]

> icw > start > [ aboylced ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ boylced ]

> icw > start > [ boylced ] 4 <nil>
> icw > 0 > b > [wc] 4 > [i] 0
> icw > split [ b ][ oylced ]

> icw > start > [ oylced ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ ylced ]

> icw > start > [ ylced ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ lced ]

> icw > start > [ lced ] 7 <nil>
> icw > 0 > l > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > split [ oa ][ boylced ]

> icw > start > [ boylced ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ oylced ]

> icw > start > [ oylced ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ ylced ]

> icw > start > [ ylced ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ lced ]

> icw > start > [ lced ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > split [ po ][ aboylced ]

> icw > start > [ aboylced ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ boylced ]

> icw > start > [ boylced ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ oylced ]

> icw > start > [ oylced ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ ylced ]

> icw > start > [ ylced ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ lced ]

> icw > start > [ lced ] 6 <nil>
> icw > 0 > l > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > o > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zea <<<<

> icw > start > [ zea ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> igfagitkrext <<<<

> icw > start > [ igfagitkrext ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > i > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > x > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ipvqq <<<<

> icw > start > [ ipvqq ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dmoerc <<<<

> icw > start > [ dmoerc ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ moerc ]

> icw > start > [ moerc ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ oerc ]

> icw > start > [ oerc ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ erc ]

> icw > start > [ erc ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ rc ]

> icw > start > [ rc ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ c ]

> icw > start > [ c ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> oqxbypihdv <<<<

> icw > start > [ oqxbypihdv ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ qxbypihdv ]

> icw > start > [ qxbypihdv ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ xbypihdv ]

> icw > start > [ xbypihdv ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ bypihdv ]

> icw > start > [ bypihdv ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ ypihdv ]

> icw > start > [ ypihdv ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ pihdv ]

> icw > start > [ pihdv ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ ihdv ]

> icw > start > [ ihdv ] 6 <nil>
> icw > 0 > i > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > h > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > d > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dtjrrkxro <<<<

> icw > start > [ dtjrrkxro ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ tjrrkxro ]

> icw > start > [ tjrrkxro ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ jrrkxro ]

> icw > start > [ jrrkxro ] 2 <nil>
> icw > 0 > j > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rexuhucxpi <<<<

> icw > start > [ rexuhucxpi ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ exuhucxpi ]

> icw > start > [ exuhucxpi ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ xuhucxpi ]

> icw > start > [ xuhucxpi ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ uhucxpi ]

> icw > start > [ uhucxpi ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ hucxpi ]

> icw > start > [ hucxpi ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ ucxpi ]

> icw > start > [ ucxpi ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ cxpi ]

> icw > start > [ cxpi ] 6 <nil>
> icw > 0 > c > [wc] 6 > [i] 0
> icw > split [ c ][ xpi ]

> icw > start > [ xpi ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ pi ]

> icw > start > [ pi ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ i ]

> icw > start > [ i ] 9 <nil>
> icw > 0 > i > [wc] 9 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 8 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > split [ re ][ xuhucxpi ]

> icw > start > [ xuhucxpi ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ uhucxpi ]

> icw > start > [ uhucxpi ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ hucxpi ]

> icw > start > [ hucxpi ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ ucxpi ]

> icw > start > [ ucxpi ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ cxpi ]

> icw > start > [ cxpi ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ xpi ]

> icw > start > [ xpi ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ pi ]

> icw > start > [ pi ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ i ]

> icw > start > [ i ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > c > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bvmuyarjwqpcoywa <<<<

> icw > start > [ bvmuyarjwqpcoywa ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ vmuyarjwqpcoywa ]

> icw > start > [ vmuyarjwqpcoywa ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ muyarjwqpcoywa ]

> icw > start > [ muyarjwqpcoywa ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ uyarjwqpcoywa ]

> icw > start > [ uyarjwqpcoywa ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ yarjwqpcoywa ]

> icw > start > [ yarjwqpcoywa ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ arjwqpcoywa ]

> icw > start > [ arjwqpcoywa ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ rjwqpcoywa ]

> icw > start > [ rjwqpcoywa ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ jwqpcoywa ]

> icw > start > [ jwqpcoywa ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > o > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > w > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > a > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qwdmfpwvamisns <<<<

> icw > start > [ qwdmfpwvamisns ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ wdmfpwvamisns ]

> icw > start > [ wdmfpwvamisns ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ dmfpwvamisns ]

> icw > start > [ dmfpwvamisns ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ mfpwvamisns ]

> icw > start > [ mfpwvamisns ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ fpwvamisns ]

> icw > start > [ fpwvamisns ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ pwvamisns ]

> icw > start > [ pwvamisns ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ wvamisns ]

> icw > start > [ wvamisns ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > split [ w ][ vamisns ]

> icw > start > [ vamisns ] 7 <nil>
> icw > 0 > v > [wc] 7 > [i] 0
> icw > split [ v ][ amisns ]

> icw > start > [ amisns ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > split [ a ][ misns ]

> icw > start > [ misns ] 9 <nil>
> icw > 0 > m > [wc] 9 > [i] 0
> icw > split [ m ][ isns ]

> icw > start > [ isns ] 10 <nil>
> icw > 0 > i > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > split [ mf ][ pwvamisns ]

> icw > start > [ pwvamisns ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ wvamisns ]

> icw > start > [ wvamisns ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ vamisns ]

> icw > start > [ vamisns ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ amisns ]

> icw > start > [ amisns ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ misns ]

> icw > start > [ misns ] 8 <nil>
> icw > 0 > m > [wc] 8 > [i] 0
> icw > split [ m ][ isns ]

> icw > start > [ isns ] 9 <nil>
> icw > 0 > i > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > split [ wd ][ mfpwvamisns ]

> icw > start > [ mfpwvamisns ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ fpwvamisns ]

> icw > start > [ fpwvamisns ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ pwvamisns ]

> icw > start > [ pwvamisns ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ wvamisns ]

> icw > start > [ wvamisns ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ vamisns ]

> icw > start > [ vamisns ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ amisns ]

> icw > start > [ amisns ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ misns ]

> icw > start > [ misns ] 8 <nil>
> icw > 0 > m > [wc] 8 > [i] 0
> icw > split [ m ][ isns ]

> icw > start > [ isns ] 9 <nil>
> icw > 0 > i > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > split [ mf ][ pwvamisns ]

> icw > start > [ pwvamisns ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ wvamisns ]

> icw > start > [ wvamisns ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ vamisns ]

> icw > start > [ vamisns ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ amisns ]

> icw > start > [ amisns ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ misns ]

> icw > start > [ misns ] 7 <nil>
> icw > 0 > m > [wc] 7 > [i] 0
> icw > split [ m ][ isns ]

> icw > start > [ isns ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bhopoqdsref <<<<

> icw > start > [ bhopoqdsref ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ hopoqdsref ]

> icw > start > [ hopoqdsref ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ opoqdsref ]

> icw > start > [ opoqdsref ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ poqdsref ]

> icw > start > [ poqdsref ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > split [ p ][ oqdsref ]

> icw > start > [ oqdsref ] 4 <nil>
> icw > 0 > o > [wc] 4 > [i] 0
> icw > split [ o ][ qdsref ]

> icw > start > [ qdsref ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ dsref ]

> icw > start > [ dsref ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ sref ]

> icw > start > [ sref ] 7 <nil>
> icw > 0 > s > [wc] 7 > [i] 0
> icw > split [ s ][ ref ]

> icw > start > [ ref ] 8 <nil>
> icw > 0 > r > [wc] 8 > [i] 0
> icw > split [ r ][ ef ]

> icw > start > [ ef ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > split [ e ][ f ]

> icw > start > [ f ] 10 <nil>
> icw > 0 > f > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 8 > [i] 1
> icw > split [ re ][ f ]

> icw > start > [ f ] 9 <nil>
> icw > 0 > f > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 3 > [i] 1
> icw > split [ po ][ qdsref ]

> icw > start > [ qdsref ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ dsref ]

> icw > start > [ dsref ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ sref ]

> icw > start > [ sref ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > split [ s ][ ref ]

> icw > start > [ ref ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ ef ]

> icw > start > [ ef ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ f ]

> icw > start > [ f ] 9 <nil>
> icw > 0 > f > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > split [ re ][ f ]

> icw > start > [ f ] 8 <nil>
> icw > 0 > f > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> tmnm <<<<

> icw > start > [ tmnm ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ mnm ]

> icw > start > [ mnm ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ nm ]

> icw > start > [ nm ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ m ]

> icw > start > [ m ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> cre <<<<

> icw > start > [ cre ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ re ]

> icw > start > [ re ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ e ]

> icw > start > [ e ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > split [ cr ][ e ]

> icw > start > [ e ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ktrniqwoofoeenbz <<<<

> icw > start > [ ktrniqwoofoeenbz ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ trniqwoofoeenbz ]

> icw > start > [ trniqwoofoeenbz ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ rniqwoofoeenbz ]

> icw > start > [ rniqwoofoeenbz ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ niqwoofoeenbz ]

> icw > start > [ niqwoofoeenbz ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ iqwoofoeenbz ]

> icw > start > [ iqwoofoeenbz ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > w > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > o > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > n > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > b > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > z > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vlrfcsftapyujmw <<<<

> icw > start > [ vlrfcsftapyujmw ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ lrfcsftapyujmw ]

> icw > start > [ lrfcsftapyujmw ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > split [ vl ][ rfcsftapyujmw ]

> icw > start > [ rfcsftapyujmw ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ fcsftapyujmw ]

> icw > start > [ fcsftapyujmw ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ csftapyujmw ]

> icw > start > [ csftapyujmw ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ sftapyujmw ]

> icw > start > [ sftapyujmw ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ ftapyujmw ]

> icw > start > [ ftapyujmw ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ tapyujmw ]

> icw > start > [ tapyujmw ] 6 <nil>
> icw > 0 > t > [wc] 6 > [i] 0
> icw > split [ t ][ apyujmw ]

> icw > start > [ apyujmw ] 7 <nil>
> icw > 0 > a > [wc] 7 > [i] 0
> icw > split [ a ][ pyujmw ]

> icw > start > [ pyujmw ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ yujmw ]

> icw > start > [ yujmw ] 9 <nil>
> icw > 0 > y > [wc] 9 > [i] 0
> icw > split [ y ][ ujmw ]

> icw > start > [ ujmw ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ jmw ]

> icw > start > [ jmw ] 11 <nil>
> icw > 0 > j > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 9 > [i] 1
> icw > split [ yu ][ jmw ]

> icw > start > [ jmw ] 10 <nil>
> icw > 0 > j > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 6 > [i] 1
> icw > split [ ta ][ pyujmw ]

> icw > start > [ pyujmw ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ yujmw ]

> icw > start > [ yujmw ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ ujmw ]

> icw > start > [ ujmw ] 9 <nil>
> icw > 0 > u > [wc] 9 > [i] 0
> icw > split [ u ][ jmw ]

> icw > start > [ jmw ] 10 <nil>
> icw > 0 > j > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 8 > [i] 1
> icw > split [ yu ][ jmw ]

> icw > start > [ jmw ] 9 <nil>
> icw > 0 > j > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > p > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > w > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> updqikocrdyex <<<<

> icw > start > [ updqikocrdyex ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ pdqikocrdyex ]

> icw > start > [ pdqikocrdyex ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ dqikocrdyex ]

> icw > start > [ dqikocrdyex ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ qikocrdyex ]

> icw > start > [ qikocrdyex ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > split [ q ][ ikocrdyex ]

> icw > start > [ ikocrdyex ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > k > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bcxw <<<<

> icw > start > [ bcxw ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ cxw ]

> icw > start > [ cxw ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ xw ]

> icw > start > [ xw ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ w ]

> icw > start > [ w ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> eaum <<<<

> icw > start > [ eaum ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ aum ]

> icw > start > [ aum ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ um ]

> icw > start > [ um ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ m ]

> icw > start > [ m ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> oklsqebuzeziisw <<<<

> icw > start > [ oklsqebuzeziisw ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ klsqebuzeziisw ]

> icw > start > [ klsqebuzeziisw ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ lsqebuzeziisw ]

> icw > start > [ lsqebuzeziisw ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > z > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > w > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fzgyhvnwjcns <<<<

> icw > start > [ fzgyhvnwjcns ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ zgyhvnwjcns ]

> icw > start > [ zgyhvnwjcns ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > split [ fz ][ gyhvnwjcns ]

> icw > start > [ gyhvnwjcns ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > split [ g ][ yhvnwjcns ]

> icw > start > [ yhvnwjcns ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ hvnwjcns ]

> icw > start > [ hvnwjcns ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ vnwjcns ]

> icw > start > [ vnwjcns ] 4 <nil>
> icw > 0 > v > [wc] 4 > [i] 0
> icw > split [ v ][ nwjcns ]

> icw > start > [ nwjcns ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ wjcns ]

> icw > start > [ wjcns ] 6 <nil>
> icw > 0 > w > [wc] 6 > [i] 0
> icw > split [ w ][ jcns ]

> icw > start > [ jcns ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dybjywyaodsyw <<<<

> icw > start > [ dybjywyaodsyw ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ ybjywyaodsyw ]

> icw > start > [ ybjywyaodsyw ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ bjywyaodsyw ]

> icw > start > [ bjywyaodsyw ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ jywyaodsyw ]

> icw > start > [ jywyaodsyw ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > split [ jy ][ wyaodsyw ]

> icw > start > [ wyaodsyw ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ yaodsyw ]

> icw > start > [ yaodsyw ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ aodsyw ]

> icw > start > [ aodsyw ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ odsyw ]

> icw > start > [ odsyw ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ dsyw ]

> icw > start > [ dsyw ] 8 <nil>
> icw > 0 > d > [wc] 8 > [i] 0
> icw > split [ d ][ syw ]

> icw > start > [ syw ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ yw ]

> icw > start > [ yw ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ w ]

> icw > start > [ w ] 11 <nil>
> icw > 0 > w > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > d > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> lmu <<<<

> icw > start > [ lmu ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> eocfru <<<<

> icw > start > [ eocfru ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ ocfru ]

> icw > start > [ ocfru ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ cfru ]

> icw > start > [ cfru ] 2 <nil>
> icw > 0 > c > [wc] 2 > [i] 0
> icw > split [ c ][ fru ]

> icw > start > [ fru ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ ru ]

> icw > start > [ ru ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ u ]

> icw > start > [ u ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > split [ eo ][ cfru ]

> icw > start > [ cfru ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ fru ]

> icw > start > [ fru ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ ru ]

> icw > start > [ ru ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ u ]

> icw > start > [ u ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > f > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > r > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ztlbggsuzctoc <<<<

> icw > start > [ ztlbggsuzctoc ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > z > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > t > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ilfzpszgrgj <<<<

> icw > start > [ ilfzpszgrgj ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > split [ il ][ fzpszgrgj ]

> icw > start > [ fzpszgrgj ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ zpszgrgj ]

> icw > start > [ zpszgrgj ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > split [ fz ][ pszgrgj ]

> icw > start > [ pszgrgj ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ szgrgj ]

> icw > start > [ szgrgj ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ zgrgj ]

> icw > start > [ zgrgj ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > z > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > j > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> imqypqo <<<<

> icw > start > [ imqypqo ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> fump <<<<

> icw > start > [ fump ] 0 <nil>
> icw > 0 > f > [wc] 0 > [i] 0
> icw > split [ f ][ ump ]

> icw > start > [ ump ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ mp ]

> icw > start > [ mp ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ p ]

> icw > start > [ p ] 3 <nil>
> icw > 0 > p > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> sjvmsbrcfwretbie <<<<

> icw > start > [ sjvmsbrcfwretbie ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ jvmsbrcfwretbie ]

> icw > start > [ jvmsbrcfwretbie ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > w > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > e > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > t > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > b > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > i > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > e > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> oxpmplpcg <<<<

> icw > start > [ oxpmplpcg ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ xpmplpcg ]

> icw > start > [ xpmplpcg ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ pmplpcg ]

> icw > start > [ pmplpcg ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ mplpcg ]

> icw > start > [ mplpcg ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ plpcg ]

> icw > start > [ plpcg ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ lpcg ]

> icw > start > [ lpcg ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > p > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wmqigymr <<<<

> icw > start > [ wmqigymr ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ mqigymr ]

> icw > start > [ mqigymr ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ qigymr ]

> icw > start > [ qigymr ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ igymr ]

> icw > start > [ igymr ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> qevdyd <<<<

> icw > start > [ qevdyd ] 0 <nil>
> icw > 0 > q > [wc] 0 > [i] 0
> icw > split [ q ][ evdyd ]

> icw > start > [ evdyd ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ vdyd ]

> icw > start > [ vdyd ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ dyd ]

> icw > start > [ dyd ] 3 <nil>
> icw > 0 > d > [wc] 3 > [i] 0
> icw > split [ d ][ yd ]

> icw > start > [ yd ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ d ]

> icw > start > [ d ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > split [ qe ][ vdyd ]

> icw > start > [ vdyd ] 1 <nil>
> icw > 0 > v > [wc] 1 > [i] 0
> icw > split [ v ][ dyd ]

> icw > start > [ dyd ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ yd ]

> icw > start > [ yd ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ d ]

> icw > start > [ d ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> gmuyytguexnyc <<<<

> icw > start > [ gmuyytguexnyc ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ muyytguexnyc ]

> icw > start > [ muyytguexnyc ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ uyytguexnyc ]

> icw > start > [ uyytguexnyc ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ yytguexnyc ]

> icw > start > [ yytguexnyc ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ ytguexnyc ]

> icw > start > [ ytguexnyc ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ tguexnyc ]

> icw > start > [ tguexnyc ] 5 <nil>
> icw > 0 > t > [wc] 5 > [i] 0
> icw > split [ t ][ guexnyc ]

> icw > start > [ guexnyc ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > split [ g ][ uexnyc ]

> icw > start > [ uexnyc ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ exnyc ]

> icw > start > [ exnyc ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ xnyc ]

> icw > start > [ xnyc ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ nyc ]

> icw > start > [ nyc ] 10 <nil>
> icw > 0 > n > [wc] 10 > [i] 0
> icw > split [ n ][ yc ]

> icw > start > [ yc ] 11 <nil>
> icw > 0 > y > [wc] 11 > [i] 0
> icw > split [ y ][ c ]

> icw > start > [ c ] 12 <nil>
> icw > 0 > c > [wc] 12 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > split [ tg ][ uexnyc ]

> icw > start > [ uexnyc ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ exnyc ]

> icw > start > [ exnyc ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ xnyc ]

> icw > start > [ xnyc ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ nyc ]

> icw > start > [ nyc ] 9 <nil>
> icw > 0 > n > [wc] 9 > [i] 0
> icw > split [ n ][ yc ]

> icw > start > [ yc ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ c ]

> icw > start > [ c ] 11 <nil>
> icw > 0 > c > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > u > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > g > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> hwialkbjgzc <<<<

> icw > start > [ hwialkbjgzc ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ wialkbjgzc ]

> icw > start > [ wialkbjgzc ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ ialkbjgzc ]

> icw > start > [ ialkbjgzc ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > c > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lmg <<<<

> icw > start > [ lmg ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> gijjy <<<<

> icw > start > [ gijjy ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ ijjy ]

> icw > start > [ ijjy ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lplrsxznfkoklxlv <<<<

> icw > start > [ lplrsxznfkoklxlv ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > l > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > x > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > l > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > v > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> xrbasbznvxas <<<<

> icw > start > [ xrbasbznvxas ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ rbasbznvxas ]

> icw > start > [ rbasbznvxas ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ basbznvxas ]

> icw > start > [ basbznvxas ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ asbznvxas ]

> icw > start > [ asbznvxas ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ sbznvxas ]

> icw > start > [ sbznvxas ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ bznvxas ]

> icw > start > [ bznvxas ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ znvxas ]

> icw > start > [ znvxas ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > v > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> twn <<<<

> icw > start > [ twn ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ wn ]

> icw > start > [ wn ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ n ]

> icw > start > [ n ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> bhqultkyfq <<<<

> icw > start > [ bhqultkyfq ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ hqultkyfq ]

> icw > start > [ hqultkyfq ] 1 <nil>
> icw > 0 > h > [wc] 1 > [i] 0
> icw > split [ h ][ qultkyfq ]

> icw > start > [ qultkyfq ] 2 <nil>
> icw > 0 > q > [wc] 2 > [i] 0
> icw > split [ q ][ ultkyfq ]

> icw > start > [ ultkyfq ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ ltkyfq ]

> icw > start > [ ltkyfq ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > t > [wc] 4 > [i] 1
> icw > split [ lt ][ kyfq ]

> icw > start > [ kyfq ] 5 <nil>
> icw > 0 > k > [wc] 5 > [i] 0
> icw > split [ k ][ yfq ]

> icw > start > [ yfq ] 6 <nil>
> icw > 0 > y > [wc] 6 > [i] 0
> icw > split [ y ][ fq ]

> icw > start > [ fq ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ q ]

> icw > start > [ q ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 6 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > l > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > t > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> saeq <<<<

> icw > start > [ saeq ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ aeq ]

> icw > start > [ aeq ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ eq ]

> icw > start > [ eq ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ q ]

> icw > start > [ q ] 3 <nil>
> icw > 0 > q > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> xbuw <<<<

> icw > start > [ xbuw ] 0 <nil>
> icw > 0 > x > [wc] 0 > [i] 0
> icw > split [ x ][ buw ]

> icw > start > [ buw ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ uw ]

> icw > start > [ uw ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ w ]

> icw > start > [ w ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zd <<<<

> icw > start > [ zd ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kng <<<<

> icw > start > [ kng ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ ng ]

> icw > start > [ ng ] 1 <nil>
> icw > 0 > n > [wc] 1 > [i] 0
> icw > split [ n ][ g ]

> icw > start > [ g ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> uoay <<<<

> icw > start > [ uoay ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ oay ]

> icw > start > [ oay ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ ay ]

> icw > start > [ ay ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ y ]

> icw > start > [ y ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > split [ oa ][ y ]

> icw > start > [ y ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > y > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> kfykd <<<<

> icw > start > [ kfykd ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ fykd ]

> icw > start > [ fykd ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ ykd ]

> icw > start > [ ykd ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ kd ]

> icw > start > [ kd ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ d ]

> icw > start > [ d ] 4 <nil>
> icw > 0 > d > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> armuwp <<<<

> icw > start > [ armuwp ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ rmuwp ]

> icw > start > [ rmuwp ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ muwp ]

> icw > start > [ muwp ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ uwp ]

> icw > start > [ uwp ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ wp ]

> icw > start > [ wp ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ p ]

> icw > start > [ p ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> gtghfxf <<<<

> icw > start > [ gtghfxf ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ tghfxf ]

> icw > start > [ tghfxf ] 1 <nil>
> icw > 0 > t > [wc] 1 > [i] 0
> icw > split [ t ][ ghfxf ]

> icw > start > [ ghfxf ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ hfxf ]

> icw > start > [ hfxf ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ fxf ]

> icw > start > [ fxf ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ xf ]

> icw > start > [ xf ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ f ]

> icw > start > [ f ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > split [ tg ][ hfxf ]

> icw > start > [ hfxf ] 2 <nil>
> icw > 0 > h > [wc] 2 > [i] 0
> icw > split [ h ][ fxf ]

> icw > start > [ fxf ] 3 <nil>
> icw > 0 > f > [wc] 3 > [i] 0
> icw > split [ f ][ xf ]

> icw > start > [ xf ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ f ]

> icw > start > [ f ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > t > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > f > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> gpucqwbihemixqmy <<<<

> icw > start > [ gpucqwbihemixqmy ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ pucqwbihemixqmy ]

> icw > start > [ pucqwbihemixqmy ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ ucqwbihemixqmy ]

> icw > start > [ ucqwbihemixqmy ] 2 <nil>
> icw > 0 > u > [wc] 2 > [i] 0
> icw > split [ u ][ cqwbihemixqmy ]

> icw > start > [ cqwbihemixqmy ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ qwbihemixqmy ]

> icw > start > [ qwbihemixqmy ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ wbihemixqmy ]

> icw > start > [ wbihemixqmy ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ bihemixqmy ]

> icw > start > [ bihemixqmy ] 6 <nil>
> icw > 0 > b > [wc] 6 > [i] 0
> icw > split [ b ][ ihemixqmy ]

> icw > start > [ ihemixqmy ] 7 <nil>
> icw > 0 > i > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > m > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > i > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > q > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > m > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > y > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jedyedimaa <<<<

> icw > start > [ jedyedimaa ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pbdrx <<<<

> icw > start > [ pbdrx ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ bdrx ]

> icw > start > [ bdrx ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ drx ]

> icw > start > [ drx ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ rx ]

> icw > start > [ rx ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ x ]

> icw > start > [ x ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> toxmxzimgfao <<<<

> icw > start > [ toxmxzimgfao ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ oxmxzimgfao ]

> icw > start > [ oxmxzimgfao ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ xmxzimgfao ]

> icw > start > [ xmxzimgfao ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ mxzimgfao ]

> icw > start > [ mxzimgfao ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ xzimgfao ]

> icw > start > [ xzimgfao ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ zimgfao ]

> icw > start > [ zimgfao ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > split [ xz ][ imgfao ]

> icw > start > [ imgfao ] 5 <nil>
> icw > 0 > i > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > o > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zlteob <<<<

> icw > start > [ zlteob ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > o > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> adoshnx <<<<

> icw > start > [ adoshnx ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ doshnx ]

> icw > start > [ doshnx ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ oshnx ]

> icw > start > [ oshnx ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ shnx ]

> icw > start > [ shnx ] 3 <nil>
> icw > 0 > s > [wc] 3 > [i] 0
> icw > split [ s ][ hnx ]

> icw > start > [ hnx ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ nx ]

> icw > start > [ nx ] 5 <nil>
> icw > 0 > n > [wc] 5 > [i] 0
> icw > split [ n ][ x ]

> icw > start > [ x ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 5 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 2 > [i] 1
> icw > split [ os ][ hnx ]

> icw > start > [ hnx ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ nx ]

> icw > start > [ nx ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ x ]

> icw > start > [ x ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > s > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > x > [wc] 0 > [i] 6
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ufgmypupei <<<<

> icw > start > [ ufgmypupei ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ fgmypupei ]

> icw > start > [ fgmypupei ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ gmypupei ]

> icw > start > [ gmypupei ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ mypupei ]

> icw > start > [ mypupei ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ ypupei ]

> icw > start > [ ypupei ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ pupei ]

> icw > start > [ pupei ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ upei ]

> icw > start > [ upei ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ pei ]

> icw > start > [ pei ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ ei ]

> icw > start > [ ei ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ i ]

> icw > start > [ i ] 9 <nil>
> icw > 0 > i > [wc] 9 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 8 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > split [ fg ][ mypupei ]

> icw > start > [ mypupei ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ ypupei ]

> icw > start > [ ypupei ] 3 <nil>
> icw > 0 > y > [wc] 3 > [i] 0
> icw > split [ y ][ pupei ]

> icw > start > [ pupei ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ upei ]

> icw > start > [ upei ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ pei ]

> icw > start > [ pei ] 6 <nil>
> icw > 0 > p > [wc] 6 > [i] 0
> icw > split [ p ][ ei ]

> icw > start > [ ei ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ i ]

> icw > start > [ i ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rqyex <<<<

> icw > start > [ rqyex ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ qyex ]

> icw > start > [ qyex ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ yex ]

> icw > start > [ yex ] 2 <nil>
> icw > 0 > y > [wc] 2 > [i] 0
> icw > split [ y ][ ex ]

> icw > start > [ ex ] 3 <nil>
> icw > 0 > e > [wc] 3 > [i] 0
> icw > split [ e ][ x ]

> icw > start > [ x ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 2 > [i] 1
> icw > split [ ye ][ x ]

> icw > start > [ x ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ljhqsaneicvaerqx <<<<

> icw > start > [ ljhqsaneicvaerqx ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > q > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > e > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > a > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > e > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > r > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > q > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > x > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ng <<<<

> icw > start > [ ng ] 0 <nil>
> icw > 0 > n > [wc] 0 > [i] 0
> icw > split [ n ][ g ]

> icw > start > [ g ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> sid <<<<

> icw > start > [ sid ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ id ]

> icw > start > [ id ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> zagpiuiia <<<<

> icw > start > [ zagpiuiia ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > p > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> re <<<<

> icw > start > [ re ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ e ]

> icw > start > [ e ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> oadojxmvgqgdodw <<<<

> icw > start > [ oadojxmvgqgdodw ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ adojxmvgqgdodw ]

> icw > start > [ adojxmvgqgdodw ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ dojxmvgqgdodw ]

> icw > start > [ dojxmvgqgdodw ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ ojxmvgqgdodw ]

> icw > start > [ ojxmvgqgdodw ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ jxmvgqgdodw ]

> icw > start > [ jxmvgqgdodw ] 4 <nil>
> icw > 0 > j > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > split [ oa ][ dojxmvgqgdodw ]

> icw > start > [ dojxmvgqgdodw ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ ojxmvgqgdodw ]

> icw > start > [ ojxmvgqgdodw ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ jxmvgqgdodw ]

> icw > start > [ jxmvgqgdodw ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > j > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > m > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > d > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > o > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > w > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jszyeruwnupqgmy <<<<

> icw > start > [ jszyeruwnupqgmy ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > e > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > n > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > q > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > g > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > m > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > y > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jxigaskpj <<<<

> icw > start > [ jxigaskpj ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > g > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> zpsbhgokwtfcisj <<<<

> icw > start > [ zpsbhgokwtfcisj ] 0 <nil>
> icw > 0 > z > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > g > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > t > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > f > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > i > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > s > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vep <<<<

> icw > start > [ vep ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ ep ]

> icw > start > [ ep ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ p ]

> icw > start > [ p ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ebwrcpafxzhb <<<<

> icw > start > [ ebwrcpafxzhb ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ bwrcpafxzhb ]

> icw > start > [ bwrcpafxzhb ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ wrcpafxzhb ]

> icw > start > [ wrcpafxzhb ] 2 <nil>
> icw > 0 > w > [wc] 2 > [i] 0
> icw > split [ w ][ rcpafxzhb ]

> icw > start > [ rcpafxzhb ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ cpafxzhb ]

> icw > start > [ cpafxzhb ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ pafxzhb ]

> icw > start > [ pafxzhb ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ afxzhb ]

> icw > start > [ afxzhb ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ fxzhb ]

> icw > start > [ fxzhb ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ xzhb ]

> icw > start > [ xzhb ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ zhb ]

> icw > start > [ zhb ] 9 <nil>
> icw > 0 > z > [wc] 9 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 8 > [i] 1
> icw > split [ xz ][ hb ]

> icw > start > [ hb ] 9 <nil>
> icw > 0 > h > [wc] 9 > [i] 0
> icw > split [ h ][ b ]

> icw > start > [ b ] 10 <nil>
> icw > 0 > b > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > split [ wr ][ cpafxzhb ]

> icw > start > [ cpafxzhb ] 3 <nil>
> icw > 0 > c > [wc] 3 > [i] 0
> icw > split [ c ][ pafxzhb ]

> icw > start > [ pafxzhb ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ afxzhb ]

> icw > start > [ afxzhb ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ fxzhb ]

> icw > start > [ fxzhb ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ xzhb ]

> icw > start > [ xzhb ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ zhb ]

> icw > start > [ zhb ] 8 <nil>
> icw > 0 > z > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 7 > [i] 1
> icw > split [ xz ][ hb ]

> icw > start > [ hb ] 8 <nil>
> icw > 0 > h > [wc] 8 > [i] 0
> icw > split [ h ][ b ]

> icw > start > [ b ] 9 <nil>
> icw > 0 > b > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > c > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > c > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > b > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> gjykhz <<<<

> icw > start > [ gjykhz ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ jykhz ]

> icw > start > [ jykhz ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 1 > [i] 1
> icw > split [ jy ][ khz ]

> icw > start > [ khz ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ hz ]

> icw > start > [ hz ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ z ]

> icw > start > [ z ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mfomgxjphcscuxj <<<<

> icw > start > [ mfomgxjphcscuxj ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ fomgxjphcscuxj ]

> icw > start > [ fomgxjphcscuxj ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ omgxjphcscuxj ]

> icw > start > [ omgxjphcscuxj ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > split [ o ][ mgxjphcscuxj ]

> icw > start > [ mgxjphcscuxj ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ gxjphcscuxj ]

> icw > start > [ gxjphcscuxj ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ xjphcscuxj ]

> icw > start > [ xjphcscuxj ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > split [ x ][ jphcscuxj ]

> icw > start > [ jphcscuxj ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 6 > [i] 1
> icw > split [ jp ][ hcscuxj ]

> icw > start > [ hcscuxj ] 7 <nil>
> icw > 0 > h > [wc] 7 > [i] 0
> icw > split [ h ][ cscuxj ]

> icw > start > [ cscuxj ] 8 <nil>
> icw > 0 > c > [wc] 8 > [i] 0
> icw > split [ c ][ scuxj ]

> icw > start > [ scuxj ] 9 <nil>
> icw > 0 > s > [wc] 9 > [i] 0
> icw > split [ s ][ cuxj ]

> icw > start > [ cuxj ] 10 <nil>
> icw > 0 > c > [wc] 10 > [i] 0
> icw > split [ c ][ uxj ]

> icw > start > [ uxj ] 11 <nil>
> icw > 0 > u > [wc] 11 > [i] 0
> icw > split [ u ][ xj ]

> icw > start > [ xj ] 12 <nil>
> icw > 0 > x > [wc] 12 > [i] 0
> icw > split [ x ][ j ]

> icw > start > [ j ] 13 <nil>
> icw > 0 > j > [wc] 13 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 12 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 11 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 11 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 9 > [i] 1
> icw > split [ sc ][ uxj ]

> icw > start > [ uxj ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ xj ]

> icw > start > [ xj ] 11 <nil>
> icw > 0 > x > [wc] 11 > [i] 0
> icw > split [ x ][ j ]

> icw > start > [ j ] 12 <nil>
> icw > 0 > j > [wc] 12 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > u > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > h > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > split [ mf ][ omgxjphcscuxj ]

> icw > start > [ omgxjphcscuxj ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ mgxjphcscuxj ]

> icw > start > [ mgxjphcscuxj ] 2 <nil>
> icw > 0 > m > [wc] 2 > [i] 0
> icw > split [ m ][ gxjphcscuxj ]

> icw > start > [ gxjphcscuxj ] 3 <nil>
> icw > 0 > g > [wc] 3 > [i] 0
> icw > split [ g ][ xjphcscuxj ]

> icw > start > [ xjphcscuxj ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ jphcscuxj ]

> icw > start > [ jphcscuxj ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > p > [wc] 5 > [i] 1
> icw > split [ jp ][ hcscuxj ]

> icw > start > [ hcscuxj ] 6 <nil>
> icw > 0 > h > [wc] 6 > [i] 0
> icw > split [ h ][ cscuxj ]

> icw > start > [ cscuxj ] 7 <nil>
> icw > 0 > c > [wc] 7 > [i] 0
> icw > split [ c ][ scuxj ]

> icw > start > [ scuxj ] 8 <nil>
> icw > 0 > s > [wc] 8 > [i] 0
> icw > split [ s ][ cuxj ]

> icw > start > [ cuxj ] 9 <nil>
> icw > 0 > c > [wc] 9 > [i] 0
> icw > split [ c ][ uxj ]

> icw > start > [ uxj ] 10 <nil>
> icw > 0 > u > [wc] 10 > [i] 0
> icw > split [ u ][ xj ]

> icw > start > [ xj ] 11 <nil>
> icw > 0 > x > [wc] 11 > [i] 0
> icw > split [ x ][ j ]

> icw > start > [ j ] 12 <nil>
> icw > 0 > j > [wc] 12 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 10 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > split [ sc ][ uxj ]

> icw > start > [ uxj ] 9 <nil>
> icw > 0 > u > [wc] 9 > [i] 0
> icw > split [ u ][ xj ]

> icw > start > [ xj ] 10 <nil>
> icw > 0 > x > [wc] 10 > [i] 0
> icw > split [ x ][ j ]

> icw > start > [ j ] 11 <nil>
> icw > 0 > j > [wc] 11 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > u > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > h > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > c > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > u > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > x > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> iwbdvusywqlsc <<<<

> icw > start > [ iwbdvusywqlsc ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > d > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > s > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > y > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > l > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > s > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > c > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> opvrnx <<<<

> icw > start > [ opvrnx ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ pvrnx ]

> icw > start > [ pvrnx ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ vrnx ]

> icw > start > [ vrnx ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ rnx ]

> icw > start > [ rnx ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ nx ]

> icw > start > [ nx ] 4 <nil>
> icw > 0 > n > [wc] 4 > [i] 0
> icw > split [ n ][ x ]

> icw > start > [ x ] 5 <nil>
> icw > 0 > x > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 4 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> mkgiwfvqfkotpdz <<<<

> icw > start > [ mkgiwfvqfkotpdz ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ kgiwfvqfkotpdz ]

> icw > start > [ kgiwfvqfkotpdz ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ giwfvqfkotpdz ]

> icw > start > [ giwfvqfkotpdz ] 2 <nil>
> icw > 0 > g > [wc] 2 > [i] 0
> icw > split [ g ][ iwfvqfkotpdz ]

> icw > start > [ iwfvqfkotpdz ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > g > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > f > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > p > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > d > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > z > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> inpobubzbvstk <<<<

> icw > start > [ inpobubzbvstk ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > z > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > b > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > s > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > k > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vubuucilxyh <<<<

> icw > start > [ vubuucilxyh ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ ubuucilxyh ]

> icw > start > [ ubuucilxyh ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ buucilxyh ]

> icw > start > [ buucilxyh ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ uucilxyh ]

> icw > start > [ uucilxyh ] 3 <nil>
> icw > 0 > u > [wc] 3 > [i] 0
> icw > split [ u ][ ucilxyh ]

> icw > start > [ ucilxyh ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ cilxyh ]

> icw > start > [ cilxyh ] 5 <nil>
> icw > 0 > c > [wc] 5 > [i] 0
> icw > split [ c ][ ilxyh ]

> icw > start > [ ilxyh ] 6 <nil>
> icw > 0 > i > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > l > [wc] 6 > [i] 1
> icw > split [ il ][ xyh ]

> icw > start > [ xyh ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ yh ]

> icw > start > [ yh ] 8 <nil>
> icw > 0 > y > [wc] 8 > [i] 0
> icw > split [ y ][ h ]

> icw > start > [ h ] 9 <nil>
> icw > 0 > h > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > c > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > x > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> bci <<<<

> icw > start > [ bci ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ ci ]

> icw > start > [ ci ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ i ]

> icw > start > [ i ] 2 <nil>
> icw > 0 > i > [wc] 2 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 1 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 0 > [i] 2
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dibmye <<<<

> icw > start > [ dibmye ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ ibmye ]

> icw > start > [ ibmye ] 1 <nil>
> icw > 0 > i > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> rlcnvnuuqfvhw <<<<

> icw > start > [ rlcnvnuuqfvhw ] 0 <nil>
> icw > 0 > r > [wc] 0 > [i] 0
> icw > split [ r ][ lcnvnuuqfvhw ]

> icw > start > [ lcnvnuuqfvhw ] 1 <nil>
> icw > 0 > l > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > n > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > u > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > f > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > v > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > w > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> oorbyyiigppuft <<<<

> icw > start > [ oorbyyiigppuft ] 0 <nil>
> icw > 0 > o > [wc] 0 > [i] 0
> icw > split [ o ][ orbyyiigppuft ]

> icw > start > [ orbyyiigppuft ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ rbyyiigppuft ]

> icw > start > [ rbyyiigppuft ] 2 <nil>
> icw > 0 > r > [wc] 2 > [i] 0
> icw > split [ r ][ byyiigppuft ]

> icw > start > [ byyiigppuft ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ yyiigppuft ]

> icw > start > [ yyiigppuft ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ yiigppuft ]

> icw > start > [ yiigppuft ] 5 <nil>
> icw > 0 > y > [wc] 5 > [i] 0
> icw > split [ y ][ iigppuft ]

> icw > start > [ iigppuft ] 6 <nil>
> icw > 0 > i > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > p > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > u > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > f > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > t > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> swpksfdxicemjbf <<<<

> icw > start > [ swpksfdxicemjbf ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ wpksfdxicemjbf ]

> icw > start > [ wpksfdxicemjbf ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ pksfdxicemjbf ]

> icw > start > [ pksfdxicemjbf ] 2 <nil>
> icw > 0 > p > [wc] 2 > [i] 0
> icw > split [ p ][ ksfdxicemjbf ]

> icw > start > [ ksfdxicemjbf ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ sfdxicemjbf ]

> icw > start > [ sfdxicemjbf ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ fdxicemjbf ]

> icw > start > [ fdxicemjbf ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ dxicemjbf ]

> icw > start > [ dxicemjbf ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ xicemjbf ]

> icw > start > [ xicemjbf ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ icemjbf ]

> icw > start > [ icemjbf ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > split [ fd ][ xicemjbf ]

> icw > start > [ xicemjbf ] 6 <nil>
> icw > 0 > x > [wc] 6 > [i] 0
> icw > split [ x ][ icemjbf ]

> icw > start > [ icemjbf ] 7 <nil>
> icw > 0 > i > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > c > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > x > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > d > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > x > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > i > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > c > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > b > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > f > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> goabwrqdoudf <<<<

> icw > start > [ goabwrqdoudf ] 0 <nil>
> icw > 0 > g > [wc] 0 > [i] 0
> icw > split [ g ][ oabwrqdoudf ]

> icw > start > [ oabwrqdoudf ] 1 <nil>
> icw > 0 > o > [wc] 1 > [i] 0
> icw > split [ o ][ abwrqdoudf ]

> icw > start > [ abwrqdoudf ] 2 <nil>
> icw > 0 > a > [wc] 2 > [i] 0
> icw > split [ a ][ bwrqdoudf ]

> icw > start > [ bwrqdoudf ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ wrqdoudf ]

> icw > start > [ wrqdoudf ] 4 <nil>
> icw > 0 > w > [wc] 4 > [i] 0
> icw > split [ w ][ rqdoudf ]

> icw > start > [ rqdoudf ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ qdoudf ]

> icw > start > [ qdoudf ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ doudf ]

> icw > start > [ doudf ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ oudf ]

> icw > start > [ oudf ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > split [ o ][ udf ]

> icw > start > [ udf ] 9 <nil>
> icw > 0 > u > [wc] 9 > [i] 0
> icw > split [ u ][ df ]

> icw > start > [ df ] 10 <nil>
> icw > 0 > d > [wc] 10 > [i] 0
> icw > split [ d ][ f ]

> icw > start > [ f ] 11 <nil>
> icw > 0 > f > [wc] 11 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 10 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 9 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 5 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > split [ wr ][ qdoudf ]

> icw > start > [ qdoudf ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ doudf ]

> icw > start > [ doudf ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ oudf ]

> icw > start > [ oudf ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ udf ]

> icw > start > [ udf ] 8 <nil>
> icw > 0 > u > [wc] 8 > [i] 0
> icw > split [ u ][ df ]

> icw > start > [ df ] 9 <nil>
> icw > 0 > d > [wc] 9 > [i] 0
> icw > split [ d ][ f ]

> icw > start > [ f ] 10 <nil>
> icw > 0 > f > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 1 > [i] 1
> icw > split [ oa ][ bwrqdoudf ]

> icw > start > [ bwrqdoudf ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ wrqdoudf ]

> icw > start > [ wrqdoudf ] 3 <nil>
> icw > 0 > w > [wc] 3 > [i] 0
> icw > split [ w ][ rqdoudf ]

> icw > start > [ rqdoudf ] 4 <nil>
> icw > 0 > r > [wc] 4 > [i] 0
> icw > split [ r ][ qdoudf ]

> icw > start > [ qdoudf ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ doudf ]

> icw > start > [ doudf ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ oudf ]

> icw > start > [ oudf ] 7 <nil>
> icw > 0 > o > [wc] 7 > [i] 0
> icw > split [ o ][ udf ]

> icw > start > [ udf ] 8 <nil>
> icw > 0 > u > [wc] 8 > [i] 0
> icw > split [ u ][ df ]

> icw > start > [ df ] 9 <nil>
> icw > 0 > d > [wc] 9 > [i] 0
> icw > split [ d ][ f ]

> icw > start > [ f ] 10 <nil>
> icw > 0 > f > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 9 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 3 > [i] 1
> icw > split [ wr ][ qdoudf ]

> icw > start > [ qdoudf ] 4 <nil>
> icw > 0 > q > [wc] 4 > [i] 0
> icw > split [ q ][ doudf ]

> icw > start > [ doudf ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > split [ d ][ oudf ]

> icw > start > [ oudf ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ udf ]

> icw > start > [ udf ] 7 <nil>
> icw > 0 > u > [wc] 7 > [i] 0
> icw > split [ u ][ df ]

> icw > start > [ df ] 8 <nil>
> icw > 0 > d > [wc] 8 > [i] 0
> icw > split [ d ][ f ]

> icw > start > [ f ] 9 <nil>
> icw > 0 > f > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > w > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > u > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > d > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> yjutkeqakoarru <<<<

> icw > start > [ yjutkeqakoarru ] 0 <nil>
> icw > 0 > y > [wc] 0 > [i] 0
> icw > split [ y ][ jutkeqakoarru ]

> icw > start > [ jutkeqakoarru ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > k > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > q > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > k > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > r > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > u > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> wuznnlyd <<<<

> icw > start > [ wuznnlyd ] 0 <nil>
> icw > 0 > w > [wc] 0 > [i] 0
> icw > split [ w ][ uznnlyd ]

> icw > start > [ uznnlyd ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ znnlyd ]

> icw > start > [ znnlyd ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > split [ uz ][ nnlyd ]

> icw > start > [ nnlyd ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ nlyd ]

> icw > start > [ nlyd ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ lyd ]

> icw > start > [ lyd ] 4 <nil>
> icw > 0 > l > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > y > [wc] 4 > [i] 1
> icw > split [ ly ][ d ]

> icw > start > [ d ] 5 <nil>
> icw > 0 > d > [wc] 5 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > l > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > y > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vfelxvtggkkk <<<<

> icw > start > [ vfelxvtggkkk ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ felxvtggkkk ]

> icw > start > [ felxvtggkkk ] 1 <nil>
> icw > 0 > f > [wc] 1 > [i] 0
> icw > split [ f ][ elxvtggkkk ]

> icw > start > [ elxvtggkkk ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ lxvtggkkk ]

> icw > start > [ lxvtggkkk ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > g > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > k > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > k > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > k > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mxlwbkbklbwfsvr <<<<

> icw > start > [ mxlwbkbklbwfsvr ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ xlwbkbklbwfsvr ]

> icw > start > [ xlwbkbklbwfsvr ] 1 <nil>
> icw > 0 > x > [wc] 1 > [i] 0
> icw > split [ x ][ lwbkbklbwfsvr ]

> icw > start > [ lwbkbklbwfsvr ] 2 <nil>
> icw > 0 > l > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > b > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > k > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > k > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > b > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > w > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > f > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > s > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > v > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > r > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> advraqovan <<<<

> icw > start > [ advraqovan ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ dvraqovan ]

> icw > start > [ dvraqovan ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ vraqovan ]

> icw > start > [ vraqovan ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ raqovan ]

> icw > start > [ raqovan ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ aqovan ]

> icw > start > [ aqovan ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ qovan ]

> icw > start > [ qovan ] 5 <nil>
> icw > 0 > q > [wc] 5 > [i] 0
> icw > split [ q ][ ovan ]

> icw > start > [ ovan ] 6 <nil>
> icw > 0 > o > [wc] 6 > [i] 0
> icw > split [ o ][ van ]

> icw > start > [ van ] 7 <nil>
> icw > 0 > v > [wc] 7 > [i] 0
> icw > split [ v ][ an ]

> icw > start > [ an ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > split [ a ][ n ]

> icw > start > [ n ] 9 <nil>
> icw > 0 > n > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > a > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > q > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > n > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> smkln <<<<

> icw > start > [ smkln ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ mkln ]

> icw > start > [ mkln ] 1 <nil>
> icw > 0 > m > [wc] 1 > [i] 0
> icw > split [ m ][ kln ]

> icw > start > [ kln ] 2 <nil>
> icw > 0 > k > [wc] 2 > [i] 0
> icw > split [ k ][ ln ]

> icw > start > [ ln ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > n > [wc] 0 > [i] 4
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jxxvzdjlpyurxpj <<<<

> icw > start > [ jxxvzdjlpyurxpj ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > x > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > d > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > p > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > y > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > u > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > r > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > x > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > p > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > j > [wc] 0 > [i] 14
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> ssebtpznwoytjefo <<<<

> icw > start > [ ssebtpznwoytjefo ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ sebtpznwoytjefo ]

> icw > start > [ sebtpznwoytjefo ] 1 <nil>
> icw > 0 > s > [wc] 1 > [i] 0
> icw > split [ s ][ ebtpznwoytjefo ]

> icw > start > [ ebtpznwoytjefo ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ btpznwoytjefo ]

> icw > start > [ btpznwoytjefo ] 3 <nil>
> icw > 0 > b > [wc] 3 > [i] 0
> icw > split [ b ][ tpznwoytjefo ]

> icw > start > [ tpznwoytjefo ] 4 <nil>
> icw > 0 > t > [wc] 4 > [i] 0
> icw > split [ t ][ pznwoytjefo ]

> icw > start > [ pznwoytjefo ] 5 <nil>
> icw > 0 > p > [wc] 5 > [i] 0
> icw > split [ p ][ znwoytjefo ]

> icw > start > [ znwoytjefo ] 6 <nil>
> icw > 0 > z > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 4 > [i] 1
> icw > split [ tp ][ znwoytjefo ]

> icw > start > [ znwoytjefo ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 1 > [i] 2
> icw > traversal
> icw > 3 > t > [wc] 1 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > split [ ss ][ ebtpznwoytjefo ]

> icw > start > [ ebtpznwoytjefo ] 1 <nil>
> icw > 0 > e > [wc] 1 > [i] 0
> icw > split [ e ][ btpznwoytjefo ]

> icw > start > [ btpznwoytjefo ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ tpznwoytjefo ]

> icw > start > [ tpznwoytjefo ] 3 <nil>
> icw > 0 > t > [wc] 3 > [i] 0
> icw > split [ t ][ pznwoytjefo ]

> icw > start > [ pznwoytjefo ] 4 <nil>
> icw > 0 > p > [wc] 4 > [i] 0
> icw > split [ p ][ znwoytjefo ]

> icw > start > [ znwoytjefo ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 3 > [i] 1
> icw > split [ tp ][ znwoytjefo ]

> icw > start > [ znwoytjefo ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > p > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > p > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > w > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > o > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > y > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > e > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > f > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > o > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> dynaiukctgrzjx <<<<

> icw > start > [ dynaiukctgrzjx ] 0 <nil>
> icw > 0 > d > [wc] 0 > [i] 0
> icw > split [ d ][ ynaiukctgrzjx ]

> icw > start > [ ynaiukctgrzjx ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ naiukctgrzjx ]

> icw > start > [ naiukctgrzjx ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ aiukctgrzjx ]

> icw > start > [ aiukctgrzjx ] 3 <nil>
> icw > 0 > a > [wc] 3 > [i] 0
> icw > split [ a ][ iukctgrzjx ]

> icw > start > [ iukctgrzjx ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 2 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 2 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > a > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > u > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > k > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > c > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > t > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > r > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > z > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > j > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > x > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> irzosjuncvh <<<<

> icw > start > [ irzosjuncvh ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > j > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > n > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > c > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > v > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> hcnhhrajahitn <<<<

> icw > start > [ hcnhhrajahitn ] 0 <nil>
> icw > 0 > h > [wc] 0 > [i] 0
> icw > split [ h ][ cnhhrajahitn ]

> icw > start > [ cnhhrajahitn ] 1 <nil>
> icw > 0 > c > [wc] 1 > [i] 0
> icw > split [ c ][ nhhrajahitn ]

> icw > start > [ nhhrajahitn ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ hhrajahitn ]

> icw > start > [ hhrajahitn ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ hrajahitn ]

> icw > start > [ hrajahitn ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ rajahitn ]

> icw > start > [ rajahitn ] 5 <nil>
> icw > 0 > r > [wc] 5 > [i] 0
> icw > split [ r ][ ajahitn ]

> icw > start > [ ajahitn ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ jahitn ]

> icw > start > [ jahitn ] 7 <nil>
> icw > 0 > j > [wc] 7 > [i] 0
> icw > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > r > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > c > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > r > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > a > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > h > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > i > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > n > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> vwtifcoqepqyzwya <<<<

> icw > start > [ vwtifcoqepqyzwya ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ wtifcoqepqyzwya ]

> icw > start > [ wtifcoqepqyzwya ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ tifcoqepqyzwya ]

> icw > start > [ tifcoqepqyzwya ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ ifcoqepqyzwya ]

> icw > start > [ ifcoqepqyzwya ] 3 <nil>
> icw > 0 > i > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > split [ if ][ coqepqyzwya ]

> icw > start > [ coqepqyzwya ] 4 <nil>
> icw > 0 > c > [wc] 4 > [i] 0
> icw > split [ c ][ oqepqyzwya ]

> icw > start > [ oqepqyzwya ] 5 <nil>
> icw > 0 > o > [wc] 5 > [i] 0
> icw > split [ o ][ qepqyzwya ]

> icw > start > [ qepqyzwya ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ epqyzwya ]

> icw > start > [ epqyzwya ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ pqyzwya ]

> icw > start > [ pqyzwya ] 8 <nil>
> icw > 0 > p > [wc] 8 > [i] 0
> icw > split [ p ][ qyzwya ]

> icw > start > [ qyzwya ] 9 <nil>
> icw > 0 > q > [wc] 9 > [i] 0
> icw > split [ q ][ yzwya ]

> icw > start > [ yzwya ] 10 <nil>
> icw > 0 > y > [wc] 10 > [i] 0
> icw > split [ y ][ zwya ]

> icw > start > [ zwya ] 11 <nil>
> icw > 0 > z > [wc] 11 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 11 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 10 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 10 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 10 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > p > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > split [ qe ][ pqyzwya ]

> icw > start > [ pqyzwya ] 7 <nil>
> icw > 0 > p > [wc] 7 > [i] 0
> icw > split [ p ][ qyzwya ]

> icw > start > [ qyzwya ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > split [ q ][ yzwya ]

> icw > start > [ yzwya ] 9 <nil>
> icw > 0 > y > [wc] 9 > [i] 0
> icw > split [ y ][ zwya ]

> icw > start > [ zwya ] 10 <nil>
> icw > 0 > z > [wc] 10 > [i] 0
> icw > traversal
> icw > 1 > w > [wc] 10 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 9 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 9 > [i] 2
> icw > traversal
> icw > 3 > y > [wc] 9 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > p > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > o > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 4 > [i] 2
> icw > traversal
> icw > 3 > e > [wc] 4 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > c > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > c > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > q > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > p > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > q > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > y > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > z > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > w > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > y > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > a > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> kddxywvgqxo <<<<

> icw > start > [ kddxywvgqxo ] 0 <nil>
> icw > 0 > k > [wc] 0 > [i] 0
> icw > split [ k ][ ddxywvgqxo ]

> icw > start > [ ddxywvgqxo ] 1 <nil>
> icw > 0 > d > [wc] 1 > [i] 0
> icw > split [ d ][ dxywvgqxo ]

> icw > start > [ dxywvgqxo ] 2 <nil>
> icw > 0 > d > [wc] 2 > [i] 0
> icw > split [ d ][ xywvgqxo ]

> icw > start > [ xywvgqxo ] 3 <nil>
> icw > 0 > x > [wc] 3 > [i] 0
> icw > split [ x ][ ywvgqxo ]

> icw > start > [ ywvgqxo ] 4 <nil>
> icw > 0 > y > [wc] 4 > [i] 0
> icw > split [ y ][ wvgqxo ]

> icw > start > [ wvgqxo ] 5 <nil>
> icw > 0 > w > [wc] 5 > [i] 0
> icw > split [ w ][ vgqxo ]

> icw > start > [ vgqxo ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ gqxo ]

> icw > start > [ gqxo ] 7 <nil>
> icw > 0 > g > [wc] 7 > [i] 0
> icw > split [ g ][ qxo ]

> icw > start > [ qxo ] 8 <nil>
> icw > 0 > q > [wc] 8 > [i] 0
> icw > split [ q ][ xo ]

> icw > start > [ xo ] 9 <nil>
> icw > 0 > x > [wc] 9 > [i] 0
> icw > split [ x ][ o ]

> icw > start > [ o ] 10 <nil>
> icw > 0 > o > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 8 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 6 > [i] 1
> icw > split [ vg ][ qxo ]

> icw > start > [ qxo ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > split [ q ][ xo ]

> icw > start > [ xo ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ o ]

> icw > start > [ o ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > g > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 4 > [i] 1
> icw > split [ yw ][ vgqxo ]

> icw > start > [ vgqxo ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ gqxo ]

> icw > start > [ gqxo ] 6 <nil>
> icw > 0 > g > [wc] 6 > [i] 0
> icw > split [ g ][ qxo ]

> icw > start > [ qxo ] 7 <nil>
> icw > 0 > q > [wc] 7 > [i] 0
> icw > split [ q ][ xo ]

> icw > start > [ xo ] 8 <nil>
> icw > 0 > x > [wc] 8 > [i] 0
> icw > split [ x ][ o ]

> icw > start > [ o ] 9 <nil>
> icw > 0 > o > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 7 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > q > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 5 > [i] 1
> icw > split [ vg ][ qxo ]

> icw > start > [ qxo ] 6 <nil>
> icw > 0 > q > [wc] 6 > [i] 0
> icw > split [ q ][ xo ]

> icw > start > [ xo ] 7 <nil>
> icw > 0 > x > [wc] 7 > [i] 0
> icw > split [ x ][ o ]

> icw > start > [ o ] 8 <nil>
> icw > 0 > o > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > q > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > y > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > x > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > y > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > w > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > x > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > o > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> syxngevs <<<<

> icw > start > [ syxngevs ] 0 <nil>
> icw > 0 > s > [wc] 0 > [i] 0
> icw > split [ s ][ yxngevs ]

> icw > start > [ yxngevs ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ xngevs ]

> icw > start > [ xngevs ] 2 <nil>
> icw > 0 > x > [wc] 2 > [i] 0
> icw > split [ x ][ ngevs ]

> icw > start > [ ngevs ] 3 <nil>
> icw > 0 > n > [wc] 3 > [i] 0
> icw > split [ n ][ gevs ]

> icw > start > [ gevs ] 4 <nil>
> icw > 0 > g > [wc] 4 > [i] 0
> icw > split [ g ][ evs ]

> icw > start > [ evs ] 5 <nil>
> icw > 0 > e > [wc] 5 > [i] 0
> icw > split [ e ][ vs ]

> icw > start > [ vs ] 6 <nil>
> icw > 0 > v > [wc] 6 > [i] 0
> icw > split [ v ][ s ]

> icw > start > [ s ] 7 <nil>
> icw > 0 > s > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 4 > [i] 1
> icw > split [ ge ][ vs ]

> icw > start > [ vs ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ s ]

> icw > start > [ s ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > v > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 3 > [i] 1
> icw > split [ ng ][ evs ]

> icw > start > [ evs ] 4 <nil>
> icw > 0 > e > [wc] 4 > [i] 0
> icw > split [ e ][ vs ]

> icw > start > [ vs ] 5 <nil>
> icw > 0 > v > [wc] 5 > [i] 0
> icw > split [ v ][ s ]

> icw > start > [ s ] 6 <nil>
> icw > 0 > s > [wc] 6 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > v > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > n > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > x > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > g > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > e > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > s > [wc] 0 > [i] 7
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> batvzmziq <<<<

> icw > start > [ batvzmziq ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ atvzmziq ]

> icw > start > [ atvzmziq ] 1 <nil>
> icw > 0 > a > [wc] 1 > [i] 0
> icw > split [ a ][ tvzmziq ]

> icw > start > [ tvzmziq ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ vzmziq ]

> icw > start > [ vzmziq ] 3 <nil>
> icw > 0 > v > [wc] 3 > [i] 0
> icw > split [ v ][ zmziq ]

> icw > start > [ zmziq ] 4 <nil>
> icw > 0 > z > [wc] 4 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > split [ at ][ vzmziq ]

> icw > start > [ vzmziq ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ zmziq ]

> icw > start > [ zmziq ] 3 <nil>
> icw > 0 > z > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > v > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > v > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > z > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > i > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > q > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mjewiyo <<<<

> icw > start > [ mjewiyo ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ jewiyo ]

> icw > start > [ jewiyo ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > w > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > w > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > i > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > y > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> pzsupxoflq <<<<

> icw > start > [ pzsupxoflq ] 0 <nil>
> icw > 0 > p > [wc] 0 > [i] 0
> icw > split [ p ][ zsupxoflq ]

> icw > start > [ zsupxoflq ] 1 <nil>
> icw > 0 > z > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > s > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > u > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > x > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > l > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > q > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> byzhtvvpj <<<<

> icw > start > [ byzhtvvpj ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ yzhtvvpj ]

> icw > start > [ yzhtvvpj ] 1 <nil>
> icw > 0 > y > [wc] 1 > [i] 0
> icw > split [ y ][ zhtvvpj ]

> icw > start > [ zhtvvpj ] 2 <nil>
> icw > 0 > z > [wc] 2 > [i] 0
> icw > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > y > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > t > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > v > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > v > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > p > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > j > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> cqnlvlzr <<<<

> icw > start > [ cqnlvlzr ] 0 <nil>
> icw > 0 > c > [wc] 0 > [i] 0
> icw > split [ c ][ qnlvlzr ]

> icw > start > [ qnlvlzr ] 1 <nil>
> icw > 0 > q > [wc] 1 > [i] 0
> icw > split [ q ][ nlvlzr ]

> icw > start > [ nlvlzr ] 2 <nil>
> icw > 0 > n > [wc] 2 > [i] 0
> icw > split [ n ][ lvlzr ]

> icw > start > [ lvlzr ] 3 <nil>
> icw > 0 > l > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > n > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > l > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > v > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > z > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > r > [wc] 0 > [i] 7
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> akvmxzbaei <<<<

> icw > start > [ akvmxzbaei ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ kvmxzbaei ]

> icw > start > [ kvmxzbaei ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ vmxzbaei ]

> icw > start > [ vmxzbaei ] 2 <nil>
> icw > 0 > v > [wc] 2 > [i] 0
> icw > split [ v ][ mxzbaei ]

> icw > start > [ mxzbaei ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ xzbaei ]

> icw > start > [ xzbaei ] 4 <nil>
> icw > 0 > x > [wc] 4 > [i] 0
> icw > split [ x ][ zbaei ]

> icw > start > [ zbaei ] 5 <nil>
> icw > 0 > z > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > b > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > a > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > z > [wc] 4 > [i] 1
> icw > split [ xz ][ baei ]

> icw > start > [ baei ] 5 <nil>
> icw > 0 > b > [wc] 5 > [i] 0
> icw > split [ b ][ aei ]

> icw > start > [ aei ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ ei ]

> icw > start > [ ei ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ i ]

> icw > start > [ i ] 8 <nil>
> icw > 0 > i > [wc] 8 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > i > [wc] 7 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > b > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > x > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > z > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > m > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > x > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > v > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > v > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > b > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > a > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > i > [wc] 0 > [i] 9
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mwo <<<<

> icw > start > [ mwo ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ wo ]

> icw > start > [ wo ] 1 <nil>
> icw > 0 > w > [wc] 1 > [i] 0
> icw > split [ w ][ o ]

> icw > start > [ o ] 2 <nil>
> icw > 0 > o > [wc] 2 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 1 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > w > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > o > [wc] 0 > [i] 2
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> vg <<<<

> icw > start > [ vg ] 0 <nil>
> icw > 0 > v > [wc] 0 > [i] 0
> icw > split [ v ][ g ]

> icw > start > [ g ] 1 <nil>
> icw > 0 > g > [wc] 1 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > g > [wc] 0 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ekfkuajjogbxhjii <<<<

> icw > start > [ ekfkuajjogbxhjii ] 0 <nil>
> icw > 0 > e > [wc] 0 > [i] 0
> icw > split [ e ][ kfkuajjogbxhjii ]

> icw > start > [ kfkuajjogbxhjii ] 1 <nil>
> icw > 0 > k > [wc] 1 > [i] 0
> icw > split [ k ][ fkuajjogbxhjii ]

> icw > start > [ fkuajjogbxhjii ] 2 <nil>
> icw > 0 > f > [wc] 2 > [i] 0
> icw > split [ f ][ kuajjogbxhjii ]

> icw > start > [ kuajjogbxhjii ] 3 <nil>
> icw > 0 > k > [wc] 3 > [i] 0
> icw > split [ k ][ uajjogbxhjii ]

> icw > start > [ uajjogbxhjii ] 4 <nil>
> icw > 0 > u > [wc] 4 > [i] 0
> icw > split [ u ][ ajjogbxhjii ]

> icw > start > [ ajjogbxhjii ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ jjogbxhjii ]

> icw > start > [ jjogbxhjii ] 6 <nil>
> icw > 0 > j > [wc] 6 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > split [ ua ][ jjogbxhjii ]

> icw > start > [ jjogbxhjii ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 3 > [i] 1
> icw > split [ ku ][ ajjogbxhjii ]

> icw > start > [ ajjogbxhjii ] 4 <nil>
> icw > 0 > a > [wc] 4 > [i] 0
> icw > split [ a ][ jjogbxhjii ]

> icw > start > [ jjogbxhjii ] 5 <nil>
> icw > 0 > j > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > j > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > a > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > k > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > k > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > u > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > a > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > j > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > j > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > o > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > g > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > b > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > h > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > j > [wc] 0 > [i] 13
> icw > traversal
> icw > 14 > i > [wc] 0 > [i] 14
> icw > traversal
> icw > 15 > i > [wc] 0 > [i] 15
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> isdbplotyak <<<<

> icw > start > [ isdbplotyak ] 0 <nil>
> icw > 0 > i > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > s > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > b > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > p > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > t > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > k > [wc] 0 > [i] 10
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> jvkmxhtmyznha <<<<

> icw > start > [ jvkmxhtmyznha ] 0 <nil>
> icw > 0 > j > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > v > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > k > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > m > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > x > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > h > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > t > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > m > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > z > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > n > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > h > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > a > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lqjnqzrwrmgt <<<<

> icw > start > [ lqjnqzrwrmgt ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > q > [wc] 0 > [i] 1
> icw > split [ lq ][ jnqzrwrmgt ]

> icw > start > [ jnqzrwrmgt ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > n > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > q > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 2 > j > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > n > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > q > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > z > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > r > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > w > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > m > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > g > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > t > [wc] 0 > [i] 11
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> mbbhfli <<<<

> icw > start > [ mbbhfli ] 0 <nil>
> icw > 0 > m > [wc] 0 > [i] 0
> icw > split [ m ][ bbhfli ]

> icw > start > [ bbhfli ] 1 <nil>
> icw > 0 > b > [wc] 1 > [i] 0
> icw > split [ b ][ bhfli ]

> icw > start > [ bhfli ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ hfli ]

> icw > start > [ hfli ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ fli ]

> icw > start > [ fli ] 4 <nil>
> icw > 0 > f > [wc] 4 > [i] 0
> icw > split [ f ][ li ]

> icw > start > [ li ] 5 <nil>
> icw > 0 > l > [wc] 5 > [i] 0
> icw > traversal
> icw > 1 > i > [wc] 5 > [i] 1
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > l > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > i > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > f > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > l > [wc] 3 > [i] 2
> icw > split [ hfl ][ i ]

> icw > start > [ i ] 4 <nil>
> icw > 0 > i > [wc] 4 > [i] 0
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 3 > i > [wc] 3 > [i] 3
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > h > [wc] 2 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > h > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > b > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > h > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > f > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > l > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > i > [wc] 0 > [i] 6
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> bpeohsufree <<<<

> icw > start > [ bpeohsufree ] 0 <nil>
> icw > 0 > b > [wc] 0 > [i] 0
> icw > split [ b ][ peohsufree ]

> icw > start > [ peohsufree ] 1 <nil>
> icw > 0 > p > [wc] 1 > [i] 0
> icw > split [ p ][ eohsufree ]

> icw > start > [ eohsufree ] 2 <nil>
> icw > 0 > e > [wc] 2 > [i] 0
> icw > split [ e ][ ohsufree ]

> icw > start > [ ohsufree ] 3 <nil>
> icw > 0 > o > [wc] 3 > [i] 0
> icw > split [ o ][ hsufree ]

> icw > start > [ hsufree ] 4 <nil>
> icw > 0 > h > [wc] 4 > [i] 0
> icw > split [ h ][ sufree ]

> icw > start > [ sufree ] 5 <nil>
> icw > 0 > s > [wc] 5 > [i] 0
> icw > split [ s ][ ufree ]

> icw > start > [ ufree ] 6 <nil>
> icw > 0 > u > [wc] 6 > [i] 0
> icw > split [ u ][ free ]

> icw > start > [ free ] 7 <nil>
> icw > 0 > f > [wc] 7 > [i] 0
> icw > split [ f ][ ree ]

> icw > start > [ ree ] 8 <nil>
> icw > 0 > r > [wc] 8 > [i] 0
> icw > split [ r ][ ee ]

> icw > start > [ ee ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > split [ e ][ e ]

> icw > start > [ e ] 10 <nil>
> icw > 0 > e > [wc] 10 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 9 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 8 > [i] 1
> icw > split [ re ][ e ]

> icw > start > [ e ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 8 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 5 > [i] 1
> icw > split [ su ][ free ]

> icw > start > [ free ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ ree ]

> icw > start > [ ree ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ ee ]

> icw > start > [ ee ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ e ]

> icw > start > [ e ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > split [ re ][ e ]

> icw > start > [ e ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > h > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > o > [wc] 2 > [i] 1
> icw > split [ eo ][ hsufree ]

> icw > start > [ hsufree ] 3 <nil>
> icw > 0 > h > [wc] 3 > [i] 0
> icw > split [ h ][ sufree ]

> icw > start > [ sufree ] 4 <nil>
> icw > 0 > s > [wc] 4 > [i] 0
> icw > split [ s ][ ufree ]

> icw > start > [ ufree ] 5 <nil>
> icw > 0 > u > [wc] 5 > [i] 0
> icw > split [ u ][ free ]

> icw > start > [ free ] 6 <nil>
> icw > 0 > f > [wc] 6 > [i] 0
> icw > split [ f ][ ree ]

> icw > start > [ ree ] 7 <nil>
> icw > 0 > r > [wc] 7 > [i] 0
> icw > split [ r ][ ee ]

> icw > start > [ ee ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ e ]

> icw > start > [ e ] 9 <nil>
> icw > 0 > e > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 8 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > split [ re ][ e ]

> icw > start > [ e ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 7 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > f > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > u > [wc] 4 > [i] 1
> icw > split [ su ][ free ]

> icw > start > [ free ] 5 <nil>
> icw > 0 > f > [wc] 5 > [i] 0
> icw > split [ f ][ ree ]

> icw > start > [ ree ] 6 <nil>
> icw > 0 > r > [wc] 6 > [i] 0
> icw > split [ r ][ ee ]

> icw > start > [ ee ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ e ]

> icw > start > [ e ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > split [ re ][ e ]

> icw > start > [ e ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 5 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > f > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > s > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > u > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > h > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 1 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > p > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > o > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > h > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > s > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > u > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > f > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > r > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > e > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > e > [wc] 0 > [i] 10
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> findAllConcatenatedWordInADict >>> ajrcsfogh <<<<

> icw > start > [ ajrcsfogh ] 0 <nil>
> icw > 0 > a > [wc] 0 > [i] 0
> icw > split [ a ][ jrcsfogh ]

> icw > start > [ jrcsfogh ] 1 <nil>
> icw > 0 > j > [wc] 1 > [i] 0
> icw > traversal
> icw > 1 > r > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > c > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > s > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > o > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > g > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> lucidbnlysamvy <<<<

> icw > start > [ lucidbnlysamvy ] 0 <nil>
> icw > 0 > l > [wc] 0 > [i] 0
> icw > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > c > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > i > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > b > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > l > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > y > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > s > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > a > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > m > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > v > [wc] 0 > [i] 12
> icw > traversal
> icw > 13 > y > [wc] 0 > [i] 13
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> tutjdfnvhahxy <<<<

> icw > start > [ tutjdfnvhahxy ] 0 <nil>
> icw > 0 > t > [wc] 0 > [i] 0
> icw > split [ t ][ utjdfnvhahxy ]

> icw > start > [ utjdfnvhahxy ] 1 <nil>
> icw > 0 > u > [wc] 1 > [i] 0
> icw > split [ u ][ tjdfnvhahxy ]

> icw > start > [ tjdfnvhahxy ] 2 <nil>
> icw > 0 > t > [wc] 2 > [i] 0
> icw > split [ t ][ jdfnvhahxy ]

> icw > start > [ jdfnvhahxy ] 3 <nil>
> icw > 0 > j > [wc] 3 > [i] 0
> icw > traversal
> icw > 1 > d > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > f > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > j > [wc] 2 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > t > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > j > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > false > result > false
> icw > after split > traversal
> icw > 1 > u > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > t > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > j > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > d > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > f > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > n > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > v > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > h > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > traversal
> icw > 10 > h > [wc] 0 > [i] 10
> icw > traversal
> icw > 11 > x > [wc] 0 > [i] 11
> icw > traversal
> icw > 12 > y > [wc] 0 > [i] 12
> icw > is not a concat word
> icw > returning >>> curResult false > splitResult > false > result > false

> findAllConcatenatedWordInADict >>> urbrmmadea <<<<

> icw > start > [ urbrmmadea ] 0 <nil>
> icw > 0 > u > [wc] 0 > [i] 0
> icw > split [ u ][ rbrmmadea ]

> icw > start > [ rbrmmadea ] 1 <nil>
> icw > 0 > r > [wc] 1 > [i] 0
> icw > split [ r ][ brmmadea ]

> icw > start > [ brmmadea ] 2 <nil>
> icw > 0 > b > [wc] 2 > [i] 0
> icw > split [ b ][ rmmadea ]

> icw > start > [ rmmadea ] 3 <nil>
> icw > 0 > r > [wc] 3 > [i] 0
> icw > split [ r ][ mmadea ]

> icw > start > [ mmadea ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ madea ]

> icw > start > [ madea ] 5 <nil>
> icw > 0 > m > [wc] 5 > [i] 0
> icw > split [ m ][ adea ]

> icw > start > [ adea ] 6 <nil>
> icw > 0 > a > [wc] 6 > [i] 0
> icw > split [ a ][ dea ]

> icw > start > [ dea ] 7 <nil>
> icw > 0 > d > [wc] 7 > [i] 0
> icw > split [ d ][ ea ]

> icw > start > [ ea ] 8 <nil>
> icw > 0 > e > [wc] 8 > [i] 0
> icw > split [ e ][ a ]

> icw > start > [ a ] 9 <nil>
> icw > 0 > a > [wc] 9 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 8 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 7 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 6 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 6 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 4 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > traversal
> icw > 2 > m > [wc] 3 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 2 > [i] 1
> icw > split [ br ][ mmadea ]

> icw > start > [ mmadea ] 3 <nil>
> icw > 0 > m > [wc] 3 > [i] 0
> icw > split [ m ][ madea ]

> icw > start > [ madea ] 4 <nil>
> icw > 0 > m > [wc] 4 > [i] 0
> icw > split [ m ][ adea ]

> icw > start > [ adea ] 5 <nil>
> icw > 0 > a > [wc] 5 > [i] 0
> icw > split [ a ][ dea ]

> icw > start > [ dea ] 6 <nil>
> icw > 0 > d > [wc] 6 > [i] 0
> icw > split [ d ][ ea ]

> icw > start > [ ea ] 7 <nil>
> icw > 0 > e > [wc] 7 > [i] 0
> icw > split [ e ][ a ]

> icw > start > [ a ] 8 <nil>
> icw > 0 > a > [wc] 8 > [i] 0
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > false > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 7 > [i] 1
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > e > [wc] 6 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > d > [wc] 5 > [i] 1
> icw > traversal
> icw > 2 > e > [wc] 5 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > a > [wc] 4 > [i] 1
> icw > traversal
> icw > 2 > d > [wc] 4 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > m > [wc] 3 > [i] 1
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 2 > m > [wc] 2 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > b > [wc] 1 > [i] 1
> icw > traversal
> icw > 2 > r > [wc] 1 > [i] 2
> icw > Char not in dict. Break out of the loop.
> icw > returning >>> curResult false > splitResult > true > result > true
> icw > after split > traversal
> icw > 1 > r > [wc] 0 > [i] 1
> icw > traversal
> icw > 2 > b > [wc] 0 > [i] 2
> icw > traversal
> icw > 3 > r > [wc] 0 > [i] 3
> icw > traversal
> icw > 4 > m > [wc] 0 > [i] 4
> icw > traversal
> icw > 5 > m > [wc] 0 > [i] 5
> icw > traversal
> icw > 6 > a > [wc] 0 > [i] 6
> icw > traversal
> icw > 7 > d > [wc] 0 > [i] 7
> icw > traversal
> icw > 8 > e > [wc] 0 > [i] 8
> icw > traversal
> icw > 9 > a > [wc] 0 > [i] 9
> icw > is a concat word >>>>>>>>>>>>
> icw > returning >>> curResult true > splitResult > true > result > true

> result 255 [gfve qfpd lqdqrrcrwdnxeuo hbsfyfv ife ngbqqmbxqcqp khhqr dwfcayssyoqc omwufbdfxu ilebxwbcto ta tpvo tgygdt nhcvpf shwywshtdgmb bkkxcvg monmwvytby qtg cwkuzyamnerp ye tfsrptug gama nberblt mf gttxwpuk xbrtspfttota qxru phknqtsdtwxcktmw hdkbdxqg ge ukmcowoe yjyssbsoc pbcnmhf qmmidmvkn xmywegmtuno vuzygv eqrswgkaaaohxx ocedkt qghoy wsx ryp upmsoxftumyxifyu xucubv ppvs nwedtubynsb repgcx gsfomhvpmy kdohe akdt mumbh br fso xbhkkfg ax gqgsomonv reqqzzpw ogwilaswn yw egdgye yaqgault evxtehxtbthq brxpfymuvfvs rv udvmara fecd dfuydrtbfypbn cypqodxr vkmxys wvpfyfpkvgthq av vwduwmjpblqo mqrbq hnegtuxx had potn os np uzvgyeette tp wtsbhgkd xhflc phouoyhvls dqhqats koat pybf po wygsnxk kqlima fgxnuohrnhg wnnbq mdtrgv nkq vomtuy yxfeoh myctacn fdnor qfzwuwe svo dc hwc erpbaxq yyhga xwdbycdu htedgvsrhchox wr suhesetv qcagsyqggcf npdbamofynykqv nxtsnason gbndakaq hrtbfnq fguvomeepxoffg mat mabkapuoud ffjfb svthrfmkoxbho cvet ucgqyvopafyttrh vruh ukffmudygjavem dccamymhp kmm sc gcdqbcdwbwa gadgt pgowefka cpdxf sox fq ggk nraoenhd rrbhfwohfv yoifoyg ahmv byyvhgh hyw kedhvwy su jfymrbafmyoc rhymsno ocbbwwd eo ua kk cw pxnktxkm aa ngrwqpoh rwuvd bxzovyew hyfrdngjf pfgsp akyprzzphew ubheeqt apsbu mvndmua btgcpqwovwp sfzdknoxzassc fg vhfsf tyff naefganqo wrxw htknfa wfrvxqdkhbwwef vqsghhhutdget wpccoa nx bilt wqqatye bwsezd ww ss nxbk wd cfq gubqavlqffhrzz caybc mtkewbprs oncggqvr afumtqugec fd ueolqk esfmqgvxwfy npbep tovdtkr hdykehkefp ordxzm cr ngzdc fxyfqbeoktcc brdeumb dnrrgmem gvyhnchlimsxc qe qm utqfcqyrrwm qmqxceuohpiffaq tg qa coqs oa ykbcn hesvnctfvdsp ku at wqrom krvnaf typttkrpfvx nxqmxr dhthp npsoqsw reogbmveofvusdsx yu pknt ckorgrm dmoerc bhopoqdsref tmnm cre bcxw eaum dybjywyaodsyw eocfru fump qevdyd gmuyytguexnyc twn bhqultkyfq saeq xbuw kng uoay kfykd armuwp gtghfxf pbdrx adoshnx rqyex ng sid re vep ebwrcpafxzhb opvrnx vubuucilxyh goabwrqdoudf wuznnlyd advraqovan kddxywvgqxo syxngevs mwo vg bpeohsufree urbrmmadea]
