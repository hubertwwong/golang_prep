package main

import "fmt"

func printBST(vals []int) {
  rowLimit := 1
  curRowItem := 0
  for i:=0 ; i<len(vals) ; i++ {
    //printSpace(rowLimit)

    // spaces
    fmt.Print(vals[i], " ")

    curRowItem++
    if curRowItem == rowLimit {
      //fmt.Println(">>", rowLimit)
      rowLimit = rowLimit * 2
      curRowItem = 0
      fmt.Println("")
    }
  }
  fmt.Println("")
  fmt.Println("")
}

func printSpace(row int) {
  spaces := 16
  for ; spaces > 0 ; spaces-- {
    fmt.Print(" ")
  }
}

func main() {
  valsI := []int{2,0,33,-1,1,25,40,-1,-1,11,31,34,45,10,18,29,32,-1,36,43,46,4,-1,12,24,26,30,-1,-1,35,39,42,44,-1,48,3,9,-1,14,22,-1,-1,27,-1,-1,-1,-1,38,-1,41,-1,-1,-1,47,49,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6}
  fmt.Println("input")
  printBST(valsI)

  valsR := []int{2,0,34,-1,1,25,40,-1,-1,11,31,34,36,10,18,29,32,-1,36,35,39,4,-1,12,24,26,30,-1,-1,35,39,-1,-1,38,-1,3,9,-1,14,22,-1,-1,27,-1,-1,-1,-1,38,-1,37,-1,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6}
  fmt.Println("result")
  printBST(valsR)
  
  fmt.Println("expected")
  valsE := []int{2,0,34,-1,1,25,40,-1,-1,11,31,35,45,10,18,29,32,-1,36,43,46,4,-1,12,24,26,30,-1,-1,-1,39,42,44,-1,48,3,9,-1,14,22,-1,-1,27,-1,-1,38,-1,41,-1,-1,-1,47,49,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6}
  printBST(valsE)
}

/*

func deleteNode(root *TreeNode, key int) *TreeNode {
    if root == nil {
        return nil
    } 
    
    rootVal := (*root).Val
    
    // traversal.
    if key < rootVal {
        (*root).Left = deleteNode((*root).Left, key)
    } else if key > rootVal {
        (*root).Right = deleteNode((*root).Right, key)
    } else {
        // you are deleteing something here..
        
        // some helpers.
        leftC := (*root).Left
        rightC := (*root).Right
        
        // some base cases... on the delete
        if leftC == nil && rightC == nil {
            return nil
        } else if leftC == nil {
            return rightC
        } else if rightC == nil {
            return leftC
        } else {
            // when you traverse right, you see no left child.
            // this means that the right child is the correct node to do the replacement.
            leftGC := (*rightC).Left
            if leftGC == nil {
                // copy right val to cur node.
                (*root).Val = (*rightC).Val
                // delete right child by assigning it to grand child
                (*root).Right = (*rightC).Right
                return root
            } else {
                // this is the hard case..
                minVal := deleteMin(rightC)
                (*root).Val = minVal
                return root
            }
        }
    }
    
    // do i need this?
    return root
}

// delete min.
// traverse the left branch until 
func deleteMin(root *TreeNode) int {
    leftC := (*root).Left
    leftGC := (*leftC).Left
    
    if leftGC == nil {
        // at this point you are deleting the leftC
        retVal := (*leftC).Val
        rightGC := (*leftC).Right
        
        // deleaing with right grand child.
        if rightGC == nil {
            (*root).Right = nil
        } else {
            // if the right child of the child node exist.
            // attach it to root since you are deleting right child.
            (*root).Right = rightGC
        }
        
        return retVal
    } else {
        return deleteMin(leftC)
    }
}
}

// delete min


*/

/*

input
2
0 33
-1 1 25 40
-1 -1 11 31 34 45 10 18
29 32 -1 36 43 46 4 -1 12 24 26 30 -1 -1 35 39
42 44 -1 48 3 9 -1 14 22 -1 -1 27 -1 -1 -1 -1 38 -1 41 -1 -1 -1 47 49 -1 -1 5 -1 13 15 21 23
-1 28 37 -1 -1 -1 -1 -1 -1 -1 -1 8 -1 -1 -1 17 19 -1 -1 -1 -1 -1 -1 -1 7 -1 16 -1 -1 20 6


result
2
0 34
-1 1 25 40
-1 -1 11 31 34 36 10 18
29 32 -1 36 35 39 4 -1 12 24 26 30 -1 -1 35 39
-1 -1 38 -1 3 9 -1 14 22 -1 -1 27 -1 -1 -1 -1 38 -1 37 -1 -1 -1 5 -1 13 15 21 23 -1 28 37 -1
-1 -1 -1 8 -1 -1 -1 17 19 -1 -1 -1 -1 -1 -1 -1 7 -1 16 -1 -1 20 6

expected
2
0 34
-1 1 25 40
-1 -1 11 31 35 45 10 18
29 32 -1 36 43 46 4 -1 12 24 26 30 -1 -1 -1 39
42 44 -1 48 3 9 -1 14 22 -1 -1 27 -1 -1 38 -1 41 -1 -1 -1 47 49 -1 -1 5 -1 13 15 21 23 -1 28
37 -1 -1 -1 -1 -1 -1 -1 -1 8 -1 -1 -1 17 19 -1 -1 -1 -1 -1 -1 -1 7 -1 16 -1 -1 20 6

*/


/*

input
                                                             2
                             0                                                       33
                 -1                    1                                  25                         40
            -1        -1             11 31                         34             45           10            18
      29 32 -1 36 43 46 4 -1 12 24 26 30 -1 -1 35 39
42 44 -1 48 3 9 -1 14 22 -1 -1 27 -1 -1 -1 -1 38 -1 41 -1 -1 -1 47 49 -1 -1 5 -1 13 15 21 23
-1 28 37 -1 -1 -1 -1 -1 -1 -1 -1 8 -1 -1 -1 17 19 -1 -1 -1 -1 -1 -1 -1 7 -1 16 -1 -1 20 6


result
                                                              2
                            0                                                          34
                       -1                      1                         25                          40
                    -1        -1            11        31         34            36                 10        18
                  29 32        -1 36         35 39      4 -1               12 24 26 30            -1 -1    35 39
-1 -1 38 -1 3 9 -1 14                                     22 -1 -1 27 -1 -1 -1 -1                 38 -1 37 -1       -1 -1 5 -1      13 15 21 23   -1 28 37 -1
-1 -1 -1 8 -1 -1 -1 17 19 -1 -1 -1 -1 -1 -1 -1 7 -1 16 -1 -1 20 6



expected
                                                               2
                              0                                                          34
                  -1                        1                              25                           40
                -1 -1                     11 31                          35 45                          10 18
              29 32 -1 36                43 46 4 -1                  12 24 26 30                -1 -1 -1 39
42 44 -1 48 3 9 -1 14 22 -1 -1 27 -1 -1 38 -1 41 -1 -1 -1 47 49 -1 -1 5 -1 13 15 21 23 -1 28
37 -1 -1 -1 -1 -1 -1 -1 -1 8 -1 -1 -1 17 19 -1 -1 -1 -1 -1 -1 -1 7 -1 16 -1 -1 20 6

*/



/*

01/05/2017

input
[2,0,33,-1,1,25,40,-1,-1,11,31,34,45,10,18,29,32,-1,36,43,46,4,-1,12,24,26,30,-1,-1,35,39,42,44,-1,48,3,9,-1,14,22,-1,-1,27,-1,-1,-1,-1,38,-1,41,-1,-1,-1,47,49,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6]
33

output
[2,0,34,-1,1,25,40,-1,-1,11,31,34,36,10,18,29,32,-1,36,35,39,4,-1,12,24,26,30,-1,-1,35,39,-1,-1,38,-1,3,9,-1,14,22,-1,-1,27,-1,-1,-1,-1,38,-1,37,-1,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6]

expected
[2,0,34,-1,1,25,40,-1,-1,11,31,35,45,10,18,29,32,-1,36,43,46,4,-1,12,24,26,30,-1,-1,-1,39,42,44,-1,48,3,9,-1,14,22,-1,-1,27,-1,-1,38,-1,41,-1,-1,-1,47,49,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6]

*/

/*
input
[2,0,33,-1,1,25,40,-1,-1,11,31,34,45,10,18,29,32,-1,36,43,46,4,-1,12,24,26,30,-1,-1,35,39,42,44,-1,48,3,9,-1,14,22,-1,-1,27,-1,-1,-1,-1,38,-1,41,-1,-1,-1,47,49,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6]
33

output
[2,0,34,-1,1,25,40,-1,-1,11,31,34,36,10,18,29,32,-1,36,35,39,4,-1,12,24,26,30,-1,-1,35,39,-1,-1,38,-1,3,9,-1,14,22,-1,-1,27,-1,-1,-1,-1,38,-1,37,-1,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6]

expected
[2,0,34,-1,1,25,40,-1,-1,11,31,35,45,10,18,29,32,-1,36,43,46,4,-1,12,24,26,30,-1,-1,-1,39,42,44,-1,48,3,9,-1,14,22,-1,-1,27,-1,-1,38,-1,41,-1,-1,-1,47,49,-1,-1,5,-1,13,15,21,23,-1,28,37,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,17,19,-1,-1,-1,-1,-1,-1,-1,7,-1,16,-1,-1,20,6]

*/